more introduction to the lab (hello, observe)
more introduction to the lab (hello, observe)
cs 161 - fall 1996


goals

to create a customized command to compile programs for this class
to become familiar with the sun environment
to become familiar with the c++ compiler and reading its messages

overview
we need to use some special files for this class; therefore, you will create a customized command to compile and execute your programs. this will briefly show you some command tool (shell) commands.
then, you will continue using the file manager, the command tool, and the edit tool. you will type in the c++ program on the second page of this lab, compile it, and execute it. you will submit that program.
finally, you will copy another program, make some changes to it, and report on what happens. this will give you experience reading the compiler's error messages and seeing what caused those messages.
creating a customized compiling command
c++ is not completely standardized. not all compilers include a string class. the sun compiler does not. but a string class will be in the standard, and using it makes some problems easier. therefore, we need to include our own string class whenever we want to use strings. this easiest way for us to do this is to create a customized command for compiling our programs. this command will call the c++ compiler but will also tell the compiler where to look for our string class and to link it in when we use it. we don't expect you to understand this part of the lab. you will not be tested on it. you'll learn these commands as time goes by.

in the command tool (shell), type the following boldface commands. note the period in the cp command. the plain text at right describes what you are doing: 
cd                          move to home directory
mkdir bin                   create a bin sub-directory
cd bin                      move into bin directory
cp /grader/katz/bin/go .    copy command to your directory
rehash                      tell shell to see new command
ls -l                       list files and permissions
cd ../labs                  go back to labs directory

you should be back at your labs directory. now, whenever you want to use strings in your code, you can use the go command to compile c++ programs. you can also use it for compiling all your other c++ programs for this class.
creating hello.cc
create c++ source file in labs folder make sure you are in the labs folder in the file manager and choose file->create document. drag over its name and call it hello.cc. open the file. type in the program below (hello2.cc from the text). include your name in the comments. get into the habit of indenting the program as shown with three or four spaces. programs are for people to read as much as for compilers to translate. proofread your typing. save the file but leave it open.
compile and execute move to the command tool. type ls to see a listing of the files in your labs folder. hello.cc should be there. type 
 go hello.cc to compile it. this will also execute the program if you have no errors. if you have errors, carefully read the messages and correct the problem by modifying the source program in the edit window. save your changes, and then run the compiler again.
submit your program in the command tool, use  submit and think about your answers to give it to your class's account as the hello lab. note that the name to use for submitting is usually at the top of the lab handout.
code for hello.cc

#include &lt;iostream.h&gt;

// traditional first program with user-defined function
// author: your name, today's date

void
hello()
{
    cout &lt;&lt; &quot;hello world&quot; &lt;&lt; endl;
}

int main()
{
    hello();

    return 0;
}


modifying an existing program
create a new program from an existing program the second program is in a file named /grader/katz/examples/bday.cc (bday2.cc from text). in the file manager, locate the file to copy. double-click on it to open it in the editor. use save as to change its name to bdaygood.cc and put it in your labs directory. add your name to the comments. save. then use save as again to name it bday.cc. at this point you have two copies of the file in your labs directory. both contain your name. you will be editing bday.cc. the other file is a backup.
compile and execute the program compile and execute bday.cc with go bday.cc.
create an observations fileto ease your writing by hand, you'll record your observations in a file named obs.txt. create it in the editor. put your name at the top.
practice reading error messages the changes exploration section below describes several changes to make to the program. follow those instructions and record your observations in your file. save your answers after each observation. be sure to save your program changes before you try to compile and always undo the change before trying the next change. when you are done, submit your observations file as observe. make sure you save before you submit.
log out save any work before logging out. quit any editor sessions. use the menu mouse button over the background and choose exit.

changes exploration
for this portion of the lab, you will make changes to a c++ program. each change will break the program slightly. you will save the broken program and try to compile it. report what you see in your observations file. between each break, restore the program to its original state before proceeding. when you finish, make sure the program is in its correct state, save it, and turn in your observations for grading.

for each change, start with the original program.

for each change, answer the following questions. if there are multiple messages and lines, give the first two errors or warnings.

what is the text of the error message? (first two if many) include the line number.
is that the same line that you changed? (use view/select line at number... )
did the program execute? does the output look pretty?


undo the previous change and make the next change.

hint: drag over the text of the messages you want to copy. press the copy button on the left side of the keyboard. click in your observations file where you want the text to be placed. press the paste button.

hint: in the command tool/shell, you can repeat a command by typing an exclamation point and one of a) another exclamation to repeat the previous command, b) the desired command's number, c) enough of the beginning of the command to choose the desired one most recently used.
changes to make

change cpstring.h to cpstring.h (all lowercase)
change int to void in int main()
change main to main in int main()
change person to kid in sing(string person)
change the first &lt;&lt; to &gt;&gt; 
delete semi-colon (;) at end of first cout statement
delete the closing brace (}) at bottom of program (last line of file)
delete return 0;
delete every  (5 of them)
change sing(&quot;grace&quot;) to sing(grace) (delete quotes around string in call)
delete four calls to sing in main program and replace the name in the remaining call with your name (you may leave it this way)




more introduction to the lab (hello, observe)
more introduction to the lab (hello, observe)
more introduction to the lab (hello, observe)
more introduction to the lab (hello, observe)
more introduction to the lab (hello, observe)
more introduction to the lab (hello, observe)
more introduction to the lab (hello, observe)
more introduction to the lab (hello, observe)
more introduction to the lab (hello, observe)
more introduction to the lab (hello, observe)