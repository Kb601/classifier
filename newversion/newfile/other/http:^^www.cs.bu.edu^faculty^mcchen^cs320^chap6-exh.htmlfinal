concepts in programming languages. chapter 6


chapter 6: modeling objects

block structured language (pascal, c)

illustrating static link to lexical parent


procedure foolish ( ... );
type list = ^cell;  cell = record value:integer; link:list end;
var p1, p2: list;

    function product (jj:  integer):integer;
    var kk:  integer;
    begin
        if jj 

the static link for all invocations of  function product  goes to
 procedure foolish, which is its lexical parent.
the dynamic link for product(2) goes to foolish; while
that of product(1) goes to product (2) and 
that of product(0) goes to product(1).




managing the stack memory

operations on the runtime stack during a function/procedure call:


 the calling program puts the argument values on the stack
   using the local-allocation pointer.  typically, the last
   argument in the function call is loaded on the stack first,
   followed by the second-last, and so on.  the first argument
   ends up at the top of the stack.
   
 the return address is written at the top of the stack, above
   the the first argument.
   
 the current top-of-stack pointer is copied to the top of the
   stack.  this will become the new dynamic link field.  the
   address of this location is stored into the top-of-stack
   pointer.
 
 the static link for the new frame is written on the stack.
   this is the same as either the static link or the dynamic
   link of the calling block.  code is generated at compile
   time to copy the appropriate link.

 the local allocation pointer is incremented by enough
   locations to store the return value and the local variables.
   if the locals have initializers, those values are also
   copied.

 control is transferred to the subroutine.





dereferencing a variable

different context:


 the left-hand side of an assignment operator.
   
 the right-hand side of an assignment operator.
   
 part of a subscript expression.
   
 a pointer expression.
   
 a parameter in a function or procedure call.



     
 




marina chen



concepts in programming languages. chapter 6

concepts in programming languages. chapter 6

concepts in programming languages. chapter 6

concepts in programming languages. chapter 6

concepts in programming languages. chapter 6

concepts in programming languages. chapter 6

concepts in programming languages. chapter 6

concepts in programming languages. chapter 6

concepts in programming languages. chapter 6

concepts in programming languages. chapter 6