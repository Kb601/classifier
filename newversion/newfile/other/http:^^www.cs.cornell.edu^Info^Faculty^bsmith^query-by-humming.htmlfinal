query by humming -- musical information retrieval in an audio database



     acm multimedia 95 - electronic proceedings 
        november 5-9, 1995  san francisco, california



query by humming -- musical information retrieval in an audio database




asif ghias

  department of computer science
  4130 upson hall
  cornell university
  ithaca, ny 14853 us
  ghias@cs.cornell.edu



jonathan logan

  department of computer science
  4130 upson hall
  cornell university
  ithaca, ny 14853 us
  logan@ghs.com


david chamberlin

  school of electrical engineering
  224 phillips hall
  cornell university
  ithaca, ny 14853 us
  chamberlin@engr.sgi.com



brian c. smith

  department of computer science
  4130 upson hall
  cornell university
  ithaca, ny 14853 us
  bsmith@cs.cornell.edu





  acm copyright notice   



abstract

the emergence of audio and video data types in databases will require
new information retrieval methods adapted to the specific
characteristics and needs of these data types. an effective and natural
way of querying a musical audio database is by humming the tune of a
song.  in this paper, a system for querying an audio database by
humming is described along with a scheme for representing the melodic
information in a song as relative pitch changes.  relevant difficulties
involved with tracking pitch are enumerated, along with the approach we
followed, and the performance results of system indicating its
effectiveness are presented.





table of contents


introduction
system architecture
tracking pitch in hummed queries 
    
     tracking pitch
    
searching the database 
evaluation 
    
    robustness 
    performance 
    
future directions and related work 
references 



introduction


next generation databases will include image, audio and video data in
addition to traditional text and numerical data. these data types will
require query methods that are more appropriate and natural to the type
of respective data. for instance, a natural way to query an image
database is to retrieve images based on operations on images or
sketches supplied as input. similarly a natural way of querying an
audio database (of songs) is to hum the tune of a song.


such a system would be useful in any multimedia database containing
musical data by providing an alternative and natural way of querying.
one can also imagine a widespread use of such a system in commercial
music industry, music radio and tv stations, music stores and even for
one's personal use.


in this paper, we address the issue of how to specify a hummed query
and report on an efficient query execution implementation using
approximate pattern matching.  our approach hinges upon the observation
that melodic contour, defined as the sequence of relative differences
in pitch between successive notes, can be used to discriminate between
melodies. handel [3] indicates that melodic
contour is one of the most important methods that listeners use to
determine similarities between melodies.  we currently use an alphabet
of three possible relationships between pitches (`u', `d', and `s'),
representing the situations where a note is above, below or the same as
the previous note, which can be pitch-tracked quite robustly.  with the
current implementation of our system we are successfully able to
retrieve most songs within 12 notes. our database currently comprises a
collection of all parts (melody and otherwise) from 183 songs,
suggesting that three-way discrimination would be useful for finding a
particular song among a private music collection, but that higher
resolutions will probably be necessary for larger databases.


this paper is organized as follows.  the first section describes the
architecture of the current system. the second section describes what
pitch is, why it is important in representing the melodic contents of
songs, several techniques for tracking pitch we tried and discarded,
and the method we settled on.  next we discuss pattern matching as it
is used in the current implementation of the database.  the last two
sections describe our evaluation of the current system and specify some
future extensions that we are considering incorporating in the existing
system.




system architecture


there are three main components to the our system: a pitch-tracking
module, a melody database, and a query engine. the architecture is
illustrated in figure 1.  operation of the system is straight-forward.
queries are hummed into a microphone, digitized, and fed into a
pitch-tracking module.  the result, a contour representation of the
hummed melody, is fed into the query engine, which produces a ranked
list of matching melodies.


 

figure 1. system architecture


the database of melodies was acquired by processing public domain midi
songs, and is stored as a flat-file database.  pitch tracking is
performed in matlab, chosen for its built-in audio processing
capabilities and the ease of testing a number of algorithms within it.
hummed queries may be recorded in a variety of formats, depending upon
the platform-specific audio input capabilities of matlab. we have
experimented with 16-bit, 44khz wav format on a pentium system, and
8-bit, 8khz au format on a sun sparcstation.  the query engine uses an
approximate pattern matching algorithm [1],
described in below, in order to tolerate humming errors.




tracking pitch in hummed queries 

this section describes how user input to the system (humming) is
converted into a sequence of relative pitch transitions. a note in the
input is classified in one of three ways: a note is either the same as
the previous note (s), higher than previous note (u), or lower than the
previous note (d). thus, the input is converted into a string with a
three letter alphabet (u,d,s). for example, the introductory theme
beethoven's 5th symphony would be converted into the sequence: - s s d
u s s d (the first note is ignored as it has no previous pitch).


to accomplish this conversion, a sequence of pitches in the melody must
be isolated and tracked. this is not as straight-forward as it sounds,
however, as there is still considerable controversy over exactly what
pitch is.  the general concept of pitch is clear: given a note, the
pitch is the frequency that most closely matches what we hear.
performing this conversion in a computer can become troublesome because
some intricacies of human hearing are still not understood.  for
instance, if we play the 4th, 5th, and 6th harmonics of some
fundamental frequency, we actually hear the fundamental frequency, not
the harmonics even though the fundamental frequency is not present.
this phenomenon was first discovered by schouten in some pioneer
investigations carried out from 1938 to 1940. schouten studied the
pitch of periodic sound waves produced by an optical siren in which the
fundamental of 200hz was canceled completely.  the pitch of the complex
tone, however, was the same as that prior to the elimination of the
fundamental [12]


since we were interested in tracking pitch in humming, we examined
methods for automatically tracking pitch in a human voice. before we
can estimate the pitch of an acoustic signal, we must first understand
how this signal is created, which requires forming a model of sound
production at the source.  the vibrations of the vocal cords in voiced
sounds are caused as a consequence of forces that are exerted on the
laryngeal walls when air flows through the glottis (the gap between the
vocal cords *).  hess [5] describes a model of the vocal cords as proposed
by hirano [6].  for the purposes of this paper
though, it is sufficient to know that the glottis repeatedly opens and
closes thus providing bursts of air through the vocal tract.


the vocal tract can be modeled as a linear passive transmission system
with a transfer function h(z).  if we add an additional transfer
function r(z) which takes into account the radiation, the output
impedance of the vocal tract can approximately be set to zero.  in the
neutral position where the vocal tract can be regarded as a uniform
tube, the resonances of the vocal tract occur at sound wavelengths of
  with l = 17cm (average value of
vocal-tract length) and a sound propagation speed of c = 340 m/s, the
frequencies of these resonances will be:    the frequencies f[k] are called formant
frequencies.


the resulting sound that we hear is considered to be the convolution of
the excitation pulse created by the glottis and the formant
frequencies.  therefore, if we want to model a speech signal, we start
with a train of excitation pulses as shown in figure 2.  for the
formant frequencies, use equation (2) with k = 1, 2, or 3.  this gives
formant frequencies:  f[1] = 500hz, f[2] = 1500 hz, and f[3] = 2500
hz.  combining these frequencies and adding an exponential envelope
produces the formant structure shown in figure 3.  by convolving the
train of excitation pulses with the formant structure, we get a
synthesized pitch as shown in figure 4.




figure 2. excitation signal used to create the
synthesized pitch.  the period in the train of excitations is
t[0]=0.01s making the pitch 100 hz.




figure 3. formant structure created using 500hz, 1500hz and
2500hz as the formant frequencies.




figure 4. synthesized pitch of 100hz created by convolving
the train of excitation pulses (spaced by 0.01s) and the formant structure.


now that we have a model of the human voice, how can it be converted to
pitch?  the most prevalent view on pitch is that what we hear as pitch
is actually the frequency at which the bursts of air occur.  so if we
can track those bursts of air we can find the pitch of the segment.

 tracking pitch
we tried three methods for tracking pitch: autocorrelation, maximum
likelihood, cepstrum analysis.


 autocorrelation 


autocorrelation is one of the oldest of the classical pitch trackers
[7].
autocorrelation isolates and tracks the peak energy levels of the
signal which is a measure of the pitch. referring back to figure 3, we see
that the signal s(n) peaks where the impulses occur. therefore, tracking
the frequency of this peaks should give us the pitch of the signal.

in order to get the frequency of these peaks we can employ autocorrelation
as defined by:




unfortunately autocorrelation is subject to aliasing (picking an
integer multiple of the actual pitch) and is computationally complex.
we found our implementation of autocorrelation to require approximately
45 seconds for 10 seconds of 44khz, 16-bit audio on a 90mhz pentium
workstation.

maximum likelihood


maximum likelihood [14] is a
modification of autocorrelation that increases the accuracy of the
pitch and decreases the chances of aliasing.


unfortunately, the computational complexity of this method makes
autocorrelation look blindingly fast.  a straight-forward
implementation in matlab takes approximately one hour to evaluate 10
seconds of audio on a 90mhz pentium workstation.  with some
optimizations, we improved the performance to approximately 15 minutes
per 10 seconds of audio, but this is still far too slow for our
purposes.  therefore, we discarded this method.  for a detailed
explanation of this method, the reader may refer to
[14].

cepstrum analysis


cepstrum analysis is the definitive classical method of pitch
extraction.  for an explanation, the reader is directed to oppenheim
and schafer's original work in [10] or in a more
compact form in [11]. we found that this method
did not give very accurate results for humming.



the output of these methods can be construed as a sequence of frequency
estimations for successive pitches in the input. we convert these
estimates into a three-step contour representation by comparing each
estimated pitch with the previous one.  in our system adjacent pitches
are considered the same if they are within a quarter-step of each other
(on an equal-tempered musical scale), but this parameter is
adjustable.


after analyzing the costs and benefits of these methods, we decided to use a
modified form of autocorrelation for our implementation.







searching the database 

having described how the user input (a hummed tune) is converted into a
string in a 3 letter alphabet, we now discuss our method for searching
an audio database. our method of searching the database is simple.
songs in the database are preprocessed to convert the melody into a
stream of u,d,s characters, and the converted user input (the
key) is compared with all the songs. the pattern-matching uses
a ``fuzzy'' search to allow for errors within the matches. these errors
reflect the inaccuracies in the way people hum as well as errors in the
representation of the songs themselves.


for performing the key-search within the database we need an efficient
approximate pattern matching algorithm. by ``approximate'' we mean that
the algorithm should be able to take into account various forms of
errors.


figure 5 summarizes the various forms of  errors anticipated
in a typical pattern matching scheme.




figure 5. three forms of anticipated errors with one
mismatch


the algorithm that we adopted for this purpose is described by
baesa-yates and perleberg [1]. this algorithm
addresses the problem of string matching with k mismatches. the
problem consists of finding all instances of a pattern string p = p1
p2 p3...pm in a text string t = t1 t2 t3...tn such that
there are at most k mismatches (characters that are not the
same) for each instance of p in t.  when k = 0 (no
mismatches) we have the simple string matching problem, solvable in
o(n) time. when k = m, every substring of t of
length m qualifies as a match, since every character of p
can be mismatched. each of the errors in the figure above corresponds
to k = 1.


it is worth mentioning that several algorithms have been developed that
address the problem of approximate string matching. running times have
ranged from o(mn) for the brute force algorithm to o(kn)
[9] or o(n log(m))
 [2].  the algorithm that we adopted offers better
performance for average cases than most other algorithms.


the worst case for this algorithm occurs when
p (the key) consists of
m occurrences of a single distinct character, and
t (contour representation of song)
consists of
n instances of that character.
in this case the running time is
o(mn). however this is neither a common nor
useful situation for our
purposes.
in the average case of an alphabet in which each character is
equally likely to occur, the running time is



where  is the size of the alphabet.


the database incorporates the key-searching scheme (using pattern
matching techniques explained above).  we envisioned the following
design goals for the database. for a given query, the database returns
a list of songs ranked by how well they matched the query, not just one
best match. the number of matches that the database should retrieve
depends upon the error-tolerance used during the key-search. this
error-tolerance could be set in one of two possible ways: either it can
be a user-definable parameter or the database can itself determine this
parameter based on, for example by heuristics that depends on the
length of the key. this design gives the user an opportunity to perform
queries even if the user is not sure of some notes within the tune.


from the results of the query the user can identify the song of
interest. if the list is too large, the user can perform a new query on
a restricted search list consisting of songs just retrieved. a
consequence of this scheme is that the user can identify sets of songs
that contain similar melodies.





evaluation 


this section describes the results of an experimental evaluation of
the system. our evaluation tested the tolerance of the system with
respect to input errors, whether from mistakes in the user's
humming or from problems with the pitch-tracking.

robustness 


the effectiveness of this method is directly related to the accuracy
with which pitches that are hummed can be tracked and the accuracy of
the melodic information within the database. under ideal circumstances,
we can achieve close to 100%accuracy tracking humming, where ideal
circumstances mean the user places a small amount of space between each
note and hits each note strongly. for this purpose, humming short notes
is encouraged. even more ideal is for the user to aspirate the notes as
much as possible, perhaps going so far as to voice a vowel, as in
``haaa haaa haaa''. we have currently only experimented with male
voices.


the evaluation database currently contains a total of 183 songs. each
song was converted from public domain general midi sources. melodies
from different musical genres were included, including both classical
and popular music.  a few simple heuristics were used to cut down on
the amount of irrelevant information from the data, e.g. midi channel
10 was ignored as this is reserved for percussion in the general midi
standard.  however the database still contains a great deal of
information unrelated to the main theme of the melody. even with this
limitation, we discovered that sequences of 10-12 pitch transitions
were sufficient to discriminate 90%of the songs.


as a consequence of using a fast approximate string matching algorithm,
search keys can be matched with any portion of the melody, rather than
just the beginning. as the size of the database grows larger, however,
this may not prove to be an advantage.



performance 

the version of the pitch-tracker using a modified form of
autocorrelation (**) takes between 20 and 45
seconds on a sparc 10 workstation to process typical sequences of hummed
notes. a brute-force search of the database unsurprisingly shows linear
growth with the size of the database, but remains below 4 seconds for
100 songs on a sparc 2. therefore the search time is currently
effectively limited by the efficiency of the pitch-tracker.


contour representations for each song are currently stored in separate
files, so opening and closing files becomes a significant overhead.
performance could be improved by packing all the songs into one file,
or by using a database manager. we plan to modularize our code to make
it independent of any particular database schema.





future directions and related work 


we plan to improve the performance and speed and robustness of the
pitch-tracking algorithm by using a cubic-spline wavelet. the cubic
spline wavelet peaks at discontinuities in the signal (i.e. the air
impulses). one of the most significant features of the wavelet analysis
is that it can be computed in o(n) time.  currently, the pitch
tracker is the slowest link in our system, so using wavelets for this
purpose has obvious advantages.


the pattern matching algorithm in its present form does not
discriminate the various forms of pattern matching errors discussed
earlier, but only accounts for them collectively. some forms of errors
may be more common than others depending upon the way people casually
hum different tunes. for example drop-out errors reflected as dropped
notes in tunes are more common than transposition or duplication
errors. tuning the key-search so that it is more tolerant to drop-out
errors, for example, may yield better results.


the melodic contours of the source songs are currently generated
automatically from midi data, which is convenient but not optimal. more
accuracy and less redundant information could be obtained by entering
the melodic themes for particular songs by hand. from a research
standpoint, an interesting question is how to extract melodies from
complex audio signals[4].


finally, we would like to characterize the improvement gained by
increasing the resolution of the relative pitch differences by
considering query alphabets of three, five and more possible
relationships between adjacent pitches. early experiments using an
alphabet of five relative pitch differences (same, higher, much higher,
lower, much lower) verified that changes of this sort are promising.
one drawback of introducing more resolution is that the user must be
somewhat more accurate in the intervals they actually hum. we will
explore the various tradeoffs involved. an important issue is precisely
where to draw the line between notes that are a little higher from the
previous note and those that are much higher.


previous work on efficiently searching a database of melodies by
humming seems to be limited. mike hawley [4]
briefly discusses a method of querying a collection of melodic themes
by searching for exact matches of sequences of relative pitches input
by a midi keyboard. we have incorporated approximate pattern matching,
implementing an actual audio database (of midi songs) and most
significantly by allowing queries to be hummed. kageyama and takashima
[8] published a paper on retrieving melodies
using a hummed melody in a japanese journal, but we were unable to
locate a translated version.



footnotes 


 *
 the terms vocal folds and vocal chords are more or less used as
synonyms in the literature.

 **
 the modifications include low-pass filtering and
center-clipping (as described in sondhi's paper
[13]) which help
eliminate the formant structure that generally causes difficulty for
autocorrelation based pitch detectors.





references 

1
ricardo a. baesa-yates and chris h. perleberg.
fast and practical approximate string matching.
combinatorial pattern matching, third annual symposium, pages
  185-192, 1992.

2
ricardo baesa-yates and g.h. gonnet.
fast string matching with mismatches.
information and computation, 1992.

3
stephen handel.
listening: an introduction to the perception of auditory
  events.
the mit press, 1989.

4
michael jerome hawley.
structure out of sound.
phd thesis, mit, september 1993.

5
wolfgang hess.
pitch determination of speech signals.
springer-verlag, berlin heidelberg, 1983.

6
m. hirano.
structure and vibratory behavior of the vocal folds.
in m. sawashima and f.s. cooper, editors, dynamic aspects of
speech production, pages 13-27. university of tokyo press, 1976.

7
l.r. rabiner j.j. dubnowski and r.w. schafer.
real-time digital hardware pitch detector.
ieee transactions on acoustics, speech and signal processing,
  assp-24(1):2-8, feb 1976.

8
t. kageyama and y. takashima.
a melody retrieval method with hummed melody (language: japanese).
transactions of the institute of electronics, information and
  communication engineers d-ii, j77d-ii(8):1543-1551, august 1994.

9
g. landau and u. vishkin.
efficient string matching with k mismatches.
theoretical computer science, 43:239-249, 1986.

10
a. v. oppenheim.
a speech analysis-synthesis system based on homomorphic filtering.
j. acoustical society of america, 45:458-465, february 1969.

11
alan v. oppenheim and ronald w. schafer.
discrete-time signal processing.
prentice hall, englewood cliffs, nj, 1989.

12
r. plomp.
aspects of tone sensation.
academic press, london, 1976.

13
m. m. sondhi.
new methods of pitch extraction.
ieee trans. audio electroacoust. (special issue on speech
  communication and processing-part ii, au-16:262-266, june 1968.

14
james d. wise, james r. caprio, and thomas w. parks.
maximum likelihood pitch estimation.
ieee trans. acoustics, speech, signal processing, 24(5):418-423,
  october 1976.








 person by humming -- musical information retrieval in an audio database
 person by humming -- musical information retrieval in an audio database
 person by humming -- musical information retrieval in an audio database
 person by humming -- musical information retrieval in an audio database
 person by humming -- musical information retrieval in an audio database
 person by humming -- musical information retrieval in an audio database
 person by humming -- musical information retrieval in an audio database
 person by humming -- musical information retrieval in an audio database
 person by humming -- musical information retrieval in an audio database
 person by humming -- musical information retrieval in an audio database