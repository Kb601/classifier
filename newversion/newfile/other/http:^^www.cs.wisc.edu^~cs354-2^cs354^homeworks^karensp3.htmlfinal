jt-p3.html
   



cs354, fall 1996

program 3, due monday october 7, before 5pm.

purpose: to learn how to display the mips risc
internal representation of characters, integers and floating point
numbers, to practice using the logical and shift instructions in sal.


program description: write a sal program that:

(a) reads four characters and stores them in a 32-bit word, then prints
out the word in hexadecimal,

(b) next reads a floating point number, then prints out the bit
patterns for the fields s, e and f,

(c) and finally reads an integer, then prints out the 32 bit 2's
complement form of the integer.

sample run:


enter 4 characters: char
0x43686172
enter floating point value: 17.15
0 10000011 00010010011001100110011
enter integer: 130
0000 0000 0000 0000 0000 0000 1000 0010


algorithm:

(a) use getc ch to read the four characters,
where ch is of type .byte, and shift each into a 
32-bit word as you read them. write a print
procedure that accepts the word as input, prints the "0x," and then
prints out eight hexadecimal digits.

(b) use get f to read the floating point number,
where f is of
type .float. copy the floating point number to an
integer variable, and
then print the three fields of the floating point number
with one space between the fields.

note: the get instruction, when used on a variable of type
.float, automatically stores the variable in ieee single
precision fps format.

(c) use get i to read the integer, where i
is of type .word,
then print the 32 bits of i with one space between groups of
four bits.

specific requirements for your program:

(1) you may assume that you will receive no bad data.
assume the user types in four characters followed by a
return (you need to read the return and discard it).
assume the user enters a valid floating point number followed by a return.
assume the user next enters a valid integer followed by a return.


(2)
write and use a procedure that prints a subset of the bits of a 32-bit word
given parameters that specify which bits.
use this procedure for parts (b) and (c) of the program.
an implementation example of this procedure might be if the 32-bit word
contained the value

00000000000011000111111110000110

and the subrange of bits to print out was 7..4, then the procedure would
print the value

1000

note that implied in this implementation example is a little endian
numbering of bits.


handing in your program: turn in your program
(the sal source code) by running the script

handin3 program3.s


just once, where program3.s is the name of the file containing
your sal source code. no printouts will be turned in. the ta/grader
will run your program several times using different test data.





jt-p3.html
jt-p3.html
jt-p3.html
jt-p3.html
jt-p3.html
jt-p3.html
jt-p3.html
jt-p3.html
jt-p3.html
jt-p3.html