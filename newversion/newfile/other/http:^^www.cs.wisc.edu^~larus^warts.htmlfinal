warts




warts wisconsin architectural research tool set

mark d. hill, james r. larus, alvin r. lebeck, madhusudhan talluri,
and david a. wood

computer sciences department
university of wisconsin
1210 west dayton st.
madison, wi 53706
warts@cs.wisc.edu

 wisconsin architectural research tool set (warts) is a collection of
tools for profiling and tracing programs and analyzing program
traces. warts currently contains:


 qpt and qpt2, program profiling and tracing system.
 cprof,  cache performance profiler.
 tycho and dineroiii, cache simulators.
 eel, library for editing executable files.
 fast cache, framework for memory system simulators.


 
warts is distributed with the full source and a small amount of
documentation. the tools in warts are copyrighted and distributed under
license. a copy of the license is available on ftp.cs.wisc.edu in:
~ftp/pub/warts/license.ps
or it can be obtained by writing to the address above.  warts is
available without charge for university researchers and is available
to other researchers for a modest research donation.  contact
warts@cs.wisc.edu for more details.


we also maintain a list of changes and improvements to warts programs.


 cprof: 
the cprof system is a cache performance profiler written by alvin
r. lebeck and david a. wood that annotates source listings to identify the
source lines and data structures that cause frequent cache misses. the
cprof system consists of two programs: cprof, a uniprocessor cache
simulator, and xcprof, an x windows user interface. cprof processes
program traces generated by qpt (see above) and annotates source lines and
data structures with the appropriate cache miss statistics. xcprof
provides a generalized x windows interface for easy viewing of annotated
source files.

the performance of current risc processors is very sensitive to cache miss
ratios. programmers, compiler writers, and language designers must
explicitly consider cache behavior to fully exploit a program's
performance potential. cprof provides detailed information about a
program's cache behavior through full cache simulation. by annotating
lines of source code and data structures with the corresponding number of
cache misses, cprof helps the user focus on problematic data structures
and algorithms. cprof aids the programmer in identifying types of
transformations that can improve program cache behavior by classifying
cache misses as: compulsory, capacity, or conflict.

note: this product contains software developed by the university of
california, berkeley and its contributors.

our experience using cprof to tune this subset of the spec benchmarks is
detailed in:

[1] alvin r. lebeck and david a. wood, "cache profiling and the spec
benchmarks: a case study," ieee computer, vol. 27, no. 10, oct. 1994,
pp. 15-26.


 tycho and dineroiii: 
tycho and dineroiii are uniprocessor cache simulators written by mark
hill. the simulators report the behavior of one or more alternative cache
designs in response to an input trace provided by the user (e.g., with
qpt). a trace is a list of the memory references that a program or
workload makes while it is executing. both simulators are written in c,
use the same ascii trace format, and have been distributed to dozens of
companies and universities.

the first simulator, tycho, simultaneously evaluates many alternative
uniprocessor caches, but severely restricts the design options that may be
varied [1]. specifically, with one pass through an address trace, tycho
will produce a table of miss ratios for caches of many sizes and
associativities, provided that all caches have the same block (line) size,
do no prefetching, and use lru replacement. tycho is used, for example,
with the spec benchmark suite to examine numerous caches [2]. tycho is
most useful for reducing the size of a large cache design space. a second
version of tycho--tychoii--provides higher performance
with the option of binary trace input and several other optimizations by
madhusudhan talluri. tychoii, however, is more complex than
tycho and has not been widely used.

the second simulator, dineroiii, evaluates only one uniprocessor cache at
a time, but produces more performance metrics (e.g., traffic to and from
memory) and allows more cache design options to be varied (e.g.,
write-back vs. write-through, lru vs. random replacement, demand fetching
vs. prefetching). dineroiii is distributed for instructional use with a
popular graduate computer architecture textbook [3]. dineroiii is most
useful for carefully studying a few alternative cache designs.

[1] mark d. hill and alan jay smith, "evaluating associativity in cpu
caches," ieee trans. on computers, c-38, 12, december 1989, p.1612-1630.

[2] jeffrey d. gee, mark d. hill, dionisios n. pnevmatikatos, alan jay
smith, "cache performance of the spec benchmark suite," to appear, ieee
micro, august 1993, 3, 2.

[3] john l. hennessy and david a. patterson, computer architecture: a
quantitative approach, morgan kaufmann, san mateo, california, 1990



last modified: may 14 1996 by james larus

  larus@cs.wisc.edu




 warts
 warts
 warts
 warts
 warts
 warts
 warts
 warts
 warts
 warts