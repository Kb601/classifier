cs 537 - introduction





cs 537lecture notesintroduction




contents

     history
         what is an os for?
     bottom-up view
     top-down view
     course outline




  history  


    once computers were expensive and rare.
    now they are cheap (or expensive!) and ubiquitous.
    hardware trends:
    
        vacuum tubes, core memory, punched cards
            
            -&gt; transistors, magnetic tapes
            -&gt; integrated circuits, disks
            -&gt; vlsi (computer on a chip)
            
        main frame ($1 million and up)
            
            -&gt; mini $50k - $1m; workstation $10k - $50k
            -&gt; micro (pc) $1k - $10k
            -&gt; network computer $500 and up (??)
            
    
    software:
    
        batch system.  one user at a time.  same person was programmer,
            operator, and end-user (who wants something done)
            
            -&gt; multiprogrammed (more than one "job" at a time)
                (to improve utilization -- e.g. spooling)
            -&gt; time-sharing (multiple interactive users)
            -&gt; single-user pc or ws (come full-circle?)
            
        other kinds of systems:
            
            transaction processing (e.g. banking, airlines)
            real-time (e.g., missile defense, factory control)
            embedded systems (a computer in every toaster)
            
    


      what is an os for?  

    beautification principle
    
        the goal of an os is to make hardware look better than it is.
        
            more regular, uniform (instead of lots of idiosyncratic devices)
            easier to program (e.g., don't have to worry about speeds,
                asynchronous events)
            closer to what's needed for applications:
            
                named, variable-length files, rather than disk blocks
                multiple ``cpu's'', one for each user (in shared system)
                    or activity (in single-user system)
                multiple large, dynamically-growing memories (virtual
                    memory)
            
        
    resource principle
    
        
        the goal of an os is to mediate sharing of scarce resources
            
            q:what is a ``resource''?
            a:something that costs money!
            
        why share?
            
            expensive devices
            need to share data (database is an ``expensive device''!)
            cooperation between people (community is an ``expensive device''!!)
            
        problems:
            
            getting it to work at all
            getting it to work efficiently
                
                utilization (keeping all the devices busy)
                throughput (getting a lot of useful work done per hour)
                response (getting individual things done quickly)
                
            protection
                
                limiting the effects of bugs
                    (preventing idiots from ruining it for everyone)
                preventing unauthorized
                    
                    access to data
                    modification of data
                    use of resources
                    
                    (preventing bad guys from ruining it for everyone)
                
            
        


  bottom-up view
(starting with the hardware)
 
hardware (summary; more details later)
    
    components
        
        one or more central processing units (cpu's)
        main memory (ram, core)
        i/o devices
        bus, or other communication mechanism connects them all together
        
    cpu has pc pointing to next instruction to execute
        
        fetches instructions one at a time from location specified by pc
        increments pc after fetching instruction; branch instructions
            can also alter the pc
        responds to "interrupts" by jumping to a different location
            (like an unscheduled procedure call)
        
    memory responds to "load" and "store" requests from the cpu, one at
        a time.
    i/o device
        
        usually looks like a chunk of memory to the cpu.
        cpu sets options and starts i/o by sending "store" requests
            to a particular address.
        cpu gets back status and small amounts of data by issuing "load"
            requests.
        direct memory access (dma):  device may transfer large amounts of
            data directly to/from memory by doing loads and stores
            just like a cpu.
        issues an interrupt to the cpu to indicate that it is done.
        
    
timing problem
    
    i/o devices are millions or even billions of times slower than cpu.
    e.g.:
        
        typical pc is >10 million instructions/sec
        typical disk takes > 10 ms to get one byte from disk
            ratio: 100,000 : 1
        typical typist = 60 wpm = 1 word = 5 bytes/sec = 200 ms
            = 2 million instructions per key-stroke.  and that
            doesn't include head-scratching time!
        
    solution:
        
start disk device
do 100,000 instructions of other useful computation
wait for disk to finish
        
    terrible program to write; debug.  and it would change with a faster
        disk!
    better solution:

process 1:
    for (;;) {
        start i/o
        wait for it to finish
        use the data for something
    }
process 2:
    for (;;) {
        do some useful computation
    }

        operating system takes care of switching back and forth between
            process 1 and process 2 as ``appropriate''.
            (question:  which process should have higher priority?)
    
space problem
    
    most of the time, a typical program is "wasting" most of the memory
    space allocated to it.
        
        looping in one subroutine (wasting space allocated
            to rest of program)
        fiddling with one data structure (wasting space allocated to
            other data structures)
        waiting for i/o or user input (wasting all of its space)
        
    solution: virtual memory
        
        keep program and data on disk (100-1000 times cheaper/byte).
        os automatically copies to memory pieces needed by program
            on demand.
        
    


  top-down view
(what does it look like to various kinds of users?)
 

    end user.
        
        wants to get something done (bill customers, write a love letter,
            play a game, design a bomb).
        doesn't know what an os is (or care!)
            may not even realize there is a computer there.
        
    application programmer.
        
        writes software for end users.  uses ``beautified'' virtual machine
            
            named files of unlimited size
            unlimited memory
            read/write returns immediately
            
        calls library routines
            
            some really are just subroutines written by someone else
                
                sort an array
                solve a differential equation
                search a string for a character
                
            others call the operating system 
                
                read/write
                create process
                get more memory
                
            
        
    systems programmer (you, at the end of this course)
        
        creates abstractions for application programmers
        deals with real devices
        


  course outline  

     processes.
        
        what processes are.
        using processes
            
            synchronization and communication
                
                semaphores, critical regions, monitors, conditions,
                messages, pipes
                
            process structures
                
                pipelines, producer/consumer, remote procedure call
                
            deadlock
            
        implementing processes
            
            mechanism
                
                critical sections
                process control block
                process swap
                semaphores, monitors
                
            policy (short-term scheduling)
                
                fcfs, round-robin, shortest-job next, multilevel queues
                
            
        
     memory
        
        main-memory allocation
        swapping, overlays
        stack allocation (implementation of programming languages)
        virtual memory hardware
            
            paging, segmentation, translation lookaside buffer
            
        policy
            
            page-replacement algorithms
                
                random, fifo, lru, clock, working set
                
            
        
     i/o devices
        
        device drivers, interrupt handlers
        disks
            
            hardware characteristics
            disk scheduling
                
                elevator algorithm
                
            
        
     file systems
        
        file naming
        file structure (user's view)
            
            flat (array of bytes)
            record-structured
            indexed
            random-access
            metadata
            mapped files
            
        implementation
            
            structure
                
                linked, tree-structured, b-tree
                
            inodes
            directories
            free-space management
            
        
     protection and security
        
        threats
        access policy
            
            capabilities, access-control lists
            
        implementation
            
            authentication/determination/enforcement
            encryption
                
                conventional
                public-key
                digital signatures
                
            
        







solomon@cs.wisc.edu


thu oct 31 15:38:51 cst 1996



copyright &#169; 1996 by marvin solomon.  all rights reserved.





 cs 537 - introduction
 cs 537 - introduction
 cs 537 - introduction
 cs 537 - introduction
 cs 537 - introduction
 cs 537 - introduction
 cs 537 - introduction
 cs 537 - introduction
 cs 537 - introduction
 cs 537 - introduction