introduction

cs a10: introduction to computer programming



what you'll learn

how to design and build interactive software systems.
how to use a modern programming environment to code and debug multi-file c and
c++ projects.
how to design language-independent algorithms and data structures.
how to design application program interfaces for new code libraries.
how to write simple c code.
how networked client/server computing works, as exemplified by the world wide
web.


texts

	eric roberts, 
the
art and science of c
	handouts
	web pages


scheduling note

this course follows the schedule of the mccormick school of engineering. that
means that classes will meet during reading week.


computing requirements

to do the assignments, you must have ready access to one of the following
platforms:

	a pc-compatible, 386 or better, with borland's turbo c/c++, preferrably
version 4.5
	a macintosh, preferrably 68030 or better, with symantec's think c/c++
	a unix machine with gnu c/c++ and x-windows, with either the athena or
motif widget set


in addition, no matter which of the platforms you're on,
you also need:

	a computer on the northwestern network with
	a web browser, preferrably netscape 1.1n or better, or the most recent
release of mosaic
	an ftp program, e.g., ftp on unix, fetch on the macintosh, or ftp client
for windows on the pc


course notes, announcements, assignments, and c/c++ code that
you must have, will be available only via the network.


topics

basic
programming language concepts


	constants (integers, floats, strings) and variables
	reading and writing data
	expressions: arithmetic, logical
	control statements: iteration (for, while), branching
(if, switch)
	functions: calling, defining, prototyping
	files


basic
computer science concepts


	data structures (strings, arrays, pointers)
	algorithms and algorithm analysis


software
development


	libraries: using, defining (interface and implementation)
	development environments: files, projects, debuggers


program
design


	requirements analysis
	algorithm and data structure design
	modules and application program interfaces (api's)
	coding for maintainability
	testing and debugging
	programming-in-the-large


application
concepts


	graphics
	graphical interactive interfaces
	event-driven programming


assignments and work load

you learn by doing. there's a lot to learn in this course, so there's a lot of
doing. while the basic concepts will be taught in the lectures and assessed in
the exams, the real learning will occur in the programming assignments.

this is a very time-consuming course. 

comments?  send mail to 
chris
riesbeck.

 introduction
 introduction
 introduction
 introduction
 introduction
 introduction
 introduction
 introduction
 introduction
 introduction