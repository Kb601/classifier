tt4





cs100

lecture 4


concepts --- last lecture

types, user-defined functions, applicative-order
substitution, recursion


concepts --- this lecture

specifications


reading

teitelbaum, section 2.10

specifications


a specification is a contract between
a producer and consumers. 




example: electrical outlets




specification: if you put two pieces of metal
of the appropriate shape into an outlet, you will get 110 volts
at 60 hz between them




a specification details what the consumer
can assume about the component, which is what the producer (the
power company) must deliver.




you can think of a specification as a legally
binding contract




how the power company generates the power is
not part of the specification

hydro power, or coal, or hamsters on treadmills





software specifications


functions are software components.




in software, producers are implementors and
consumers are clients.




when defining a function, you are implementor;
when using a function, you are client. 




a function's specification consists of its signature
and its correctness specification. 




/* exp(x,n) == x^n, for n &gt;= 0.
*/

int exp(int x, int n)

{

 return (n == 0) ? 1 : exp(x, n-1)
* x;

}

signature: a function
taking two int's and returning an int

correctness specification:
if n &gt;= 0, then exp(x,n)
will yield xn

 

signatures


the number of parameters that a function takes,
together with their types, and  the type of the result it returns
are its signature.





note that the body of the function doesn't affect
the signature




in a function application, the number and type
of the arguments must match the signature.


exp(5, 3, 1)    is wrongexp(&quot;hello&quot;, 1)
  is wrongprintf(exp(5, 1))   is wrong

correctness specifications


a correctness specification states what
a function does without saying how it does it.


/* == x^n, for n &gt;= 0. */

it consists of a precondition and a postcondition
(this distinction will be clearer in a few weeks).




the precondition restricts the permissible
arguments, e.g., n &#179;
0.




the postcondition describes the result
in terms of the arguments, e.g., xn.




in general, a correctness specification states:


if the arguments in a function application satisfy
the precondition, then the application will yield a value that
satisfies the postcondition.
e.g., if n &gt;= 0, then exp(x,n) will yield
xn.


if the precondition is not satisfied, the result
is not defined, i.e., can be anything (or diverge).




e.g.,  exp(x, n) diverges, for
n &lt; 0.


exp(5, -1)(-1 == 0) ? 1 : exp(5, -1 - 1) *
50 ? 1 : exp(5, -1 - 1) * 5exp(5, -1 - 1) * 5exp(5,
-2) * 5((-2 == 0) ? 1 : exp(5, -2 - 1) * 5) * 5(0
? 1 : exp(5, -2 - 1) * 5) * 5exp(5, -2 - 1) * 5 * 5exp(5,
-3) * 5 * 5...


a function should never be called with arguments
that do not satisfy the precondition.




because a conditional expression is non-strict,
evaluating exp(5,0) never
calls exp(5,-1) in


exp(5, 0)(0
== 0) ? 1 : exp(5, 0
- 1)1 ? 1 : exp(5, 0 - 1)1

implementations


many implementations can satisfy a given specification.


/* == x^4. */
int fourth(int x) { return (x * x * x * x); }
/* == x^4. */
int fourth(int x) { return (square(square(x))); }

/* == x^4. */
int fourth(int x) { return (exp(x, 4)); }


the specification should not describe the implementation,
which the implementor has freedom to change.

this is why specifications are vital to
the design of large programs!use
of mathematical functions





can use arbitrary mathematical functions in a
specification, but &#133;




be sure the mathematical functions are well-defined
for all arguments permitted by the precondition.




e.g., a minor flaw in
/* == x^n, for n &gt;= 0. */
because xn is not defined for x = 0 and
n = 0.


correction


/* == x^n, for n &gt;= 0,  and x and n not both 0.
*/


or
/* == x^n, for n &gt;= 0 and
x != 0, and   == 1, for n == 0 and x == 0. */
counting
/* == id. */
int count(int lo, int hi, int id) {
return lo &gt; hi ? id : count(lo + 1, hi, id);}


for example
count(1, 2, 0)1 &gt; 2
? 0 : count(1 + 1, 2, 0)0 ? 0 : count(1 + 1, 2, 0)count(1
+ 1, 2, 0)count(2, 2, 0)2 &gt; 2 ? 0 : count(2 + 1,
2, 0)0 ? 0 : count(2 + 1, 2, 0)count(2 + 1, 2, 0)count(3,
2, 0)3 &gt; 2 ? 0 : count(3 + 1, 2, 0)1 ? 0 : count(3 +
1, 2, 0)0

sum of squares
/* == lo^2 + (lo+1)^2
+ ... + hi^2. */
int sumsquares(int lo, int hi){
return lo &gt; hi ? 0 : square(lo) + sumsquares(lo + 1, 
hi);}


for example, sumsquares(1,2)
-> 1*1+2*2
-> 5.



factorial
/* == lo * (lo+1)
*... * hi. */
int multintegers(int lo, int hi){
return
lo &gt; hi ? 1   :  lo * multintegers(lo + 1, hi);}


for example, multintegers(1,4)
-> 1*2*3*4
-> 24.

/* == n!, n &gt;= 0. */
int factorial(int n) {
 return multintegers(1,n); }



tt4
tt4
tt4
tt4
tt4
tt4
tt4
tt4
tt4
tt4