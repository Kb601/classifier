"improving balanced scheduling with compiler optimizations that increase instruction-level parallelism"



improving balanced scheduling with compiler optimizations that increase instruction-level parallelism



jack l. lo and 

susan j. eggers


traditional list schedulers order instructions based on an optimistic
estimate of the load latency imposed by the hardware and therefore
cannot respond to variations in memory latency caused by cache hits
and misses on non-blocking architectures.  in contrast, balanced
scheduling schedules instructions based on an estimate of the amount of
instruction-level parallelism in the program.  by scheduling independent
instructions behind loads based on what the program can provide, rather
than what the implementation stipulates in the best case (i.e., a cache
hit), balanced scheduling can hide variations in memory latencies more 
effectively.

since its success depends on the amount of instruction-level parallelism
in the code, balanced scheduling should perform even better when more
parallelism is available.  in this study, we combine balanced scheduling
with three compiler optimizations that increase instruction-level parallelism:
loop unrolling, trace scheduling and cache locality analysis.  using code
generated for the dec alpha by the multiflow compiler, we simulated a non-
blocking processor architecture that closely models the alpha 21164.  our
results show that balanced scheduling benefits from all three optimizations,
producing average speedups that range from 1.15 to 1.40, across the 
optimizations.  more importantly, because of its ability to tolerate
variations in load interlocks, it improves its advantage over traditional
scheduling.  without the optimizations, balanced scheduled code is, on
average, 1.05 times faster than that generated by a traditional scheduler;
with them, its lead increases to 1.18.




in proceedings of the acm sigplan '95 conference on programming language design and implementation, la jolla, california, june 1995, pages 151-162.


to get the postscript file, click
here.



jlo@cs.washington.edu  




 `` improving balanced scheduling with compiler optimizations that person instruction-level parallelism ''
 `` improving balanced scheduling with compiler optimizations that person instruction-level parallelism ''
 `` improving balanced scheduling with compiler optimizations that person instruction-level parallelism ''
 `` improving balanced scheduling with compiler optimizations that person instruction-level parallelism ''
 `` improving balanced scheduling with compiler optimizations that person instruction-level parallelism ''
 `` improving balanced scheduling with compiler optimizations that person instruction-level parallelism ''
 `` improving balanced scheduling with compiler optimizations that person instruction-level parallelism ''
 `` improving balanced scheduling with compiler optimizations that person instruction-level parallelism ''
 `` improving balanced scheduling with compiler optimizations that person instruction-level parallelism ''
 `` improving balanced scheduling with compiler optimizations that person instruction-level parallelism ''