george forman: dissertation research






george forman: dissertation research








overview

the current focus of my work is on constructing tools to aid in writing
applications that provide good interactive responsiveness even in
environments where resource availability is hard to predict or is highly
dynamic.  applications that depend on networking (even indirectly, such as
through a networked file system) may encounter several orders of magnitude of
bandwidth variability in a mobile computing environment where the interface
can switch between wireless and wired connections.  operating systems can not
effectively hide such great network variation; instead, applications need to
be flexible about their resource demands if they are to remain usable through
periods of degraded service.







towards this end, my dissertation research develops an application framework
and runtime system to express and manage logical units of resource demand
(concurrency and progressive-quality results), gaining responsiveness at the
user interface principally by trading off the short-term quality of the
response.

	for further introductory material, please read the

abstract to my dissertation.  the technical details are not yet
available online.










	these pages are no longer maintained


try out these demos yourself 
	(if you're running x windows)  

i have implemented a prototype system to test my ideas.  it consists of
a set of language extensions to c++, a pre-processor to convert these into
multi-threaded c++ code, and a runtime system to manage the dynamic task graph.
i have written three interactive applications using this prototype system:
	a library catalog database browser,
	a mandelbrot fractal generator, and
	a web browser for photo albums in an incremental-resolution .
the latter two are available here for demonstration.


when system resources are plentiful, it's easy to get good response time.
it's when resources are scarce that responsiveness support begins to help.
so, each of these demos is designed to exceed the capacity of our local
resources.




 
 which program would you like to run?



fractal explorer: generates multiple mandelbrot fractals incrementally
and concurrently, with the mouse position controlling priority among windows.


	






photo album browser: downloads a collection of photographs with
progressively improving quality & prioritization among pictures.


	






 to permit the application to connect to your display, execute the unix command

xhost +trouble.cs.washington.edu




 enter your display name (e.g. xterminal.u.washington.edu:0) or ip address 
(e.g. 12.34.56.78:0):

	



tvtwm users: this demo tickles a fatal bug in tvtwm compiled for dec alphas.


note:
	(1) these applications were meant to run near the user.  if the delay
between your x server and the application is large, you'll experience delayed
responsive performance, meaning that you can still control priority, etc.,
but only slowly.
	(2) other students sometime run large simulations on our departmental
hosts, bringing them to their knees.  you'll know.







things to notice and try...





fractal explorer demo:



 first, after reading the directions for operating the program, notice
that you can zoom in on a fractal while it is still refining.  this ability
to proceed with only an incomplete result becomes more important as
variability in system response time increases.  today, such a feature is only
implemented for those tasks that are expected to take a long time, but as
system service time increases in variability this feature needs to be
implemented for more and more tasks.

 try zooming in on two fractal windows in rapid succession so that they
are simultaneously refining their images, then move the mouse over one of
them.  notice that the application concentrates its resources on the selected
fractal.  the other fractal may get some cpu attention when the primary is
blocked for i/o or thread synchronization.

 now try the same, but point the mouse outside both windows.  observe
that the two fractals improve in resolution at roughly the same rate,
roughly half as fast as before.

 to try the color enhancement feature, first zoom in on a part of the
fractal
	


	that has little variation in color, then quickly type 'c' to re-color
it.  this runs the entire image through a histogram equalization function
(it's slow).  notice that this function is run on the successive images
produced by the fractal generator.

 
to illustrate what is going on inside the application, do the following
in rapid succession: zoom on an area, set the toggle button to open a new
window when zooming, then type 'c'.  a new window will display the re-colored
version of the first window.



	


	this diagram illustrates the task graph that was generated by this
sequence of user events; the green tasks were added when you typed 'c'.  the
output from the fractal image generator is consumed both by a display task
for the first window and by a re-coloring task whose output goes to a second
display task for the other window.  a series of refined images passes through
this data-flow graph.

 when a portion of the task graph becomes disconnected from a useful
output (such as the display or an internal program variable), the runtime
system prunes it from the graph and garbage collects its associated storage.
this happens when you zoom in on a fractal that is still refining.  you can't
witness this at the user interface, except that the resource savings improve
the performance of the tasks that you care about.









photo album browser demo:

suppose you want to show a friend at lunch a particular photograph of your
baby, so you pull out your mobile computer and access your home photo album
via the wireless network.  given that downloading all your baby pictures
would take a long time, you want a photo album browser that downloads and
displays images incrementally, and that prioritizes bandwidth consumption
among the photos as you search for the picture.  imagine this scenario as you
use the browser- try to find the sunset photograph quickly.  keep in mind
that the internet provides higher bandwidth than a wireless network.  also,
the effect of prioritization becomes much more pronounced when the desired
priorities for the various network connections are communicated to the
wireless base station.  this has been implemented in an experimental setup,
but is not available for demo on the web.



 to observe the effect of priority, press return in the url window to
restart the downloads, then quickly open two pictures and move the mouse
over the later one.  observe that the selected picture gets refined faster
than the other; this is more obvious in later refinements when the resolution
is finer.   each refinement quadruples the number of pixels in the image.

 the application pre-fetches one picture off the edge of the strip.  to
observe this, restart the downloads, wait for a few resolution improvements
&amp; note which picture is rightmost on the strip, then scroll to the right
a few pictures.  notice the difference in resolution of the first picture to
the right vs. the others.






 
 



 
george h. forman, gforman@hpl.hp.com

home page


 


mail


 


finger


 


map


 


weather


 


cs dept.


 


uw (live picture)

 generated: wed oct  2 11:18:37 pdt 1996
	



george forman: dissertation research
george forman: dissertation research
george forman: dissertation research
george forman: dissertation research
george forman: dissertation research
george forman: dissertation research
george forman: dissertation research
george forman: dissertation research
george forman: dissertation research
george forman: dissertation research