cs 302 section 70 lecture notes - weeks 5




 lecture notes - week 5




   topic:
   formatted input and output. reading and writing files.

   text:
   chp. 5.1, 5.3, 5.5 - 5.7

   notes:
   

   

   
   formatted output
   
   
      so for we have been using unformatted output.
      
	print *, 'total = ', tot
      
      prints
      
	total =      12345
      
      with extraneous spaces in front of the number.
      the * specifies to use the default output format to print the items on the line.
      alternatively, replace the * with the label of a format statement which describes how to print the items.
      
	     print 15, 'total = ', tot
	15   format(1x, a, i5)
      
      prints
      
	total = 12345
      
      the format statement should immediately follow the print statement.
      the items in the format statement are called edit descriptors and describe the appearance of the line.
      each item in the print statement has a corresponding edit descriptor in the format statement specifying how to print it.
   

   edit descriptors
   
      the first item in the format statement describes the line spacing.  the most common is single spacing specified by 1x.
      
	15   format(1x, .... )
      
      the edit descriptor depends on the type of the value being printed.
      
         iw	- integer
         fw.d	- real
         aw	- character (i.e. strings)
         nx	- insert spaces between items
      
   


   integer - iw
   
      integers are printed right-justified in w columns.
      if the integer is shorter than w columns wide then it is printed with leading blanks (indicated by a #).
      
	     tot = 87
	     print 15, 'total=',tot,'cents'
	15   format(1x, a, i4, a)
      
prints
      
	total=##87cents
	      ^^^^
      
      negative integers are printed with a leading minus "-" sign.
      if the integer is longer than w columns wide (i.e. it doesn't fit in the width specified) then "*"s are printed instead.
      
	     tot = 12345
	     print 15, tot
	15   format(1x, i4)
      
      prints
      
	****
      
   

   real - fw.d
   
      reals are printed right-justified in w columns and rounded to d decimal places.
      
	     mass = -87.4395
	     print 15, mass
	15   format(1x, f8.2)
      
      prints
      
	##-87.44
	^^^^^^^^
      
      be sure to allow space for the sign (if negative) and decimal place, both of which take up an additional column each.
   

   character - aw
   
      character strings are printed right-justified in w columns.
      if the string is shorter than w columns then it is printed with leading blanks (indicated by a #).
      
	     character *11 name
	     name = 'christopher'

	     print 15, name
	15   format(1x, a15)
      
      prints
      
	####christopher
      
      if the string is longer than w columns then it is left-justified and the characters at the end are truncated.
      
	     print 15, name
	15   format(1x, a8)
      
      prints
      
	christop
      
      use a with no width specified to print the string in the same number of columns as its declared length.
      
	     print 15, name
	15   format(1x, a)	(same as a11)
      
   

   insert spaces - nx
   
      spaces/blanks can be inserted between any two items in the print statement.
      
	     print 15,'hello','there','world'
	15   format(1x, a, 2x, a, 3x, a)
      
      prints
      
	hello##there###world
	     ^^     ^^^
      
   

   print statement
   
      the edit specifiers can be inserted directly into the print statement without using a separate format statement and label.
      
	name = 'christopher'
	print '(1x, a15)', name
      
      the edit descriptors are enclosed in brackets and apostrophes.
   

   

   
   formatted input
   
   
      unformatted input:
      
         all the data on the line has to be read into variables.
         multiple values on the same line must be separated by spaces.
         strings must be entered enclosed in apostrophes.
      
      if the format of the input data does not match these requirements then formatted input must be used instead.
      example: multiple values separated by a hyphen.
      
	please enter today's date:
	10-08-95
      
      important - formatted input specifies which columns are read in and which are skipped.
      use a format statement with edit descriptors to specify the type and width of each value to read in.
      
	     read 15, month, day, year
	15   format(i2, 1x, i2, 1x, i2)
      
      note: no line spacing is specified for formatted input.
   

   edit descriptors
   
      same descriptors as formatted output.
      
         iw	- integer
         fw.d	- real
         aw	- character (i.e. strings)
         nx	- skip characters between values
      
   

   integer - iw
   
      read only the next w digits as an integer value.
      
	     read 15, num
	15   format(i3)
      
	user enters
      
	12345				(num = 123)
	^^^
      
	user enters
      
	-12345				(num = -12)
	^^^
      
      only w digits are read. any additional digits are ignored.
   

   real - fw.d
   
      read only the next w digits as an real value, where the last d digits are to the right of the decimal point.
      
	     read 15, price
	15   format(f6.2)
      
	user enters
      
	123.4567		(price = 123.45)
	^^^^^^
      
      warning: the decimal place is optional. if missing, the computer uses d to determine where it should have been. user enters
      
	1234567		(price = 1234.56 !)
	^^^^^^
      
      if the user does enter a decimal point then it over-rides the value of d. user enters
      
	12.34567		(price = 12.345)
	^^^^^^
      
      only d digits are read. any additional digits are ignored.
   

   character - aw
   
      read the next w letters as a character string and store them exactly as entered.
      
	     character *10 name
	     read 15, name
	15   format(a7)
      
	user enters
      
	kilroy1994junior	(name='kilroy1###')
	^^^^^^^
      
      if w is not specified then read in the same number of characters as the declared length of the variable.
      
	     read 15, name
	15   format(a)
      
	user enters
      
	kilroy1994junior	(name='kilroy1994')
	^^^^^^^^^^
      
      note: the string is not enclosed by apostrophes!
      
	read '(a)', name
      
	user enters
      
	kilroy			(name='kilroy#####')
      
   

   skip characters - nx
   
      skip over n characters in the input (e.g. a comma or hyphen).
      
	     character *10 name
	     read 15, name, year, fees
	15   format(a, 1x, i4, 3x, f6.2)
      
	user enters
      
	kilroy,joe,1997###1368.25
	^^^^^^^^^^^^^^^^^^^^^^^^

	name = 'kilroy,joe'
	year = 1997
	fees =  1368.2
      
   

   

   
   reading and writing files
   
   
      interactive processing reads data from the keyboard and prints the results to the screen.
      batch processing reads data directly from a file on disk and stores the results in another file on disk.
   

   open statement
   
      before you can read or write to a file it must be opened.
      the open statement specifies the name of the file, assigns it a unit nummber and specifies whether the file will be read from or written to.
      
	open(unit=1, file='mydata', status='old')
	open(unit=2, file='results', status='new')
      
      to read from a file status is 'old'.
      to write to a file status is 'new'.
      any unique number can be used for the unit number, except 5 and 6 which are reserved for the keyboard and screen.
   

   reading from files
   
      use a modified read statement to read from a file rather than the keyboard. note: no comma before the list of variables.
      
	read (unit-number, *) variables

	read (1, *) x, y, z
      
      must open the file before you can read from it.
      can also read formatted data from files.
      
	     read (1, 15) x, y, z
	15   format (3f6.2)
      
      if the line contains more data than is read in then the rest of the line is ignored. e.g.
      
	131.92-21.67  18.412345
	^^^^^^^^^^^^^^^^^^-----
      
      if the line contains less data than is read in the the next line is also read in. e.g.
      
	131.92-21.67
	^^^^^^^^^^^^
	18.412345
	^^^^^^---
      
   

   writing to files
   
      use the write statement to write to a file rather than the screen. note: no comma before list of items.
      
	write (unit-number, *) items

	write (2, *) 'the answer is', 42
      
      must open the file before you write to it.
      can also write formatted data to files.
      
	     write (2, 15) x, y, z
	15   format (3f6.2)
      
   

   batch processing
   
      can read/write several files at the same time. each file must have a unique unit number.
      
	open(unit=1, file='data1', status='old')
	open(unit=2, file='data2', status='old')
	open(unit=3, file='result', status='new')

	read (1,*) num1
	read (2,*) num2
	write (3, *) num1 + num2
      
      can still read from the keyboard and write to the screen at the same time.
      
	read (1,*) num1
	print *, 'please enter a number'
	read *, num2
	write (3, *) num1 + num2
      
      if you are reading from a file you don't need prompts (redundant).
   

   end-of-file (writing)
   
      when you have finished writing everything to an output file, write a special end-of-file marker at the end.
      
	end file (unit=3)
      
      must be the last thing written to the file.
   

   close statement
   
      when you have finished using either an input or an output file then close it.
      
	read (1, *) num1
	read (2, *) num2
	write (3, *) num1 + num2
	end file (unit=3)

	close (unit=1)
	close (unit=2)
	close (unit=3)
      
      usually these are last few statements in your program before the stop and end.
   

   end-of-file (reading)
   
      unlike the keyboard where the user can always keep typing, eventually all the data in a file will be read in.
      when there's no more data to be read, the computer will reach the end-of-file marker.  generally you want to do something special when this happens; for example, exit a loop.
      a modified read statement jumps to a continue statement when it reaches the end-of-file marker.
      

	      open(unit=1, file='data', status='old')
	      sum = 0

	c     add up all the numbers in the file
	      do while (.true.)
	         read (1, *, end=20) num
	         sum = sum + num
	      end do

	c     reached the end-of-file so print the sum
	 20   continue
	      print *, sum

	      close (unit=1)
	      stop
	      end
      
      normally the continue is the first statement after the end of a do/end do loop.
      similar to a goto statement to exit the loop.
      exits the loop when the read statement is re-executed and there's no more data to read; i.e. not immediately after the last number is read.
   








copyright &copy 1996 modified from gareth s. bestor (bestor@cs.wisc.edu).  last modified october 6, 1996.





cs 302 section 70 lecture notes - weeks 5
cs 302 section 70 lecture notes - weeks 5
cs 302 section 70 lecture notes - weeks 5
cs 302 section 70 lecture notes - weeks 5
cs 302 section 70 lecture notes - weeks 5
cs 302 section 70 lecture notes - weeks 5
cs 302 section 70 lecture notes - weeks 5
cs 302 section 70 lecture notes - weeks 5
cs 302 section 70 lecture notes - weeks 5
cs 302 section 70 lecture notes - weeks 5