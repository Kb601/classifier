a user interface for assisted resource discovery




a user interface for assisted resource discovery


this document continues recent discussions on the user interface for an
intelligent agent that assists in using the world wide web.

the problem

finding (and using) resources on a large, loosely-organized network can
be tedious and time-consuming.  intelligent agent software can assist a
user, but current user interfaces are either hard to use or do not fully
exploit the agent's capabilities.

my approach

i want to construct a testbed for
evaluating different user interfaces for assisted resource discovery.
the audience consists of casual or "naive" users of information networks
(i.e. i don't expect them to be able to program or to know predicate logic).

the ui research issues

what are the user interface research issues that i want to address?

assisted search

is providing a software assistant a natural and easy metaphor for
generating fruitful searches of large, loosely-organized networks?

rapid convergence
what user interface elements of an assisted search contribute to
a rapid convergence on a result?  how can the user work with the assistant
to initially specify, then modify the goals of the search?

specialized discovery
is it natural to classify types of resource discovery tasks?
if so, are there specialized user interface elements that are appropriate
for these classifications?

managing discovered resources
once many resources are discovered, how can they be retained and
managed by the user for future access?  what user interface metaphors
facilitate effective resource management?  such metaphors should integrate
with the assistant (e.g. an assistant should keep the resource location
current).
the domain

this work will use a software robot that can understand and navigate the
world wide web.  this is not the only domain.  it is a very well-known
domain in which easy, frutiful resource discovery is crucial.
in the world wide web domain, a  most common example of resource discovery
is search.

initial work plan

in general this approach applies to all types of resources and to information
network services other than discovery.  ultimately i would like to see
the most effective user interface techniques tightly integrated into a
global desktop that has built-in software assistants to accomplish
many chores we would normally want to delegate to human assistants.


as a start i will work on adding an assistant-based interface for resource
discovery on top of the mosaic world wide web browser.  i have considered
two scenarios:

scenario 1
a mosaic companion assistant
scenario 1 would provide a companion application to mosaic that allows a 
user to
search for web resources.  initially this would implement a keyword search
but it would be built with the idea of adding specialized searches later.
the search is carried out by a software agent (so i presume the ui
generates a goal that the agent tries to satisfy)
which returns a collection of web resources.  the user can then
tour the results by directing the companion to control mosaic
remotely.  while the search is in progress, the user can continue to work
with mosaic.

advantages

a companion application allows the user to remain in control and
continue working with mosaic.
code that permits remote control of mosaic has been built locally,
or is built into the latest release of mosaic.
future ui experimentation can be plugged in and is not limited by
html or mosaic forms.

disadvantages

this scenario requires access to code not installed on each client,
and not available to a viewer, so use of the project would be limited.
since it's not integrated into the viewer, the ui may be seen as a
"hack" rather than designing a new ui whose focus is the resource discovery
task.

scenario 2
an integrated, assisted version of mosaic
approach


this approach would provided the same search mechanisms as scenario 1.
the ui would be integrated into the web as another web page (like
webcrawler or yahoo).  it would also build a keyword-based query for
a software agent, but using mosaic forms.  the results would be returned in
a generated html document and the standard hypertext navigation would
be used to visit the results.

advantages

since this scenario uses the standard mosaic viewer, it would be
available to a much larger audience.
form entry and hypertext navigations are widely understood by users.
the user does not think of the agent software as an intermediary.

disadvantages

this scenario does not provide a fertile ui testbed.  specifically:

it would be more difficult to investigate uis for iterative dialogs
to rapidly constrain or focus a search.
it would be more difficult to experiment with metaphors for retaining
and organizing collections of known resources.
it would be harder to automate tours of resources.

while the agent is working, the user does not have control of the
viewer.
the user does not think of the agent software as an intermediary.




joseph m. sherman 
last modified: 
friday, march 17, 1995




a user interface for assisted resource discovery


a user interface for assisted resource discovery


a user interface for assisted resource discovery


a user interface for assisted resource discovery


a user interface for assisted resource discovery


a user interface for assisted resource discovery


a user interface for assisted resource discovery


a user interface for assisted resource discovery


a user interface for assisted resource discovery


a user interface for assisted resource discovery