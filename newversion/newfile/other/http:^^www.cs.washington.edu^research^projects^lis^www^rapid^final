the rapid project 



rapid: reconfigurable pipelined datapath
adventures in configurable computing

rapid is a coarse-grained fpga architecture that allows deeply
pipelined computational datapaths to be constructed dynamically from a
mix of alus, multipliers, and other functional units along with
registers and local memories.  the goal is to compile regular
computations like those found in dsp applications into both an
application-specific datapath and a program that provides control for
that datapath.  the datapath control signals are divided into static
and dynamic signals.  the static control signals determine the
underlying structure of the datapath that remains constant for a
particular application.  the dynamic control signals can change from
cycle to cycle and specify the variable part of the computation, for
example operations that change during the computation.


the current definition of rapid is biased strongly towards linear
pipelines constructed of linear arrays of functional units
communicating in mostly a nearest-neighbor fashion.  linear systolic
arrays, for example, map very nicely into rapid datapaths, which allows
the considerable amount of research on compiling to systolic arrays to
be applied to compiling computations to rapid.  rapid is not limited
to implementing systolic arrays, however.  for example, a pipeline can
be constructed which comprises different computations at different
stages and at different times.

the concept of rapid can be extended to 2-d arrays of functional
units.  however, dynamically configuring 2-d arrays is much more
difficult and the underlying communication structure is much more
costly.  since most 2-d computations can be computed efficiently using
a linear array, so a 2-d rapid may not be necessary.

rapid is aimed at tasks that are highly structured and repetitive and
whose control flow is very regular with little data dependency.
examples include most dsp applications and many scientific computing
tasks.  it is expected that a rapid array will be integrated closely
with a risc processor, possibly on the same chip, with risc
controlling the overall computational flow and farming out the
heavy-duty computation requiring brute force computing to rapid.

the computational bandwidth provided by a rapid array is extremely
high and scales with the size of the array.  the input and output data
bandwidth, however, is limited to the data memory bandwidth which does
not scale.  thus the amount of computation performed per i/o operation
bounds the amount of parallelism and thus the speedup an application
can exhibit when implemented using rapid.  the rapid architecture
assumes that at most three memory accesses are made per cycle which is
about the limit high-performance memory architectures can provide.




data path - 
 this comprises the core
of the architecture and contains functional units, registers, and
local memories, and the busses used to interconnect them into a
pipeline.  static ram cells provide the static control signals used to
configure the array into a pipelined datapath.  dynamic control
signals which govern the operation of functional units are provided by
the control path.

control path - the dynamic control
information (which we will call an instruction) that governs the
operation of the data path on a cycle by cycle basis is passed to the
pipelined datapath via the control path.  instructions are inserted
into the control path by a programmed controller according to the
computation being performed, and are shifted down the control path in
a pipelined manner.  the dynamic control signals used by each stage of
the pipelined datapath are computed from the instructions passing
through the control path.

controller - the instructions inserted into the control path
are generated by a controller which executes a control program
corresponding to the computation being executed by the pipelined
datapath.  the control information which must be sent to the datapath
includes the dynamically changing operations to be executed, local
memory reads and writes and i/o stream reads and writes.

i/o streams - all data enters and exits the datapath via i/o
streams.  these streams are connected to the ends of the datapath and
provide queues for input data required by the datapath and for output
data produced by the datapath.  the datapath explicitly reads and
writes the i/o streams.  each i/o stream generates the external memory
addresses required to read or write the data in the stream.

memory interface - the memory interface performs the actual
memory reads and writes on behalf of the i/o streams.  the memory
interface may reorder memory accesses or provide caches to maximize
the memory bandwidth.


rapid is programmed by first mapping the computation onto a static
datapath pipeline.  this pipeline may use dynamic control signals to
execute operations during specific clock cycles.  the static
programming bits are used to construct the underlying pipeline and
dynamically changing operations are scheduled and compiled into the
control program executing in the datapath controller.  the data sets
used and produced by the computation are compiled into i/o streams
including the information required to generate the addresses of the
data in external memory.
-->


rapidly working people
faculty 

 
     
     carl ebeling 



graduate students



 
     darren cronquist 
 
     paul franklin 

 
     jason secosky 



undergraduate students



 
     jeff weener 
 
     kent smith 



staff 

 
     chris fisher 
 
     larry mcmurchie 


 -->
list of papers

 carl ebeling, darren c. cronquist, paul franklin.
"rapid - reconfigurable
pipelined datapath", in the 6th international workshop on
field-programmable logic and applications, 1996.



 -->

rapid sponsors

 arpa under contract n00014-j-91-4041
 national science graduate fellowship (franklin)
 ibm graduate fellowship (cronquist)



 uw lis


department of computer science and engineering

university of washington


last updated
thu july 11 12:34:47 pdt 1996



 the rapid project
 the rapid project
 the rapid project
 the rapid project
 the rapid project
 the rapid project
 the rapid project
 the rapid project
 the rapid project
 the rapid project