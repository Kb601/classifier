cs418 lab 3




 
cs 418: laboratory 3  
 transformations and modeling

 introduction. 
this exercise introduces the processes of geometrically
transforming an object in size, orientation, and location, then combining
objects to make a complex scene.
there are several example programs given below to show you how to
combine objects and animate them. based on these examples, you will be asked
to construct a short animation.

procedure:

first you may want to download several example files. to do this, click on
each of the filenames shown below.  when the text window opens, use the
"save as" option to put the file in your own directory. name each file with
the same name as shown below. if you decide not to look at all of them, you
may load them in pairs of *.net and *.cfg.
the program polyhedra-unit.net reads a data file polyhedra-unit.dx. you will need
to change the path name in the import module in the program to reflect the
directory in which you copy polyhedra-unit.dx.
 the programs windmill.net and cubeflake.net also require the data file 
polyhedra-unit.dx.

  transform.net 
  transform.cfg 

  windmill.net 
  windmill.cfg 

  cubeflake.net 
  cubeflake.cfg 

  rose.net 
  rose.cfg 

  polyhedra-unit.net 
  polyhedra-unit.cfg 
  polyhedra-unit.dx 


the first program is an example which shows how to scale, rotate and
translate an object.  open the program transform.net and it's control panel
and execute it while changing the rotation, translation, and scaling
of the simple object (see image 1
). the program also allows you to select whether the
translate control transforms the object before the scaling and rotation or
after them.  note that as you rotate the object, that a positive angle of
rotation corresponds to counterclockwise rotation if you are looking down
the positive axis of rotation toward [0,0,0].  the object is defined to
have the base of the arrows at [0,0,0] so that the scale operation
magnifies the objects, but does not move the base.  likewise, the rotate
operation (which rotates around the origin) leaves the base at the origin
if translation is performed last.  investigate the effects of changing the
order of the rotate, translate, and scaling operations by using the
operation order control and by modifying the program module order.

 image 1


the second program, windmill.net,
 is an example of a hierarchically modelled, animated
object (see image 2)
. the object is a windmill constructed from a propellor and a tower.
the propellor, in turn, is make up of two blades, a hub and a shaft.  open
the sequencer and run the program.  the quadricsurface module gererates
spheres, cylinders, and other shapes.  the shape is set by an integer.  the
shape list may be found by double- clicking the quadricsurface module, then
clicking on the "description..."  button.  the import module reads the
vertex list of a cube from polyhedra-unit.dx.  edit the file to see what
else is there.  rotation of the whole tower is controlled by a compute
module with a conditional in it to delay rotation.

 image 2


the third example program, cubeflake.net,
 combines polyhedra to make an interesting object
(see image 3).
open the control panel and run the program using the sequencer.  note how
multiple copies of objects are positioned.
 
 image 3 


other lab 3 demonstration nets: polyhedra-unit.net (see image 4), 
rose.net (see image 5). 


 image 4 


 image 5 


  assignment:
using the three example programs as background, construct one of the
objects described below.  use the various modules in the "macros" category
which produce shapes, such as newquadricsurface.  also use the shapes defined
in the polyhedra-unit.dx file.  animate the resulting objects as specified.
the animation should be 20 to 100 frames in length. a small image window size
(perhaps 320x240) will speed execution.


construct  one  of:


 a helicopter with fuselage, tail, skids, main rotor and tail rotor.
the tail rotor
should rotate twice as fast as the main rotor. the helicopter should sit
on the ground
until the blades are spinning, then fly straight up.

 a propellor airplane on which the propellors rotate at the same rate.
the plane
should have wings, tail, engines, and a cockpit canopy. the plane should
sit on the
ground until the blades are spinning then roll forward and up.

 a flowering plant with stem, leaves, and flower. the plant 
should grow and bloom. the flower should be constructed from several
petals. there must be at least two leaves on the plant.

 a robot with a head, body, arm(s) and at least two wheels.  the robot
must roll forward, stop, grasp an object and move it.  the head must have
eyes (or cameras) which move together.
 a bird landing on a tree. the bird must have wings, head, eyes, beak and
feet. the wings must flap and the feet must move as the bird lands.




some examples from 1995.


some examples from 1996.


 be prepared to demo your animation during section for a maximum of 15
minutes. you will be graded on the correctness of the animation and the
readability of the program. you may want to 
 mpeg compress  your animation
for rapid playback, or if you wish to submit it to the course web pages.

you must document your code!  layout small groups of modules which fit on
one screen and connect them to other groups with transmitters.  you should
use transmitters/receivers, macros, and comments in the "notation" field of
each module so that you and the grader can understand the program.  control
panels, if any, should be well organized, labeled, and with the appropriate
numeric ranges.


the
 lab 3 grading guide 
will be filled out by a consultant during section to evaluate your work.




back to main page


go to lab 4

 

last modified, 1/23/96, b. land. 



 
copyright statement 
 


 cs418 lab 3
 cs418 lab 3
 cs418 lab 3
 cs418 lab 3
 cs418 lab 3
 cs418 lab 3
 cs418 lab 3
 cs418 lab 3
 cs418 lab 3
 cs418 lab 3