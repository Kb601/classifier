cs 537 - quiz #10






university of wisconsin-madison

computer sciences department




cs 537

spring 1996 
bart miller


quiz #10

wednesday, may 1



file systems and recovery
1. updating file system information on disk
when writing a new block to a file, three on-disk things need to be updated.
these are:


the new block in the file that contains the data to be written.

the disk block free list.

the inode (file descriptor).

in what order must these operations be done to be able to safely recover
from a system crash?



get the disk block from the free list.

write the data to the block.

update the inode.



2. recovering from a crash
when an operating system crashes, it often leaves the data
that it stores on the disk in an inconsistent state.
by inconsistent state, we mean that file system data structures do not
correctly describe what should be in the files, directories, descriptors, and
free lists.
this can happen because it takes several disk reads and writes to update a
file, its inodes (file descriptors), and the free list.
remember that multiple processes and users can be updating their files
in the same time interval.

when the operating system is rebooted,
it is necessary to validate that the file system and
its data structures are all right (or figure out how to fix them).



with an allocation scheme based on block groups and a free block bit-map
(such as that used in demos), is it possible to tell, after a crash, if
a block that is marked "free" in the bit-map should not be?
if so, how?  if not, why not?


if you first removed a block from the bitmap (as we did in the question 1),
then you know that if a block is marked "free", then it should really be
a free block.

if you want to double-check, just to make sure that your system was
behaving properly, you could the following recovery algorithm after
the system was rebooted:


create a new bit map (in memory) that indicates all blocks free (all ``1''s).

start at the root directory and traverse the file system tree.
at each descriptor, record in the new bit-map which disk blocks are allocated
for that descriptor.

compare the new bit-map to the one that is on disk.
this will show files that should be in bit-map but are not, and files that
are in the bit-map but should not be.

as you can see, from the last step above, we can tell which blocks are
really free and which are allocated to a file.




after a crash, suppose we know that a disk block appears both in the free
list/map and in a file.  is there some action we could safely take?
(i.e., we do not want to make matters any worse,
and would like to make them better).
if so, what?  if not, why not?


if a block occurs in both the free list and only one file,
then it is usually safe to
take it out of the free list and keep it in the file.
if a block somehow appeared in multiple files (i.e., pointed to by
multiple inodes), then you'd have to manually try to fix the problem.






last modified:
thu may  2 10:58:15 cdt 1996
by
bart



cs 537 - quiz #10
cs 537 - quiz #10
cs 537 - quiz #10
cs 537 - quiz #10
cs 537 - quiz #10
cs 537 - quiz #10
cs 537 - quiz #10
cs 537 - quiz #10
cs 537 - quiz #10
cs 537 - quiz #10