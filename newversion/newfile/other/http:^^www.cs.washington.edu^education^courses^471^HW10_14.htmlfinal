hw10_14.ascii.rtf

-- fulladder--
module fulladder( carryout, result, a, b, c);
input a, b, c;
output carryout, result;
reg carryout, result;

	always @(a or b or c)
	  {carryout, result} = a + b + c;
endmodule

-- mux2 --
module mux2( z, select, in0,in1);
input select, in0, in1;
output z;
reg z;

	always @(select or in0 or in1)
	   if (select == 1'b1)
		z = in1;
	else if (select == 1'b0)
		z = in0;
	else
		z = 1'bx;
endmodule

-- mux4 --
module mux4( z, select, in0, in1, in2, in3);
input [1:0] select;
input in0, in1, in2, in3;
output z;
reg z;

	always @(select or in0 or in1 or in2 or in3)
	   case (select)
		2'b00: z = in0;
		2'b01: z = in1;
		2'b10: z = in2;
		2'b11: z = in3;
		default: z = 1'bx;
	endcase
endmodule

-- alu1 --
module alu1( a, b, carryin, less, result, 
	carryout, operation, binvert);
input a, b, carryin, less;
output result, carryout;
input [1:0] operation;
input binvert;

wire t0, t1, t2;
wire bbar, bb;

and 	g0( t0, a, b);
or 	g1( t1, a, b);
not 	g2( bbar, b);
mux2 g3( bb, binvert, b, bbar);
fulladder g4( carryout, t2, a, bb, carryin);
mux4 g5( result, operation, t0, t1, t2, less);

endmodule

-- alu1msb --
module alu1msb( a, b, carryin, less, result,
			carryout, operation, binvert,
			set, overflow);
input a, b, carryin, less;
output result, carryout;
input [1:0] operation;
input binvert;
output set, overflow;
reg overflow, set;

wire t0, t1, t2;
wire bbar, bb;

and 	g0( t0, a, b);
or 	g1( t1, a, b);
not 	g2( bbar, b);
mux2 g3( bb, binvert, b, bbar);
fulladder g4( carryout, t2, a, bb, carryin);
mux4 g5( result, operation, t0, t1, t2, less);

always @(carryin or carryout or t2)
	begin
	overflow = carryin ^ carryout;
	set = overflow ^ t2;
end
endmodule

-- alu32 --
module alu32( a, b, r, overflow,
		op, bneg, allzero);
input [31:0] a, b;
output [31:0] r;
input bneg;
input [1:0] op;
output overflow, allzero;
reg allzero;

wire [32:1] c;
wire set;

alu1 alu_0( a[0], b[0], bneg, set, r[0], c[1], op, bneg);
alu1 alu_1( a[1], b[1], c[1], 1'b0, r[1], c[2], op, bneg);
alu1 alu_2( a[2], b[2], c[2], 1'b0, r[2], c[3], op, bneg);
alu1 alu_3( a[3], b[3], c[3], 1'b0, r[3], c[4], op, bneg);
alu1 alu_4( a[4], b[4], c[4], 1'b0, r[4], c[5], op, bneg);
alu1 alu_5( a[5], b[5], c[5], 1'b0, r[5], c[6], op, bneg);
alu1 alu_6( a[6], b[6], c[6], 1'b0, r[6], c[7], op, bneg);
alu1 alu_7( a[7], b[7], c[7], 1'b0, r[7], c[8], op, bneg);
alu1 alu_8( a[8], b[8], c[8], 1'b0, r[8], c[9], op, bneg);
alu1 alu_9( a[9], b[9], c[9], 1'b0, r[9], c[10], op, bneg);
alu1 alu_10( a[10], b[10], c[10], 1'b0, r[10], c[11], op, bneg);
alu1 alu_11( a[11], b[11], c[11], 1'b0, r[11], c[12], op, bneg);
alu1 alu_12( a[12], b[12], c[12], 1'b0, r[12], c[13], op, bneg);
alu1 alu_13( a[13], b[13], c[13], 1'b0, r[13], c[14], op, bneg);
alu1 alu_14( a[14], b[14], c[14], 1'b0, r[14], c[15], op, bneg);
alu1 alu_15( a[15], b[15], c[15], 1'b0, r[15], c[16], op, bneg);
alu1 alu_16( a[16], b[16], c[16], 1'b0, r[16], c[17], op, bneg);
alu1 alu_17( a[17], b[17], c[17], 1'b0, r[17], c[18], op, bneg);
alu1 alu_18( a[18], b[18], c[18], 1'b0, r[18], c[19], op, bneg);
alu1 alu_19( a[19], b[19], c[19], 1'b0, r[19], c[20], op, bneg);
alu1 alu_20( a[20], b[20], c[20], 1'b0, r[20], c[21], op, bneg);
alu1 alu_21( a[21], b[21], c[21], 1'b0, r[21], c[22], op, bneg);
alu1 alu_22( a[22], b[22], c[22], 1'b0, r[22], c[23], op, bneg);
alu1 alu_23( a[23], b[23], c[23], 1'b0, r[23], c[24], op, bneg);
alu1 alu_24( a[24], b[24], c[24], 1'b0, r[24], c[25], op, bneg);
alu1 alu_25( a[25], b[25], c[25], 1'b0, r[25], c[26], op, bneg);
alu1 alu_26( a[26], b[26], c[26], 1'b0, r[26], c[27], op, bneg);
alu1 alu_27( a[27], b[27], c[27], 1'b0, r[27], c[28], op, bneg);
alu1 alu_28( a[28], b[28], c[28], 1'b0, r[28], c[29], op, bneg);
alu1 alu_29( a[29], b[29], c[29], 1'b0, r[29], c[30], op, bneg);
alu1 alu_30( a[30], b[30], c[30], 1'b0, r[30], c[31], op, bneg);
alu1msb alu_31( a[31], b[31], c[31], 1'b0, r[31], c[32], op, bneg,
		set, overflow);

always @(r)
	allzero = (r == 32'b0);

endmodule

-- tester --
module tester;

reg [31:0] a, b;
reg [1:0] operation;
reg bnegate;
wire [31:0] result;
wire overflow, allzero;

alu32 alu( a, b, result, overflow, operation, bnegate, allzero);

initial begin

	a = 'h00000000; b = 'h80000001; bnegate = 1; operation = 2;
	$strobe( "a=%h b=%h r=%h bnegate=%h v=%h op=%h z=%h",
			a, b, result, bnegate, overflow, 
			operation, allzero);

#1
	a = 'h00000000; b = 'h80000000; bnegate = 1; operation = 2;
	$strobe( "a=%h b=%h r=%h bnegate=%h v=%h op=%h z=%h",
			a, b, result, bnegate, overflow, 
			operation, allzero);
#1
	a = 'h00000001; b = 'hffffffff; bnegate = 0; operation = 2;
	$strobe( "a=%h b=%h r=%h bnegate=%h v=%h op=%h z=%h",
			a, b, result, bnegate, overflow, 
			operation, allzero);
#1
	$finish;
end
endmodule

hw10_14.ascii.rtf
hw10_14.ascii.rtf
hw10_14.ascii.rtf
hw10_14.ascii.rtf
hw10_14.ascii.rtf
hw10_14.ascii.rtf
hw10_14.ascii.rtf
hw10_14.ascii.rtf
hw10_14.ascii.rtf
hw10_14.ascii.rtf