cs 110 section 2 lecture notes - week 1




 lecture notes - week 1




   topic:
   introduction to computers and programming.  how to use microsoft windows and microsoft fortran on the hewlett-packard vectra's

   text:
   chp. 1.1 - 1.5

   notes:
   

   

   
   introduction to fortran-77
   

   brief history
   
      one of the first high-level programming languages (circa 1957).
      forula translator.  good for engineering and scientific applications.
      fortran-77 (1977 revision) is the standard and most widespread version.  fortran-90 (1990 revision) has additional functionality but is not as widespread.
   

   why learn fortran instead of c++/pascal/basic/...
   
      easier to write complex formulas and equations.
      still widely used in engineering.
      lots of existing engineering program libraries are written in fortran.
      easy to learn, similar to basic.
   



   how to use fortran on the pc's
click  here 

   compiling steps
   
     source program (.for) in fortran sent to compiler
     compiler translates fortran into "machine language with a couple of holes left",spits out .obj file
     a program may be broken into lots of segments, so there may be other obj's around. at any rate, .objs must be linked together plus some other things needed to "fill in those holes" (don't worry about what the holes are). .obj files all read in, spits out .exe file (runnable machine language).
   
  
   inside the computer
   
       input: keyboard,mouse
       output: monitor,printer
       inside:
          
                     cpu: central processing unit. what does computations.
             memory: where the data is (the program itself and its data)
             removable storage. can take things off disk onto memory or back. must put things in memory in order to run it.
          

   

machine language,assembly,fortran

dark ages(1960): everything stored as 0's (no charge) and 1's (charge). 
machine code is very hard to read. if you saw code like 1101 0001 0011 0010 1010 1111 1110 ... you'd go nuts.
solution: assembly language. add %r1 %r2 %r3. every machine lang. statement corresponds to one assembly statement, and vice versa.
problem. takes a loooong time to write out. you also have to worry about lots of details. programmers noticed that many times there were sequences of steps that were repeated quite a lot, such as

load term %r1
load term2 %r2
add %r1 %r2 %r3
store %r3 sum

 instead, it'd be nice to just say sum = term1 + term2. this is a fortran statement which is  translated (compiled) into those assembly instructions you see above.








copyright &copy 1996 modified fromjeff lampert (tick@cs.wisc.edu).  last modified september 11, 1996














 cs 110 section 2 lecture person - week 1
 cs 110 section 2 lecture person - week 1
 cs 110 section 2 lecture person - week 1
 cs 110 section 2 lecture person - week 1
 cs 110 section 2 lecture person - week 1
 cs 110 section 2 lecture person - week 1
 cs 110 section 2 lecture person - week 1
 cs 110 section 2 lecture person - week 1
 cs 110 section 2 lecture person - week 1
 cs 110 section 2 lecture person - week 1