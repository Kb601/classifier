devise performance



performance

devise is designed to handle large amounts of data from the ground up.
the following discussion assumes that the reader is already familiar
with the model of visualization. devise
addresses performance as follows:


i/o
mapping
drawing gdata
user interface
program design


i/o

minimizing the amount of accesses to disk is the goal of improving i/o
performance. it is not practical to rely on the virtual memory of a
workstation because thrashing readily occurs when the amount of data
is large. devise addresses i/o performance as follows:


buffer manager: ranges (not pages) of tdata and
gdata are retained in memory buffers. a non-lru replacement
policy is used.
query processor: decides which ranges of gdata are accessed. it 
performs binary search for gdata when sorted on the x attribute.
it fetches those gdata in overlapping views only once. when the user is idle,
it converts tdata into gdata in the background. it can also
potentially incorporate prefetching and indexing.
mapping: reduces storage overhead by storing only those gdata
attributes that change at run time.


mapping

mapping performance is improved as follows:


compiled mapping: reduces time/space at run time. the time
is reduced through compilation. the space is reduced through
storing only those gdata attributes that change at run time.
caching: caching gdata in the buffer and on disk eliminates the need to
perform mapping.


drawing gdata

drawing performance is improved as follows:


gdata that overlap are drawn just once.
at low resolutions, gdata are drawn as pixels. this is cheaper than
drawing complex shapes.


user interface

the user interface is designed to minimize the user response time:


the layout mode (see visual query.)
increases response time by not drawing the gdata when the user
constructs a visual query.
coming up for air: the query processor checks user actions periodically,
possibly aborting existing queries to act upon new user commands.


program design

the implementation is structured for performance as follows:


query abort: the ability to abort query throughout the design
of the devise components allows the user interface to abandon
existing updates to act on new user commands.
batching: transferring gdata in batches instead of one
at a time reduces time spent in function calls.
minimizing number of objects: in an object oriented environment,
everything is instantiated as an object. this is not done in devise, which
must handle large numbers of records.  instantiating every 
input record as a shape object impedes performance. 





devise performance
devise performance
devise performance
devise performance
devise performance
devise performance
devise performance
devise performance
devise performance
devise performance