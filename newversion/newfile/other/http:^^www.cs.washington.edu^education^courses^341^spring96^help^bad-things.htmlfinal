bad programming




programming practices to avoid


executive summary: dave grove will do bad things 
to you if any of your turned-in homework has any of 
the following features




 unmarked global variables
 global variables must be clearly "declared" at the top of 
a file, and must have names that begin and end with asterisks.
also there must be a comment explaining why this variables 
should/must be global.


 mixing parameter passing styles
 lisp allows positional,  keyword, &rest, &optional, 
and various combinations of options for passing parameters to a function.  
you should use positional function parameters 
unless you want/need to sometimes omit a parameter, in which 
case use (all) keyword parameters.  do not mix parameter
passing conventions within a function.  do not use &rest
unless you have an extremely good reason.  do not use 
&optional at all.


 nested defuns
 lisp allows you to define one function inside another. for example,

(defun main-function (args) 
  (let ((local-variable (process-args args)))
    (defun helper-function (x)
      -- some function of local-variable --)
    -- do some more processing --))

this creates a global binding for helper-function
and therefore is a case of a global side effect that is not 
well documented.  never put a defun inside a defun.
the lambda macro allows you to create local, unnamed functions
"on the fly."


  "declaring before initializing" 
 those of us accustomed to programming in c or pascal are used to
the idea of declaring our variables at the beginning of a function,
then initializint them later on.   so for example we might write:



;;;  ugly ugly ugly ugly ugly

(defun count-symbols (nested-list)
  (let ((the-car nil)             ;;  "declarations" only
        (the-cdr nil)             ;; 
        (symbols-in-car nil)      ;;
        (symbols-in-cdr nil))     ;; 
    (cond
      ((null nested-list)  0)
      (t (setf symbols-in-car 0)
         (setf the-car (car nested-list))
         (if (symbolp the-car) (setf symbols-in-car 1))
         (if (listp the-car)   (setf symbols-in-car (count-symbols the-car)))
         (setf symbols-in-cdr  (count-symbols (cdr nested-list)))
         (+ symbols-in-car symbols-in-cdr)))))

this is really bad lisp style because there is no need to 
"pre-declare" then set these variables. 
here's a better way to write it:  we let the different clauses of the cond
separate the cases for us.  in many cases doing that carefully 
allows fewer conditionals and local variables.


(defun count-symbols (nested-list)
  (cond
   ((null nested-list)  0)
   (t (let ((the-car (car nested-list))
            (symbols-in-rest (count-symbols (cdr nested-list))))
        (cond
         ((symbolp the-car) (+ 1 symbols-in-rest))
         ((listp the-car)   (+ (count-symbols the-car) symbols-in-rest))
         (t symbols-in-rest))))))


here's another version that uses a conditional assignment to a variable.
it's open to debate whether this is good style or not.  it's the 
most purely "lisp-like" of the three, but i personally find it a little 
hard to read. 


(defun count-symbols (nested-list)
  (cond
   ((null nested-list)  0)
   (t (let* ((the-car (car nested-list))
             (symbols-in-car 
               (cond
                 ((symbolp the-car) 1)
                 ((listp the-car) (count-symbols the-car))
                 (t 0))))
        (+ symbols-in-car (count-symbols (cdr nested-list)))))))



  mixing side-effects and computation 
 functions should be written either to compute a result, or to
perform a side-effect (like i/o).  you should avoid writing functions
that both do substantial ammounts of computation to produce a result
and have interesting side-efftects.





cse341-webmaster@cs.washington.edu
(last update:
	
	
	04/16/96 at 01pm
)




 bad programming
 bad programming
 bad programming
 bad programming
 bad programming
 bad programming
 bad programming
 bad programming
 bad programming
 bad programming