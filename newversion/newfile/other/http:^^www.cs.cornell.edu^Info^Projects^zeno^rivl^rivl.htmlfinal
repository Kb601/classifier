a resolution independent video language

     acm multimedia 95 - electronic proceedings 
        november 5-9, 1995  san francisco, california



a resolution independent video language*

jonathan swartz

  department of computer science
  4130 upson hall
  cornell university
  ithaca, ny 14853-7501 us
  swartz@cs.cornell.edu

brian c. smith

  department of computer science
  4130 upson hall
  cornell university
  ithaca, ny 14853-7501 us
  bsmith@cs.cornell.edu
http://www.cs.cornell.edu/info/projects/zeno/rivl/rivl.html
* this work is supported by funding for the xerox design research
institute and the us air force, under contract f49620-94-1-0198



  
acm copyright notice   


table of contents

abstract


1.  introduction


2.  the rivl language


2. 1. image operations


2. 2. sequence operations


3.  the rivl interpreter


3. 1 implementation of image computing


3. 2 implementation of sequences


3. 3 memory management


4.  related and future work


5.  references



abstract
as common as video processing is, programmers still implement video programs as manipulations of arrays of pixels. this paper presents a language extension called rivl (pronounced &quot;rival&quot;) where video is a first class data type. programs in rivl use high level operators that are independent of video resolution and format, increasing a program's portability, simplifying code reuse, and reducing development time. this paper also describes a rivl interpreter and the strategies the interpreter uses to optimize rivl programs. these optimizations include classical programming language optimizations, such as common subexpression elimination and out of order execution, image and video specific optimizations, such as computing only those images that will affect the output, and an optimized memory manager.
1.  introduction
in order to support the development of multimedia applications, programming languages should include audio, video, and images as true data types just as characters, text, and numerical values are true data types in today's languages. the operators in a multimedia language should be format independent, so that video and images of different formats can be easily intermixed, like integers and floating point numbers in most modern programming languages. the operators in a multimedia language should be resolution independent, so that high or low resolution input data produces better or worse results, just like single and double precision floating point numbers produce more or less accurate results in numeric computations. platform independence and code reuse will be a useful side effect of multimedia programming languages, and just as optimizing and parallel compilers can take existing programs and make them run faster, so optimizing multimedia compilers will speed up multimedia programs.
rivl (pronounced &quot;rival&quot;) is a language extension and optimizing system designed with these goals in mind. rivl provides a video data type and video operators that are format and resolution independent. format independence means that mpeg[5] video can be freely intermixed with jpeg[7], postscript[9], and uncompressed images. resolution independence means that operations in rivl (e.g., &quot;cut the first five seconds of the video clip&quot;) are well defined whether the film resolution is 16 or 30 frames per second or the image size is 100x75 or 4000x3000. these features relieve the programmer of tedious, low level details and allow a runtime system to execute a rivl program quickly on low resolution data for crude output (e.g., for prototyping or debugging) and slowly on high resolution data for more refined output.
rivl's approach to video manipulation has significant advantages over current approaches:


rivl programs are easier to read, write, and maintain than their low-level counterparts.

rivl code is platform independent.

rivl expresses video and image editing operations in a format and resolution independent way.

rivl separates the description of video operations from their implementation, allowing the rivl runtime system to improve the execution efficiency of rivl programs.











we have implemented an interpreter for rivl as an extension to the tcl language [11], an approach that allows us to easily embed rivl in other applications. this paper describes the design and implementation of the rivl language, the rivl interpreter, and its optimizer. the rest of the paper is organized as follows. section 2 illustrates the rivl language through a series of examples. section 3 discusses the rivl interpreter and how it optimizes image and video operations. section 4 reviews related work, and concludes with current status and future research directions.

2.  the rivl language
this section illustrates rivl programs through a series of examples. since rivl is an extension of tcl, rivl programs have access to all the primitives of the tcl language. rivl extends tcl with two data types: images(1), which represent still images, and sequences, which represent video segments (a timestamped set of images).
table 1 lists some of the rivl primitives for manipulating images and sequences. the table is divided into five classes:


input/output. currently supported formats include pgm/ppm[8], jpeg[7], mpeg[5], and postscript[9]. 

geometric. the image operations in this class move and resize the image; the sequence operations speed up, slow down, and temporally shift the sequences.

assembly. this class provides &quot;cut and paste&quot; type operations on images and sequences.

conversion. this class provides functions to convert between images and sequences, and to map image operations over the frames of a sequence.

transforms. image transforms used in this paper.



sections 2.1 and 2.2 contain examples that clarify the use of image primitives and sequence primitives, respectively.

table 1: image and sequence primitives 
-----------------------------------------------------------------------------------------------
type          image         sequence     description                                             
              operations    operations                                                           

input/output  im_read       seq_read     read image/sequence from disk                           
              im_write      seq_write    write image/sequence to disk                            
geometric     im_trans      seq_shift    translate an image in space / shift a sequence in time  
              im_scale[c]   seq_scale    scale an image in space / scale a sequence in time      
              im_rotate[c]               rotate an image [c = around its center]                 
assembly      im_crop       seq_crop     crop the specified region to make a new image/sequence  
              im_concat     seq_concat   concatenate multiple images/sequences end to end        
              im_overlay    seq_overlay  overlay multiple images/sequences in place              
conversion    ims_to_seq    seq_to_ims   convert between a list of images and a sequence         
                            seq_map      apply a script to each image in the sequence            
transforms    im_fade                    fade the image by a specified percentage                
              im_resample                resample the image at a specified size                  
              im_blur                    apply a blur filter to the image                        
              im_mask                    make transparent all pixels below a certain intensity   
                                                                                                 
-----------------------------------------------------------------------------------------------

2. 1. image operations
consider the following rivl fragment:

  set image2 [im_scalec $image1 [expr 1 - $p]]
  set image3 [im_rotatec $image2 [expr 360 * $p]]

program 1:  &quot;whirlpool&quot; effect
 
image1 is a rivl image and p is a floating point value between 0 and 1. the first line calls im_scalec to shrink image1 about its center by a factor of 1-p and assigns the result to image1. the second line calls im_rotatec to rotate image1 about its center by 360*p and again stores the result in image1. figure 1 shows the effect of this fragment with several values of p.
the repeated use of set in this fragment is cumbersome. to remedy this problem, we borrowed an idiom from scheme: any operator with the character &quot;!&quot; appended destructively modifies its first argument. taking advantage of this notation, we can rewrite program 1 as:

  im_scalec! image1 [expr 1 - $p]]
  im_rotatec! image1 [expr 360 * $p]

notice that the destructive operation omits the &quot;$&quot; in front of its first argument, whereas the non-destructive form requires the &quot;$&quot;. this artifact is caused by the way tcl implements pass-by-reference, a point we discuss in a related paper [14].
more complex effects can be constructed using tcl constructs for looping, branching, procedure creation, and recursion. the rivl program in figure 2 creates a fractal (sierpinski's gasket) from an arbitrary image.
figure  1: output from program 1 for p = 0.1, 0.4, 0.7
figure  2: fractal program and output for n= 1,2,3



2. 2. sequence operations
a sequence, the rivl abstraction for video, can be thought of as a set of time-stamped images. like image commands, sequence commands can be composed to express new operations. for instance, a common video editing operation is assembly, when two sequences are connected and written. the following rivl fragment assembles the first 10 seconds of the sequence raiders.mpg and the sequence bobo.mpg, writing the result to out.mpg (all files are mpeg format):

  set raiders [seq_read raiders.mpg]
  set bobo [seq_read bobo.mpg]
  seq_crop! raiders 0.0 10.0
  seq_write [seq_concat $raiders $bobo] out.mpg

an important primitive in rivl is seq_map. seq_map applies image effects to sequences, executing a given script for each image of a sequence and combining the resulting images into a new sequence. seq_map is similar to map in scheme. for example, consider the command

  seq_map $clip {im_resample %1 100 75} 

seq_map evaluates the template command (im_resample %1 100 75) on each image in clip, substituting the current image wherever %1 appears in the template. the results are gathered and returned as a new sequence. thus, this command returns a new sequence containing 100x75 (&quot;thumbnail&quot;) versions of the images in clip.
sometimes, rather than applying the same operation on each image in a sequence, it is desirable to vary the operation over time. for example, consider the operation of fading a sequence to black. this effect can be achieved by calling im_fade on each image in the sequence with a parameter that decreases over time. in this case, seq_map must call a procedure with a parameter that indicates the time of the image being modified. to this end, seq_map performs the following additional substitutions:


%t:      substitute the time stamp of the current image, in seconds

%l:   substitute the length of the sequence in seconds

%p:  substitute the relative time of the current image: %t divided by %l


using this mechanism, fade-to-black can be expressed

  seq_map $clip {im_fade %1 [expr 1-%p]} 

when combined with sequence assembly operations, seq_map simplifies the expression of effects that are often used in transitions between two parts of a movie. for example, the procedure in figure 3 connects two sequences with a transition. the first parameter, transition, is a script to be passed to seq_map. moviea &amp; movieb are the two sequences to be joined, and duration is the time (in seconds) to apply the transition effect. thus, connectwithtransition {im_fade %1 [expr 1-%p]} $jack $jill 5 connects two sequences jack and jill with a five second fade.


  proc connectwithtransition {transition moviea movieb duration} {
    set lengtha [seq_length $moviea]

    set lengthb [seq_length $movieb]
    # untouched parts of first and second movie
    set begin [seq_crop $moviea 0.0 [expr $lengtha-$duration]]
    set end [seq_crop $movieb $duration $lengthb]
    # apply timed effect to end of first movie; overlay with
    # beginning of second movie
    set mid1 [seq_crop $moviea [expr $lengtha-$duration] $lengtha]
    set mid2 [seq_crop $movieb 0.0 $duration]
    set middle [seq_overlay [seq_map $mid1 $transition] $mid2]
  
    seq_concat $begin $middle $end
  }

figure  3: procedure to connect two sequences with an arbitrary transition

the rivl language extension thus provides a powerful notation for programming with video. rivl's high level semantic description of video operations also allows the interpreter to optimize the execution of rivl programs. the next section describes these optimizations.


3.  the rivl interpreter
this section discusses the implementation of the rivl interpreter. in the first two subsections we discuss the efficient implementation of image and sequence operations. in the third subsection we discuss memory allocation issues for video computing and describe rivl's custom memory management system. 
3. 1 implementation of image computing
there are two ways to optimize still image computing. first, we must make sure that individual image operations, such as scales, rotations, etc., are efficient. these issues have been addressed at length in the graphics literature, and good algorithms are readily available[3]. second, we must be intelligent about which operations we call, in what order, to achieve our final result.
a feature of rivl that allows us to exploit the second type of optimization is lazy evaluation, also known as demand-driven execution[10]. rivl only computes video data when it is needed for output or display. the result is that at computation time, rivl can plan a more intelligent computing strategy than if each command were executed immediately and independently. 
the rivl interpreter alternates between two modes of operation: graph-construction mode and graph-evaluation mode. in graph-construction mode, the interpreter evaluates rivl programs, recording and storing operations in a directed acyclic graph (dag) whose edges correspond to images and whose nodes correspond to primitive operations (e.g. scale or overlay). this process is typically very fast, since image operations are recorded but not executed. in effect, the dag represents a dynamic instruction trace of the rivl program's execution.
consider the following program, which overlays a scaled and rotated version of the image tiger.jpg onto the image flowers.jpg:

  set tiger [im_read tiger.jpg]
  im_scalec! tiger 0.8
  im_rotatec! tiger 288.0
  set flowers [im_read flowers.jpg]
  im_blur! flowers 5.0
  im_overlay $tiger $flowers
  im_write out.jpg

figure 4 shows the graph created by this program. both im_scalec and im_rotatec are implemented with a pair of translations surrounding an im_scale or im_rotate; the translations move the origin of the scale and rotate operations to the center of the image.
figure  4: sample image graph

a call to im_write triggers the graph-evaluation mode. in principle, the rivl interpreter traverses the graph from inputs to output, computing intermediate images until the output image is computed. but before computing the images, the interpreter perform several optimizations. two optimizations, graph restructuring and result-region calculation, are described below.
graph restructuring. the first optimization modifies the graph so its output is equivalent, but the computation is more efficient. such modifications include combining or swapping adjacent nodes. for example, figure 4 contains six adjacent affine transformations. rivl collapses these nodes into a single affine transform (figure 5a). this optimization improves both the computation speed and the quality of the final image by reducing the number of times the image is resampled.
result-region calculation. the second optimization, introduced by shantzis[10], is to compute only those regions of each intermediate image that affect the final result. in our example program, only a small portion of flowers is visible in the final result (figure 5b, on right). it is sufficient to read in and blur only this portion.
rivl calculates 3 regions for intermediate images (i.e. for every edge in the dag): the have region, the need region, and the result region. the have region at an edge is the region of pixels provided by the edge's left node(s). the need region at an edge is the region of pixels needed by the edge's right node(s). finally, the result region is the intersection of have and need. this intersection contains all the pixels that both have defined values and affect the final output image. only the pixels inside the result region need to be computed. figure 5b shows the regions computed for each intermediate image in our example graph. in particular, only a small region is calculated for each of the two lower images.
following these optimizations, the rivl interpreter computes the graph's result image, writes the image to disk, and returns to processing commands in graph-construction mode.
figure  5: (a) restructured image graph / (b) result regions


3. 2 implementation of sequences
our implementation of sequences borrows many ideas from our implementation of images, since many still-image optimizations prove especially beneficial for sequence computing.
we will use scrolling titles as a sample task to motivate this section. the following program adds scrolling credits to the last 40 seconds of a 240 second (4 minute) movie:

  set credits [ims_to_seq [im_mask [im_read credits.ps]]]
  seq_map! credits {im_trans %1 0.0 [expr -%p*8000]}
  seq_scale! credits 40.0
  seq_shift! credits [expr 200.0]
  set raiders [seq_read raiders.mpg]
  set outseq [seq_map &quot;$credits $raiders&quot; {im_overlay %1 %2}]
  seq_write $outseq out.mpg

program 2:  adding scrolling credits to the end of a movie
the titles are stored as a postscript program that generates a long image (640x8000). the im_mask function makes the titles' background transparent. the program converts the image to a one-second sequence (credits), scrolls credits upwards over time using seq_map, and scales and shifts credits to the desired time range (200-240 sec). the final seq_map overlays the titles onto the raiders movie, and the result is written to the file out.mpg.
like image commands, sequence commands are stored in a graph (called the sequence graph) until the sequence is computed (e.g. in response to a seq_write command). figure 6 shows the sequence graph for program 2, in which each node corresponds with one line of the program. the sequence graph is used to generate a set of image graphs that correspond to the sequence's individual frames.
figure  6: sequence graph for scrolling titles

suppose we want to compute the frame in the output sequence at time t. we perform two passes over the sequence graph, a backward pass and a forward pass. in the backward pass, we compute a timestamp for each edge. an edge's timestamp indicates the time value at that edge that influences output frame t. as we traverse the graph, each seq_scale and seq_shift node we encounter potentially alters the timestamp. the top of figure 7 shows the timestamps computed for t=220.0.
in the forward pass, we build an image graph corresponding to output frame t. as we traverse the sequence graph, each seq_read and seq_map node we encounter adds node(s) to the image graph. seq_read uses the timestamp to determine which frame to read; seq_map uses the timestamp when substituting values for %p and %t. the bottom of figure 7 shows the image graph computed for t = 220.0.
to compute the whole sequence, we repeat the image graph generation algorithm for all relevant output times t, at increment of 1/fps, where fps is the desired frame rate (in frames/sec) of the output sequence. for program 2, t ranges from 0.0 to 240.0. the resulting graphs are merged into a single compound image graph, as shown in figure 8.
figure  7: generating the image graph for t = 220.0

figure  8: image graph for entire sequence

the optimizations of section 3.1 are used to process the compound image graph to produce the output images, along with two additional optimizations: image subgraph reuse and direct-transfer detection.
image subgraph reuse. in figure 8 the subgraph containing im_read(credits.ps) and im_mask is replicated many times. it is more efficient to use a single subgraph with multiple output edges, as shown in figure 9. in this way the pixels of credit.ps are read and masked only once, and the various im_trans nodes share a common input. in general, rivl detects and merges redundant image subgraphs whenever possible, a form of common subexpression elimination[1].
direct-transfer detection. in our example, the first 200 seconds of raiders.mpg appear unchanged in the output. an obvious optimization is to avoid unnecessary decompression and compression by copying the compressed data directly to the output.
in formats such as mpeg, direct copying is not always possible on every frame, since mpeg sequences contain frames that are encoded as differences from other frames and cannot be decoded in isolation. however, mpeg streams are often divided into groups of pictures (gops), usually 15 to 30 frames long, that are independent from other gops. when reading and writing mpeg, rivl transfers groups of pictures directly whenever possible.
figure  9: image graph for entire sequence with shared subgraph


3. 3 memory management
in addition to optimizing image and sequence calculation, the rivl interpreter contains a custom memory management module to cache previously computed images and cope with very large images.
to understand the utility of caching images, consider the evaluation of the graph in figure 9. the output of the im_mask node is used many times; it is advantageous to cache this image. the rivl memory manager detects this case, freeing each image only when it is no longer needed in the current graph evaluation.
another issue is whether to store images after a graph evaluation ends. interactive applications of rivl often require repeated evaluations of a slightly changing graph. because the language restricts the way image graphs can be modified, the image associated with an edge remains accurate for the lifetime of the graph and can be cached. unfortunately, we have no special knowledge about which images to cache for future graph evaluations. in principle, the user can access any edge that was ever created. mistakenly discarding data is nonfatal, since we can always recompute the data, but such mistakes hurt performance.
to address this issue, rivl provides an im_priority command to allow applications to set the priority of an image. the memory manager discards low priority images and keeps high priority images in memory. for instance, a video editor built using rivl calls im_priority to raise the priority of displayed images, so that the results of special effects can be quickly viewed. we are looking into algorithms and heuristics for automatic priority adjustment. for example, images generated by expensive operations, and images that have been referenced repeatedly in the past, are candidates for high priority.
the initial implementation of rivl treated images as indivisible memory buffers. unfortunately, this representation performed poorly for large images. the rivl memory manager divides large images into non-overlapping pages of manageable size (figure 10a). pages are handled as independent entities by the memory manager, allowing an image to be cached in parts. in addition, large images with considerable blank space are efficiently represented by a set of non-contiguous pages (figure 10b).
figure  10: (a) dividing large image / (b) representing sparse image

to illustrate the utility of rivl's memory management policy, we consider the execution of the scrolling titles program (program 2) under a standard memory model in which the entire image is read into a virtual memory buffer for the duration of the program. assuming a 256 color image, this requires 5 mb of storage. in contrast, rivl accomplishes the task as follows:


the 640x8000 title region is divided into ten equally sized pages (given rivl's current maximum page size.)

rivl allocates, loads, and masks each page of data only when necessary. the results of each call to im_mask are cached for future requests.

rivl discards pages as soon as they are no longer needed.



the memory footprint is 1 mb, enough for rivl to hold two pages at once.
in summary, the rivl interpreter uses a variety of strategies to optimize execution of rivl programs. they are:


graph restructuring: combining or reordering nodes in the graph for speed

result-region calculation: computing only the parts of an image that affect the output

direct transfer detection: copying compressed data directly to the output when possible

image subgraph reuse: sharing common subexpressions in the image graph

image caching: caching images if they are needed later in the graph evaluation

image subdivision: dividing large images into manageable pieces




4.  related and future work
many commercial packages are available that provide software libraries of image manipulation functions. some use demand-driven execution to achieve similar optimizations as those mentioned in section 3. these include the pixar system described by shantzis[10], and silicon graphics' imagevisionlibrary[13]. holzmann's popi[4] allows image transformations to be specified with concise expressions at run-time, a mechanism that permits rapid prototyping of new image primitives. we are adapting this idea to rivl. none of the above mentioned systems provide language support for motion video.
some systems (e.g., data explorer[2] or khoros[12]) provide a graphical programming environment where image &quot;programs&quot; are expressed as flowcharts. although this way of expressing image operations is an improvement over pixel manipulation, the limitations of flowcharts for expressing complex programs are well-known. furthermore, the support for motion video operations in these systems is limited or non-existent.
matthews, gloor, and makedon's videoscheme [6] combines apple's quicktime movie player with a scheme-based video manipulation language. in videoscheme the user works with objects close to the underlying implementation of video data, such as pixel arrays and frames. this low-level access gives users considerable flexibility in creating new image operations. for example, algorithms for detecting &quot;cuts&quot; in video can be easily built out of pixel array primitives. in contrast, rivl's high level of abstraction allows it to exploit delayed computation for improved efficiency, and its resolution independence makes programs more portable.
rivl is implemented with 4000 lines of c code and 500 lines of tcl code. it has been ported to the sun os, hpux, and linux operating systems. rivl has been used to build a simple video editor. rivl and its editor can be found at http://www.cs.cornell.edu/info/projects/zeno/rivl/rivl.html.
the rivl language is still evolving. we are extending the core set of rivl primitives to support other types of video processing, such as image analysis, computer vision, and morphing. with the right primitives, we hope to build a rapid prototyping environment for exploring video content processing.
we are also building a parallel implementation of the rivl interpreter using workstation clusters. in this implementation, a rivl program will run quickly using low resolution images on a small cluster, slowly using high resolution images on a small cluster, and quickly using high resolution images on a large cluster. the interpreter will automatically parallelize the rivl program, using both coarse grained parallelism (one image / one process) and fine grained parallelism (one image / multiple processes).

5.  references

[1]  aho, sethi and ullman, compilers: principles, techniques, and tools, reading, mass. addison-wesley, 1988, pp. 592-595
[2]  data explorer software package. ibm.
[3]  j. d. foley, et. al., computer graphics: principles and practice, second edition, reading, mass. addison-wesley, 1990.
[4]  holzmann, gerald j. popi. at&amp;t bell laboratories. murray hill, nj.
[5]  d. le gall, mpeg: a video compression standard for multimedia applications, communications of the acm, april 1991, vol. 34, num.4, pp. 46-58.
[6]  matthews, james, peter gloor, and fillia makedon. &quot;videoscheme: a programmable video editing system for automation and media recognition.&quot; acm multimedia `93 proceedings, pp. 419-426.
[7]  w. b. pennebaker, jpeg still image data compression standard, van nos and reinhold, new york, 1992.
[8]  poskanzer, jef. the extended portable bitmap toolkit (pbmplus).
[9]  postscript. adobe systems incorporated, mountain view, ca.
[10]  shantzis, michael. &quot;a model for efficient and flexible image computing.&quot; siggraph `94 proceedings, pp. 147-154.
[11]  ousterhout, john k. tcl and the tk toolkit. addison-wesley, massachusetts, 1994.
[12]  rasure and kubica, &quot;the khoros application development environment&quot;, experimental environments for computer vision and image processing, editor h.i christensen and j.l crowley, world scientific 1994. 
[13]  silicon graphics inc. imagevision library. silicon graphics inc., mountain view, ca.
[14]  swartz, jonathan and smith, brian c. rivl: a resolution independent video language. submitted to the 1995 tcl/tk workshop, july 1995, toronto, ca. http://www.cs.cornell.edu/info/projects/multimedia/rivl/tcl-tk-95.ps


footnotes(1)the rivl image type is unrelated to the tcl/tk[11] canvas image type. 

 a resolution independent video language
 a resolution independent video language
 a resolution independent video language
 a resolution independent video language
 a resolution independent video language
 a resolution independent video language
 a resolution independent video language
 a resolution independent video language
 a resolution independent video language
 a resolution independent video language