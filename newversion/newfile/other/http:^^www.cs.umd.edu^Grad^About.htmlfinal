about the graduate program








admission to the graduate program is highly competitive.  there are
currently about 250 students enrolled, of which about 75 are part-time
students and 175 are full-time students.  graduates are heavily recruited
by industry and academic institutions.  many highly regarded technical
organizations in the area encourage their employees to take advantage of
the opportunities for graduate study at umcp.

these pages are intended to provide information about graduate study in
computer science at the university of maryland, college park.  for more
information about the campus, a copy of the graduate school catalog may be
obtained from the office of graduate studies and research.

if you need additional information or advice, feel free to
contact us.

you can request an application form for graduate school at umcp
by filling out this
form.  (nb: this is maintained by the academic data systems group on
campus)


additional information


	

	information on graduate research fellowships and graduate merit
fellowships,
	offered to 4 incoming graduate students annually.
umiacs graduate fellowships

faculty
	listings including research interests.

research areas
	that our faculty concentrate in.


ph.d. candidates,
	1996-1997 (includes selected publications).


	graduate course descriptions


	campus information for graduate studies including the
    
	graduate catalog for 1994-1996


information primarily for enrolled graduate students:

graduate program policy manual 
	(also available in 
	postscript format)
deadlines for graduate students
graduate announcements (cs only)
graduate student newsgroup (umcp only)
executive council of computer
 science grad students
finding fellowships

	
	notes on jeff hollingsworth's talk on "managing a job search"
	 (seminar done jan/18/95)





a quick introduction

with an annual research budget of several million dollars, the
department's research projects are at the cutting edge of computer science
innovation and discovery.  faculty  are working in nearly every area of
computer science, and there are seven active, well-established research groups
in:


artificial intelligence
computer systems
computer vision / geometric computing
database systems
programming languages / software engineering
scientific computing
theory of computing


a list of
faculty
and research areas
is available.

facilities

the computer science department and its research computing facilities
are located in the a. v. williams building.  completed in january, 1988,
this building was one of the first on campus to accommodate computing and
network connectivity.  each room contains wall plates providing connections
to ethernet, terminal, telephone and video cables.  gateways connect the
building's cables to the campus fiber optic network.  the department has
full internet access and is a major electronic mail and uucp server for the
washington, d.c. area.

the backbone of research activities is a unix-based network of close to 300
workstations, primarily sun sparcstations running sunos, decstations
running ultrix, and dec alphas running osf/1.  the network includes an
increasing number of macintoshes.  in addition, students use machines in
various research institutes, which have nearly two hundred additional
workstations, a 32 node cm-5 connection machine, a 16-node ibm sp-2, and athe "junkfood" lab
10-node quadprocessor dec alpha farm. the department operates two
unix-based open laboratories, which students may use both for research and
course work.  the department of electrical engineering also administers
unix-based laboratories that are available for use by computer science
students, and the computer science center operates open worksation labs across
the campus.

an annex to the campus program library is located in the a. v. williams
building and provides easy access to current journals and technical
reports.  the engineering and physical science library is nearby, and the
campus boasts many other important research libraries.

more research opportunities

several independent research units on the college park campus have
strong ties to the department of computer science.  the center for
automation research (cfar) includes the well-known university of maryland
computer vision laboratory.  the university of maryland institute for
advanced computer studies (umiacs) is the focus for computer-related
research throughout the university of maryland system.  the institute for
systems research (isr) is a center of excellence established by a national
science foundation engineering research center grant.  research support
from these research units supplements the computer science department's
resources and helps to attract some of the brightest and best young
computer scientists to college park.

the baltimore-washington area is a major center for
technological development, and collaborations with industrial and government
partners in the area has spurred additional research.
for example, the center for excellence in space data and
information sciences (cesdis) at
nasa has expanded opportunities for collaborative research.
also, the university of maryland's engineering research center (erc), which
fosters cooperative research projects between industry and the university,
has provided opportunities for collaborative research.

lecture series

the computer science department, cfar, and umiacs jointly sponsor the
computer science at college park distinguished lecture series.
contributions by corporate members of the computer science industrial
associates program (iap) make it possible to present distinguished computer
scientists who are working at the forefront of the field.  the lectures are
held weekly during the academic year and are open to the public.



applying for admission

eligibility

our admissions decisions are based on the policies outlined below.
however, each applicant is considered individually, and reasonable
exceptions can be made in particular cases.

to be eligible for consideration for admission to our graduate program,
your background should include much of the material covered in the
following courses (numbers correspond to umcp course listings):


cmsc 311:	computer organization
cmsc 330:	organization of programming languages
cmsc 420:	data structures
cmsc 451:	design and analysis of computer algorithms
math 140:	calculus i
math 141:	calculus ii
math 240:	linear algebra


you must take both general and advanced graduate record examinations
(gres).  your quantitative gre score should be at least 700, and you should
have at least a b+ average in your undergraduate course work.

the admissions process is competitive, and satisfying the minimum
requirements will not guarantee you admission to the program.  we admit
about one out of every ten applicants, and the average
quantitative gre score for those who have entered in recent years has been
much higher than the minimum required.

the application deadline for fall semester admission is january 15.
your application must be received by the graduate school on or before that
date or it will not be processed.  we urge foreign students to submit
their applications early, because it takes longer to process them.  for
your gre scores to reach us in time, you should take the gre examinations
no later than december.

the spring semester application deadline is october 15, but  spring
semester admission is available only if you are already a student at the
university of maryland, college park.

if we admit you to the graduate program starting in a given semester, we cannot defer your starting date to a subsequent semester.  if you do not enter our program in the semester you are admitted, we will withdraw our offer of admission, and you will have to apply again.

application procedures

please read the instructions very carefully.  you must submit the following materials:

a completed application form.  forms are available from the graduate school and also from the computer science graduate office.
2 copies of transcripts for all previous academic study.
gre and advanced gre test scores.  the scores must be less than two years old.  the gre computer science advanced test is preferred but a related subject area is sometimes accepted.
recommendation letters from three individuals - preferably faculty members - who can judge your academic qualifications and research potential.  letters from supervisors in non-academic settings usually are not very helpful.
a statement of goals and research interests.
form for merit based financial aid if you are requesting aid.
an english proficiency test report (i.e., a toefl score) if you are a foreign applicant.
a check or money order for $50.00.  without this fee, the graduate school will not process your application.  we cannot waive this fee under any circumstances.


some of the above materials must be sent to the graduate school and some to the department of computer science (see below).

all applicants must send the white copy of the two-page application for graduate admission (see application booklet), as well as:

one copy of transcripts, and 
the application fee

to the office of graduate admissions.

international applicants should also submit a certification of finances form to the office of graduate admissions.

send the above materials to the:

    office of graduate admissions
    lee building
    university of maryland
    college park, md  20742

    telephone: (301) 405-4198


all applicants must send the yellow copy of the application for graduate admission, as well as:

one copy of transcript(s)
statement of goals and research interests, and
if asking for aid, a request for merit based financial aid
to the department of computer science.


it is best to have each reference submit a recommendation form (see application booklet) directly to the department.

send above materials to:

    computer science graduate admissions
    computer science department
    a. v. williams building
    university of maryland
    college park, md  20742

    telephone: (301) 405-2664
    e-mail: csgradof@cs.umd.edu
    (the e-mail address is for inquiries, not for application submission.)




financial aid

the application form for admission to graduate study includes a place to
specify whether you want financial aid or not.  most financial aid consists
of research assistantships, teaching  assistantships, or fellowships.

assistantships

approximately 48 teaching assistantships are available.  first-year
teaching assistants normally conduct laboratory sections of introductory
computer science courses, and second-year students usually help in
upper-level courses, mostly as graders.  teaching assistantships usually
cover only the academic year, but a few assistantships are available during
the summer as well.

approximately 130 students are supported by graduate research
assistantships on research grants and contracts.  this usually allows work
which leads to the student's thesis or dissertation topic.  most faculty
members currently have research grants, and the department's research
budget is stable.
brett milash, outstanding t.a. in the cmps college for 1995-96, holding office hours
current stipends range from $9,900 to $13,437, depending upon a graduate
assistant's educational background and experience and whether the stipend
is for ten or twelve months.  in addition, assistantships cover tuition for
up to 10 credits per semester and provide health insurance coverage under the
university benefits plan.

fellowships

in addition to assistantships, fellowships are available for students
who are particularly talented or who satisfy special qualifications.
unlike assistantships, fellowships usually do not require the student to
perform any particular duties.  the monetary award varies depending on the
fellowship but is generally similar to the amount of money provided by an
assistantship.  the department may supplement fellowships by offering the
student one-half of an assistantship in addition to the fellowship.

within the university of maryland, fellowships are available from
umiacs, isr, and the graduate school.  to apply for these fellowships,
indicate that you need financial aid when you fill out the application for
admission and complete the merit based financial aid form.  the department
will nominate the best-qualified applicants.  instructions on how to apply
for the isr fellowships are available separately.

a number of fellowships from outside of the university of maryland are
also available.  for example, several of our students have had national science
foundation graduate fellowships, fulbright fellowships, or other
fellowships.  to apply for such fellowships, you should contact the agency
which administers them, check with the financial aid office in your current
university, or contact the fellowship office at the university of
maryland.



degree requirements

below is a summary of the graduate degree requirements.  details are available on request from the computer science department graduate office.  for full-time students starting with a b.s. degree, it usually takes 1-1/2 to 2 years to complete the m.s. degree and 5 years to complete the ph.d. degree.

master of science

the department offers both thesis and non-thesis options for the master of science (m.s.) degree.  the following requirements apply to all m.s. students:


coursework. students must complete at least 30 credit hours with an average of b or better.  all courses must be at the 400 level or higher, with at least 18 credit hours at the 600-800 level.  at least 21 credit hours must be cmsc courses.
breadth. the coursework must include regular 600 or 700-level courses from four of the department's seven research groups.
transfers. no more than six credit hours may be transferred from another university or another program at umcp.
time limit. all degree requirements must be completed within five years.marsha chechik (ph.d., 1996) in her office


additional requirements for the m.s. with thesis are as follows:  coursework must include six hours of cmsc 799 (master's thesis research), a thesis must be prepared that presents an independent accomplishment in a research, development, or application area of computer science, and there will be a final oral examination on the thesis research.

additional requirements for the m.s. without thesis are as follows:  written m.s. comprehensive examinations must be taken in each of the four areas used to satisfy the breadth requirement, and a scholarly paper, which includes an abstract and references to the relevant literature, must be prepared.

doctor of philosophy
requirements for the ph.d. degree include the following:


students must complete a 10-course qualifying sequence covering five out of the department's seven research areas (at least one course in each area must be at the 600-800 level). 
full-time students who have completed the qualifying sequence must meet graduate school requirements with respect to the number of credits they take each semester.  with their advisors' consent, they may choose to register for regular courses, independent study, or dissertation research credits.  an overall average of b or better must be maintained.
students must pass an oral ph.d. preliminary examination on a research proposal and prepared readings, as well as demonstrate competence in a foreign language. students must satisfy these requirements within five years after entering the program and complete the degree within four years after satisfying these requirements.
students must prepare a dissertation representing an original contribution to the field of computer science and pass a final oral examination on the dissertation research.  at least twelve hours of cmsc 899 (dissertation research) must be completed.




profiles of faculty research

research in our department covers almost all computer science fields.
the descriptions here are just a sample of research activities.


christos faloutsos

searching by content in multimedia databases examines fast methods
for approximate matching.  typical queries are as follows:  "in a
collection of product photographs, find products that look like tennis
shoes;" "in a collection of medical x-rays, find ones that look like the x-
ray of the current patient and list the corresponding diagnoses."  the
main idea is to extract n features from objects of interest (typically, with
the help of a domain expert), thus mapping each object into a point in
n-dimensional feature space.  subsequently, we can use state-of-the-art
database technologies (like 'r-trees') to store and retrieve these n-
dimensional points.  the philosophy is to provide a 'quick-and-dirty'
filter to eliminate the vast majority of irrelevant objects.  some false
alarms are acceptable, because they can be easily discarded by an
elaborate test or even by the user.  we already have sets of features for
2-d color images, 2-d shapes, and 1-d time series.  we are
experimenting with modern signal processing techniques, such as the
discrete wavelet transform for sound and images with mathematical
morphology for shapes and with the discrete cosine transform for
stock-price time series.  the method is generic and can be applied for
any collection of multimedia objects, as long as there are some good
feature extraction functions.  potential applications include:  1) medical
databases:  for diagnostic, research and teaching purposes, patient
records can be supplemented with electrocardiograms, x-ray images,
mri scans, etc.  2) 'edu-tainment':  students, researchers, and video-on-
demand customers can search databases of video clips, art images, etc.
3) scientific databases:  collections of nasa photographs, of
meteorological/geological maps, etc. can be used to aid in forecasting
weather, etc.  4)  electronic commerce:  users want to search electronic
catalogues with product photographs, in addition to other attributes
(price, maker, availability, etc).



pete keleher



in spring 1995, dr. keleher won an nsf career award, which will
fund research on high-performance synchronization in distributed
systems.  software distributed shared memory (dsm) systems provide
the abstraction of shared memory to networks of workstations and
distributed memory machines such as the paragon, cm-5, or sp-2.
unfortunately, the latencies for global operations in either
environment are several orders of magnitude more expensive than on
tightly-coupled multiprocessors.  the result is that current dsms
perform well for only a restricted class of applications.   sparks, a
protocol construction library that will allow improved performance of
dsm systems to within a few percent of tightly-coupled
multiprocessors, is currently being designed.  sparks' abstractions will
allow clean and systematic explorations of the design space of high-
level synchronization operations, rather than proposing and
implementing new operations in an ad hoc fashion.  sparks' basic
abstraction is the coherence "history," an object that summarizes past
coherence actions to shared segments.  the emphasis is more on
creating and investigating the abstractions that make a broad variety of
optimizations possible, rather than on the individual optimizations
themselves.  however, the performance gains allowed by the
synchronization types created via the sparks library will be thoroughly
quantified.



chau-wen tseng




dr. chau-wen tseng won an nsf career award in spring 1996,
which will allow him to pursue research in the area of efficient
machine-independent programming of high-performance multipro-
cessors.  parallel computing can provide the next great leap in the
computation power scientists and engineers need to solve many
important problems.  multiprocessor workstations are becoming
common and already provide a valuable resource for scientists in areas
such as physics, biology, and chemistry.  experience has shown that
simply finding parallelism is not always sufficient for obtaining good
performance from today's multiprocessors.  the goal of this project is
to develop advanced compiler analysis of data and computation
decompositions, thread placement, communication, synchronization,
and memory system effects needed in order to take advantage of
performance-critical elements in modern parallel architectures.
locality and interprocessor communication are the key performance
issues for multiprocessors.  to achieve high performance, the compiler
will apply communication analysis to determine sources of commu-
nication and guide optimizations for locality and communication.  the
compiler follows two basic guidelines.  first, it uses compilation
techniques for message-passing machines to retain most of the benefits
of explicit messages.  second, it exploits architectural and operating
system support available in shared-memory multiprocessors to im-
prove flexibility and performance.  a novel characteristic of the
compiler will be its ability to take advantage of the multiple coherence
protocols and hybrid message-passing support found in software
distributed-shared-memory (dsm) systems and flexible-shared-
memory (fsm) machines.



rich gerber



the timeware group is currently carrying out projects in the areas of
real-time software development, automated verification and digital
video systems.  the real-time software project is called "end-to-end
design;" its objective is to automatically map high-level, end-to-end
timing requirements into a fully realized, multi-streamed
implementation.  real-time designs are entered in terms of task graphs
possessing end-to-end requirements (i.e., delay, jitter, etc.); and
intermediate data rates and buffer sizes are then maintained
parametrically, in terms of equations based on the high-level design.
once the hardware-specific details are known, the application is
integrated, and the intermediate parameters are automatically
calibrated to achieve the end-to-end requirements.  the payoff is that
software designers can have the buffer sizes and intermediate data rates
assigned for them -- thereby minimizing the degree of low-level tuning
required.  the verification project consists of automatically checking
large specifications for subtle safety and liveness errors by compiling
individual tasks into simple state-transition models and
compositionally checking the entire program for nonconformance to
its specification. thus the verification is done in an iterative, piece-by-
piece manner, in that local analysis is first performed on the individual
tasks, and as tasks are composed, more analysis is carried out.  this
allows progressive deletion of states that are known to disprove the
specification, so that the generated state-space is kept to a minimum.
work on media systems includes applying static and dynamic tuning
solutions to help master and then play back stored digital video.  static
tuning takes place during the production phase; it is the process of
adjusting the video's intrinsic quality before it is exported.  the group
has studied results of many different static tuning alternatives by
altering key parameters and then charting their effects at playback.
dynamic tuning occurs during playback itself; the idea is to process a
video stream as smoothly and deterministically as possible.  os-level
software built by the group supports this; it periodically estimates the
playback requirements of a particular video, and then allocates buffers,
prefetch window sizes, io bandwidth, and cpu utilization so that the
computer can best meet the video's requirements.  this technique
significantly outperformed the movie-playing procedures supplied by
apple's quicktime api.



hanan samet



the representation of spatial data is an important issue in computer
graphics, computer vision, geographic information systems (gis), and
image processing.  once the representation has been chosen, users
must be given the ability to access it, and most importantly, perform
operations on it.  the utility of this data is maximized if it can be
integrated into a database management system.  this is a difficult
problem as most conventional systems in use today are mainly
designed to deal with alphanumeric data.  our approach to solving this
problem is based on the observation that the problem is really one of
sorting. the difference from other approaches is the realization that the
geometric data must be sorted on the basis of its extent (i.e., the fact that
it occupies space) and with respect to the space that it occupies.  this is
instead of parametrizing the spatial data and treating it as points in a
higher dimensional space which is what is done by many researchers.
representations that take the extent of the data into account enable us
to perform proximity queries efficiently. we are working on the
integration of non-point representations of spatial and image data as
well as nonspatial data into a conventional database management
system.  this research is backed up by the quilt gis which is a
working geographic information system and the sand system for
integrating spatial and nonspatial data.  a principal goal is to be able to
extend this system to handle arbitrary spatial indices rather than just
arbitrary spatial data types.  another goal is the development of a query
optimizer which takes into account characteristics of the spatial data
and chooses an efficient execution plan for the queries.  one of the
main results of this research has been the development of a browser
that enables posing queries that combine spatial and nonspatial data.
most noteworthy is the user interface which enables spatial queries to
be specified graphically instead of requiring the use of sql.  work is
also being conducted in image databases to deal with symbolic image
and the development of data-parallel representations and algorithms
for spatial problems.



satish tripathi



mobile/wireless networking:  mobile computers equipped with wireless
communication devices frequently change point of attachment to the
network.  providing continuous networking services to mobile hosts is a
challenging task.  we are developing communication protocols to provide
location independent networking services to such mobile hosts. this work
primarily involves designing mac protocols for wireless channels,
developing packet routing schemes for mobile hosts and writing applications
for mobile clients.  multimedia networking:  multimedia applications,
such as video-on-demand, video conferencing, etc., generate hundreds of megabits
of time sensitive data, posing serious problems to the current networking
infrastructure. we are developing protocols for real-time transport of
video and audio data over high-speed atm networks. the work involves:  1)
design and implementation of protocols at all layers of the protocol stack
from network interface drivers to transport protocols, and 2) developing
multimedia applications such as multimedia conferencing, distributed
learning, etc.  testbed:  the networking laboratory is equipped with
state of the art equipment. at present the testbed consists of thinkpads 750c,
three rs/6000 power servers and several ibm pcs.  network support includes
1mb/sec infrared wireless lan, 100mb/sec high-speed atm lan and ethernet.
the testbed is also equipped with specialized hardware for video/audio
capture, compression and playback.



recent seminars and courses of interest

distributed and concurrent systems
instructor:  pete keleher

this course is intended to be a general systems survey course.
however, the central thread is high-performance distributed systems. what
hardware support do such systems need, should it all be in hardware? the
primary running examples that are used are distributed shared memory systems,
(mostly) software systems that present the abstraction of shared
memory to a collection of workstations connected by general-purpose
interconnect.  such systems are becoming commonplace in the
research community, but have yet to achieve the kind of performance
and sophistication that causes the marketplace to listen.
first communication services and abstractions provided by
current operating systems are considered.  what are the important
elements?  what factors are no longer as important as when unix was
designed nearly 25 years ago? do the demands of distributed
applications fit in with the concept of general-purpose machines?
then papers describing high-performance memory models and
several examples of software dsms are read. primary emphasis is on
the different approaches taken by different projects, and where we
think they will go in the future.
then several parallel tools are discussed, emphasizing the
compiler world's mistaken belief that they're going to put all of us out
of a job.
at the end of the semester, there is a rapid survey of the most
interesting hardware projects currently going on in both industry and
academia.

architecture of object-oriented database systems
instructor:  michael franklin

recent years have seen a dramatic increase in research and development
activity in the area of object-oriented database management systems
(oodbms).  there are now a number of commercial offerings in this area, and
these systems are beginning to gain real acceptance for certain classes of
commercial applications (e.g., cad/cam and case).  this emerging generation
of database management systems is being deployed primarily in distributed,
workstation/server-based environments.  the combination of distribution and
object-orientation gives rise to significant challenges and performance
opportunities in many areas, including:  distribution of function,
replication and caching, fault tolerance, concurrency control, clustering,
query processing, persistence, and programming language integration.  this
seminar began with a survey of some of the basic issues in distributed
databases and object-oriented databases.   the bulk of the seminar then
focused on the investigation of the state-of-the-art with respect to the
challenges listed above. finally, some possible future directions, such as
the merging of object and relational technologies and the impact of mobile
computing, were discussed.

topics covered:

overview of object-oriented database systems:  model wars - manifestos, evolution vs. revolution, etc.
architectural issues:  distribution of function;  cache consistency and concurrency control;  crash recovery;  client-server vs. peer-to-peer; alternative transaction semantics
object management:  object representation (e.g., pointer swizzling);  memory-mapped persistent architectures;  indexing; clustering; distributed garbage collection
query processing;  performance and benchmarks;  existing systems
future issues:  mobility; object-relational systems; utilizing idle resources; dealing with huge databases


readings:  recent papers from sigmod and vldb proceedings, etc.;some survey and background articles.


computer graphics
instructor: dave mount

this course provided an introduction to the principles of computer
graphics, that is, the creation and manipulation of computer generated
images.  the course covered a wide array of topics from the lowest level
issues of rasterization (how to draw lines and circles one pixel at a time)
up to shading and hidden surface removal.  emphasis was placed on the
mathematics, data structures, and algorithms needed to perform these
tasks.

text:  computer graphics: principles and practice, by j. d. foley, a. van dam, s. k. feiner, and j. f. hughes.

prerequisites:  basic knowledge of linear algebra, programming, and data structures.  knowledge of c programming language.

course work:  course work consisted of a combination of written homework assignments and a number of programming assignments.  there  were two exams: a midterm and a comprehensive final.  programming assignments were carried out on the graphics workstations supporting the x window system.


introduction:  overview of graphics systems and concepts, graphics devices, x-windows programming.
output primitives:  line and circle drawing, antialiasing, polygon filling, region filling, text.
windowing:  windows and viewports, line clipping, polygon clipping.
projective geometry and geometric utilities: review of linear algebra, projective geometry, homogeneous coordinates, affine transformations.
3-d transformations and perspective:  scaling, rotation, translation, perspective transformations, 3-d clipping.
surface modeling:  parametric equations, bezier and b-spline curves and surfaces, fractals.
hidden line and hidden surface removal:  back-face removal, depth-buffer method, scan-line algorithm, depth-sorting algorithm, floating horizon algorithm, warnock's algorithm.
realism:  shading models, ray-tracing, texture mapping, shadowing




research unit liaisons

the college park campus is organized into 13 colleges and professional
schools.  the department of computer science is in the college of computer,
mathematical and physical sciences (cmps).  both cmps and the college of
engineering are well-regarded across the u.s.  within these two colleges
are several premier research units that offer computer science faculty and
students opportunities for collaborative research projects and access to
highly specialized research facilities.



	institute for advanced computer studies (umiacs)

the university of maryland institute for advanced computer studies was
established in 1985 by the state of maryland.  its goals are to broaden the
overall base of support for computing research throughout the university
and to focus on interdisciplinary topics in computing.  umiacs supports
faculty from many disciplines as diverse as computer science and
mathematics to philosophy and linguistics.  it attracts visitors of
international stature.  the institute has acquired significant research
equipment for the campus, most notably, the connection machine, a massively
parallel computer containing 16,000 individual processors that act together
to solve computationally intensive problems.  umiacs also offers workshops
on research areas of interest to the computer science community.  professor
joseph ja'ja' is the director of umiacs.



	center for automation research (cfar)

established in 1983, the center for automation research is dedicated to
research on advanced automation in business and industry.  the center's
computer vision laboratory is one of the oldest and largest research groups
of its kind and is considered one of the three best vision groups in the
world.  cfar also sponsors the human/computer interaction laboratory,
which is housed within the computer science department.  a number of
computer science department faculty and graduate students are members of
cfar and contribute to the close ties between the two units.  professor
azriel rosenfeld is the director of cfar.


center for excellence in space data and information sciences (cesdis)

the center for excellence in space data and information sciences was
established in the fall of 1988 with funds from the national aeronautics
and space administration (nasa) and the universities space research
association (usra).  its purpose is to sponsor research in areas of
computing and information science that will improve the acquisition,
analysis and utilization of data from space sensor systems.  cesdis is
located at nearby goddard space flight center, and computer science
faculty and students from umcp, as well as from a number of other
universities throughout the country, are participating in its research
programs.  dr yelena yesha is director of cesdis.



	institute for systems research (isr)

the institute for systems research was established in 1985 through a
national science foundation engineering research center grant.  isr is
committed to developing innovative advances in design methods and software
systems which address the basic productivity and competitive challenges
facing american industry.  computer science department faculty and students
work in the systems research center and contribute to research in the areas
of automation, database management, and  vlsi.  professor stephen marcus is
the director of isr, which is within the college of engineering.


engineering research center (erc)

the engineering research center was established to promote
industry-university interaction in scientific and technical disciplines.
erc conducts four programs that support transfer of technology.  the
center's maryland industrial partnerships (mips) program, which fosters
cooperative research projects between industry and the university, has
provided a number of opportunities for collaborative research with faculty
from computer science.  the director of the erc, which is within the
college of engineering, is professor herbert rabin.



student activities

executive council

the graduate student body elects seven members to the
 executive council
annually.  the council plans activities and addresses issues of concern to
the student body.  the council also allocates funds from the graduate
student activities budget.  sponsored activities typically include a
departmental picnic, a weekly graduate student seminar, hikes, parties,
newspaper subscriptions for the graduate student lounge, and forums.


department council

the department council advises the chair on issues affecting the
department.  it is composed primarily of faculty, but two graduate student
representatives attend the meetings as non-voting members.  they provide
graduate student input at the meetings and keep the graduate students
informed of issues that affect them.


educational affairs committee

the educational affairs committee is responsible for the undergraduate
and graduate academic programs of the department.  the committee has two
voting graduate student representatives and two voting undergraduate
student representatives.  they provide student input at the meetings and
keep students informed of decisions that are made.


graduate student association

the graduate student association (gsa) is a campus-wide organization of
graduate students whose constitution states, "the purpose of the [gsa] is
to improve the quality of education and enhance the quality of life of the
graduate students, to communicate and support research interests of
graduate students, to recommend members for policy-making and
administrative committees of the campus, and to be the spokesbody for
graduate student concerns."  the organization is open to all graduate
students at umcp.  some of the recent activities organized by the gsa
were:  protest rallies against taxation of scholarships and assistantships,
a campus-wide research conference for graduate students (grid), setting up
a legal aid service for graduate students, distributing a newsletter with
information for all graduate students, and organizing social events such as
dances and weekly "happy hours."


acm student chapter and programming contest

the acm  is the principal professional society for computer scientists.
membership is important for maintaining contact with current developments
through journal publications, meetings and conferences.  our department has
 a student chapter of the acm.
student members of the acm receive many of
the benefits at a reduced rate:  journals, conference registration, etc.
among other activities, the acm student chapter helps to sponsor the
university of maryland acm programming team, which in 1990 took second
place in the acm international programming contest sponsored by at&amp;t.


t-shirt contest

each year graduate students sponsor a department t-shirt contest.
t-shirts imprinted with the winning design are sold at a reasonable cost to
students, faculty, and staff.


grad student lounge

there is a lounge with a refrigerator and a microwave oven for storing
and heating your lunch, as well as tables and chairs for dining.  usually,
daily newspapers are there to read but not to remove.


electronic newsgroup

csd.grad
is the electronic newsgroup on the departmental computer
system for announcements and discussions of interest to graduate
students.  anyone who has an account on the department computing facilities
can read and post messages to the newsgroup.



computer science graduate courses

in addition to the courses listed below, a large number of seminar
courses are given each semester.  the content of the seminars varies each
semester, depending on the interests of the students and faculty.

due to heavy demand for computer science courses, we strongly advise
that after the first semester students preregister for courses.
information about preregistration is provided by the graduate office during
each semester.  before preregistering, students must consult with their
advisors about what courses to take.

a complete listing of all
undergraduate courses
and graduate courses
is available.


go back to the umcp cs home page.

last updated:
jan/11/95
- webmaster@cs.umd.edu




 about the graduate program
 about the graduate program
 about the graduate program
 about the graduate program
 about the graduate program
 about the graduate program
 about the graduate program
 about the graduate program
 about the graduate program
 about the graduate program