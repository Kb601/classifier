kaleidoscope: a constraint imperative programming language



kaleidoscope: a constraint imperative programming language



authors: gus lopez, bjorn freeman-benson, and alan borning



published in constraint programming, b. mayoh, e. tougu, j. penjam
(eds.), nato advanced science institute series, series f: computer and
system sciences, vol 131, springer-verlag, 1994, pages 313-329.
174-180.
also published as uw tech report 93-09-04.



abstract

the constraint imperative programming (cip) family of languages integrates
constraints and imperative, object-oriented programming.  in addition to
combining the useful features of both paradigms, there are synergistic
effects of this integration, such as the ability to define constraints over
user-defined domains.  we discuss characteristics of the cip family and
provide a rationale for its creation.  the synergy of constraints and
objects imposes additional challenges for the provision of constructs,
such as object identity and class membership, that are well-understood in
conventional language paradigms.  we discuss the benefits and challenges of
combining the constraint and imperative paradigms, and present our current
ideas in the context of the design and implementation of the
kaleidoscope'93 language.





click 
here to get the postscript file.



return to constraints home page

 kaleidoscope : a constraint imperative programming language
 kaleidoscope : a constraint imperative programming language
 kaleidoscope : a constraint imperative programming language
 kaleidoscope : a constraint imperative programming language
 kaleidoscope : a constraint imperative programming language
 kaleidoscope : a constraint imperative programming language
 kaleidoscope : a constraint imperative programming language
 kaleidoscope : a constraint imperative programming language
 kaleidoscope : a constraint imperative programming language
 kaleidoscope : a constraint imperative programming language