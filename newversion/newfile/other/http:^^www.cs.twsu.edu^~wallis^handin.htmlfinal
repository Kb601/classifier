hand in program  


 
hand in program
- by  thomas wallis 



handin is an experimental program that i wrote, working from an idea in
some source code dr.
gopalakrishnan gave me.   make sure you have your terminal type set
to vt100 .  you can use the  vt100  command to
do this when you log in or you can use this command:  
 setenv term 'vt100'  
handin has  severe  problems otherwise.  

handin works in the following manner.  a special account is created on the
system for your class.  your grader and you both have the password 
(the students don't).  a program called handin is installed in the bin
directory of that account.  the student invokes the program like
this:

 ~account/bin/handin class assign# file


example:  

 ~cs742/bin/handin cs742 1 myprog.c  


handin checks several things that you or your grader need to set up.


  in the home directory for the class account , there should be a file
called students.  this lists the student usernames for your class, one
per line, no spaces, tabs, punctuation, etc...  you or your gta must enter 
this data into the file.  

  a subdirectory, mode 700, must be created for each assignment number.  
ie.  1, 2, 3, etc.  
assignment numbers must be integers 0
 handin must be installed setuid to the grading account in the
bin subdirectory (i do that).  

 you may have an optional file called assignments.dat in the home
directory of the class account.  it has the following format:

assignment#;due-date;comment


the assignment# must be an integer (see above).  due date must be in
the format:  dd-mmm-yyyy (ex.  25-feb-1995).  comment can be free-form
(up to 60 columns or so (no special characters please)).  semicolons are
the delimiters in this file.  one assignment per line.  syntax is important.
the handin parser is very simple and will bomb on bad data in trusted files. 

if this file exists, due dates will be enforced on all assignments.  

here is how the program works (briefly).  

the student runs the handin program:

ex: ~cs540/bin/handin cs540 2 aaa.c  

note that the userid (~cs540) and the classid must match.  

 handin looks in the subdirectory /usr/users/user3/classes/cs540 for
the students file.  if the student is not in that file, handin won't let
the student hand in anything.  

 handin looks for a subdirectory for the assignment number.  if it doesn't
exist, then handin won't let the student hand anything in.  

 handin looks for the source files (sees if they are ordinary files
that suit the syntax (filenames must consist of dots, [a-z], [0-9]).  
no dashes, underscores, etc.  it also checks to see if the student 
owns the file they are handing in (a very simple check for attempted
cheating).
some versions of handin limit the number of files handed in on one
command line to five, other versions increase this limit to twenty
files per command line (watch out for wildcards :-( ).  

 if the assignments.dat file exists, then due dates are enforced.  
if the file lists a due date of 15-feb-1995, when the 16th comes around, 
students will not be able to hand in that particular assignment anymore.  

 handin creates a subdirectory for that student in the assignment 
subdirectory.  



example:



/usr/users/user3/classes/cs540  is the home directory for the grader account.

/usr/users/user3/classes/cs540/1 is the home dir. for assignment#1.

/usr/users/user3/classes/cs540/1/jones is where all of the files handed in by
user jones go.  



the subdirectory and all the files in there are owned by the grader
account (not jones (that is where the suid comes in)).  jones cannot
access this directory or the files (they are chmoded to 700).  
a file handin.log is created in /usr/users/user3/classes/cs540/1
(also owned by cs540) showing when a student handed in each file.  

if a student hands in a file twice for the same assignment, the handin
program will detect that the file has already been handed in and will
ask the student if they want to overwrite it.  

this program is experimental.  some classes have used it already, with no
trouble reports (i guess this is good news).  


the information accessible from this server is provided
in good
faith, but neither
the wichita state university, nor the computer science department takes
any lega
l responsiblity
whatsoever for the accuracy or content of data displayed on this server.
please
notify us if
any error is dectected. thank you !

    







 hand in program
 hand in program
 hand in program
 hand in program
 hand in program
 hand in program
 hand in program
 hand in program
 hand in program
 hand in program