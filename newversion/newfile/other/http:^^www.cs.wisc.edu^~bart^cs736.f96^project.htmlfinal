cs 736 - project list






university of wisconsin-madison

computer sciences department




cs 736

fall 1996
bart miller


cs 736: advanced operating systems




project list
(project proposal due: friday, october 11)

(midway interviews: thursday/friday, november 14/15)

(draft report to referees: thursday, december 5)

(referee reports to authors: tuesday, december 10)

(final report due: thursday, december 12)



general comments

the projects are intended to give you an opportunity to study a
particular area related
to operating systems.
your project will require a test implementation, measurement study or analysis,
literature search, and evaluation.

the project suggestions below are briefly stated.
they are intended to guide you into particular areas and you
are expected to expand these suggestions into a full project
descriptions.
this gives you more freedom in selecting an area and more burden in
defining your own project.
there may be more issues listed for a project than you can cover.
if you have a topic of your own that is not listed below, you should come
and talk with me so we can work out a reasonable project description. 

you will write a paper that reports on your project.
this paper will structured as if you were going to submit it to a conference.
i will provide more details on the project report later in the semester.

you can work in teams of two people (and, in certain cases three people)
on the project and report.

projects

(1) multiprocessor working set:
as you know from your paper assignment,
the working set (and wsclock) algorithms are difficult to implement for
shared pages.
the problem comes from deciding on which process's virtual time to use,
and how to efficiently store the last reference times.
one of my ra's (tia newhall)
developed
a promising algorithm
that approximates the behavior of a shared-page working set,
while being extremely space efficient.

the goal of this project is to carry out a simulation study of this
algorithm to obtain performance
results from realistic application programs.

(2) core wars:
this project is for two groups:


group a's
goal is to develop a program that replicates and protects
itself.
it can copy itself to other machines and hide itself using scheduling
routines and the file system.
there should typically be only one process running at a time on any given
host.
group a's program should print out an "i'm alive" message about
every 15 seconds.

group b's
goal is to kill the program created by group a.
it can use any means at its disposal.
as with the other group,
there should typically be only one process running at a time on any given
host.


some ground rules:
(a) both group a and b will run their program with the same user id and on
the same (agreed upon) set of hosts.
(b) each of the programs must be started with only a single command.
(c) a contest will last 20 minutes; at the end of 20 minutes, if group a's
program is running, they win; if a's program is not running, b wins.

(3) distributed shared memory:
in a
study done a few years ago,
we (burger, hyder, miller, and wood) studied
the behavior of paging and scheduling policies for fine-grained distributed
shared-memory systems.
one question is: what do you do when you get a page fault on one node?
three reasonable choices are
(1) gang-context switch, (2) just wait for the page on
the local processors, but don't schedule anything else (``spin''), or
(3) let a sequential program run on that faulting node until the page fault
is satisfied.
our study was done by using and modifying the wisconsin wind tunnel on the
tmc cm-5 parallel computer.

we evaluated the gang-context switch and spin policies, but did not evaluate
the local context switch policy (called ``local under gang'', or lug).
lug is attractive because it allows the system to use wasted cycles, but
may not be beneficial if memory, cache, and tlb pollution excessively degrade the
parallel job's performance.
the goal of this project would be to extend the study to include lug.

(4) more fuzz:
the goal of this project is to evaluate the robustness of various unix kernels,
given an unpredictable calls to their basic kernel functions (system calls).
several years ago, we built tools to generate and test programs by feeding
them random input.
the result of
this study was that we were able to crash 25-33% of the standard
unix utilities.
almost every unix manufacturer adopted our fuzz testing tools as part of their
release process.

in 1995, we repeated and expanded these tests
on more platforms and included x-window applications.
the goal of this semester's
project is to test os kernels in a similar way to that we used to
test application programs.

the basic tool is called the
fuzz
generator.
this is a program that generates a random character stream.
we used the fuzz generator to attack as many unix
utilities as possible, with the goal of trying to break them.
for the utilities that broke, we determined the
the cause of the break.
there is also a tool called
ptyjig
that allows random input to be fed to interactive programs.

the major extension to these tools would be to figure out a way to generate
random input (random calls and parameters) to the kernel (system) calls
supplied by the operating system.
we would like to test a variety of platforms and include non-unix systems
(such as windows/nt).

(5) using paradyn to get os and hardware performance data:
the
paradyn project
is a research project developing cutting edge performance profiling tools
for parallel programs.
paradyn is unique in that it instruments an application program
after the application has started running.
the data collected by paradyn is specified with our metric description
language, allowing new kinds of data to be collected without recompiling
paradyn or the application.

the goal of this project is to define metrics in paradyn to collect information
from new hardware and operating systems sources.
for example, the ibm sp2 has flop counters.
the intel p6 and sun ultrasparc have more extensive counter resources.
using these new metrics (and the existing ones in paradyn) you would then
study a few parallel application programs.

project proposal

the project descriptions listed above a intentionally brief.
you will need to expand and refine these to develop your own project.
different groups may choose the same topic, but have significantly
different emphases.

your project proposal will describe your goals, methods, implementation
outline, evaluation criteria, and resources needed.
first, you should describe the basic problem that you will be addressing.
next, you should provide a more detailed description of how you will approach
the problem.
this description should be contain much more detail than the brief paragraphs
given above.
you will provide an outline of features that you project will include,
an implementation plan,
and
an evaluation plan.

project proposals will typically be 3 to 4 double-spaced pages.




last modified:
wed oct  2 08:18:17 cdt 1996
by
bart



cs 736 - project list
cs 736 - project list
cs 736 - project list
cs 736 - project list
cs 736 - project list
cs 736 - project list
cs 736 - project list
cs 736 - project list
cs 736 - project list
cs 736 - project list