the evolution of a programmer 






the evolution of a programmer




 ===================
 high school/jr.high
 ===================
 
 10 print "hello world"
 20 end
 
 =====================
 first year in college
 =====================
 
 program hello(input, output)
   begin7~
     writeln('hello w7_}_eorld');
   end.
 
 ======================
 senior year in college
 ======================
 
 (defun hello
    (print
     (cons 'hello (list 'world))))s 
 ================{?}g
 new professional
 ================
 
 #include 
 void main(void)
 {
   char *message[] = {"hello ", "world"};
   int i;
 
   for(i = 0; i 
     printf("%s", message[i]);
   printf("\n");
 }
 
 ====================
 seasoned professional
 =====================
 
 #include 
 #include 
 
   class string
   {
   private:
     int size;
     char *ptr;
 
   public:
     string() : size(0), ptr(new char('\0')) {}
 
     string(const string &s) : size(s.size)
     {
       ptr = new char[size + 1];
       strcpy(ptr, s.ptr);
     }
 
     ~string()
     {
       delete [] ptr;
     }
 
     friend ostream &operator 
     string &operator=(const char *);
   };
 
   ostream &operator
   {
     return(stream 
   }
 
   string &string::operator=(const char *chrs)
   {
     if (this != &chrs)
     {
       delete [] ptr;
      size = strlen(chrs);
       ptr = new char[size + 1];
       strcpy(ptr, chrs);
     }
     return(*this);
   }
 
   int main()
   {
     string str;
 
     str = "hello world";
     cout 
 
     return(0);
   }
 
 =================
 master programmer
 =================
 
   [
   uuid(2573f8f4-cfee-101a-9a9f-00aa00342820)
   ]
   library lhello
   {
       // bring in the master library
       importlib("actimp.tlb");
       importlib("actexp.tlb");
 
       // bring in my interfaces
       #include "pshlo.idl"
 
       [
       uuid(2573f8f5-cfee-101a-9a9f-00aa00342820)
       ]
       cotype thello
    {
    interface ihello;
    interface ipersistfile;
    };
   };
 
   [
   exe,
   uuid(2573f890-cfee-101a-9a9f-00aa00342820)
   ]
   module chellolib
   {
 
       // some code related header files
       importheader();
       importheader();
       importheader();
       importheader("pshlo.h");
       importheader("shlo.hxx");
       importheader("mycls.hxx");
 
       // needed typelibs
       importlib("actimp.tlb");
       importlib("actexp.tlb");
       importlib("thlo.tlb");
 
       [
       uuid(2573f891-cfee-101a-9a9f-00aa00342820),
       aggregatable
       ]
       coclass chello
    {
    cotype thello;
    };
   };
 
   #include "ipfix.hxx"
   extern handle hevent;
   class chello : public chellobase
   {
   public:
       ipfix(clsid_chello);
 
       chello(iunknown *punk);
       ~chello();
 
       hresult  __stdcall printsz(lpwstr pwszstring);
 
   private:
       static int cobjref;
   };
 
   #include 
   #include 
   #include 
   #include 
   #include "thlo.h"
   #include "pshlo.h"
   #include "shlo.hxx"
   #include "mycls.hxx"
 
   int chello:cobjref = 0;
 
   chello::chello(iunknown *punk) : chellobase(punk)
   {
       cobjref++;
       return;
   }
 
   hresult  __stdcall  chello::printsz(lpwstr pwszstring)
   {
       printf("%ws\n", pwszstring);
       return(resultfromscode(s_ok));
   }
 
 
   chello::~chello(void)
   {
 
   // when the object count goes to zero, stop the server
   cobjref--;
   if( cobjref == 0 )
       pulseevent(hevent);
 
   return;
   }
 
   #include 
   #include 
   #include "pshlo.h"
   #include "shlo.hxx"
   #include "mycls.hxx"
 
   handle hevent;
 
    int _cdecl main(
   int argc,
   char * argv[]
   ) {
   ulong ulref;
   dword dwregistration;
   chellocf *pcf = new chellocf();
 
   hevent = createevent(null, false, false, null);
 
   // initialize the ole libraries
   coinitiali, null);
 
   // initialize the ole libraries
   coinitializeex(null, coinit_multithreaded);
 
   coregisterclassobject(clsid_chello, pcf, clsctx_local_server,
       regcls_multipleuse, &dwregistration);
 
   // wait on an event to stop
   waitforsingleobject(hevent, infinite);
 
   // revoke and release the class object
   corevokeclassobject(dwregistration);
   ulref = pcf->release();
 
   // tell ole we are going away.
   couninitialize();
 
   return(0); }
 
   extern clsid clsid_chello;
   extern uuid libid_chellolib;
 
   clsid clsid_chello = { /* 2573f891-cfee-101a-9a9f-00aa00342820 */
       0x2573f891,
       0xcfee,
       0x101a,
       { 0x9a, 0x9f, 0x00, 0xaa, 0x00, 0x34, 0x28, 0x20 }
   };
 
   uuid libid_chellolib = { /* 2573f890-cfee-101a-9a9f-00aa00342820 */
       0x2573f890,
       0xcfee,
       0x101a,
       { 0x9a, 0x9f, 0x00, 0xaa, 0x00, 0x34, 0x28, 0x20 }
   };
 
   #include 
   #include 
   #include 
   #include 
   #include 
   #include "pshlo.h"
   #include "shlo.hxx"
   #include "clsid.h"
 
   int _cdecl main(
   int argc,
   char * argv[]
   ) {
   hresult  hrslt;
   ihello        *phello;
   ulong  ulcnt;
   imoniker * pmk;
   wchar  wcst[_max_path];
   wchar  wcspath[2 * _max_path];br>
 
   // get object path
   wcspath[0] = '\0';
   wcst[0] = '\0';
   if( argc > 1) {
       mbstowcs(wcspath, argv[1], strlen(argv[1]) + 1);
       wcsupr(wcspath);
       }
   else {
       fprintf(stderr, "object path must be specified\n");
       return(1);
       }
 
   // get print string
   if(argc > 2)
       mbstowcs(wcst, argv[2], strlen(argv[2]) + 1);
   else
       wcscpy(wcst, l"hello world");
 
   printf("linking to object %ws\n", wcspath);
   printf("text string %ws\n", wcst);
 
   // initialize the ole libraries
   hrslt = coinitializeex(null, coinit_multithreaded);
 
   if(succeeded(hrslt)) {
 
       hrslt = createfilemoniker(wcspath, &pmk);
       if(succeeded(hrslt))
    hrslt = bindmoniker(pmk, 0, iid_ihello, (void **)&phello);
 
       if(succeeded(hrslt)) {
 
    // print a string out
    phello->printsz(wcst);
 
    sleep(2000);
    ulcnt = phello->release();
    }
       else
    printf("failure to connect, status: %lx", hrslt);
 
       // tell ole we are going away.
       couninitialize();
       }
 
   return(0);
   }
 
 =================
 apprentice hacker
 =================
 
 #!/usr/local/bin/perl
 $msg="hello, world.\n";
 if ($#argv >= 0) {
   while(defined($arg=shift(@argv))) {
     $outfilename = $arg;
     open(file, ">" . $outfilename) || die "can't write $arg: $!\n";
     print (file $msg);
     close(file) || die "can't close $arg: $!\n";
   }
 } else {
   print ($msg);
 }
 1;
 
 ==================
 experienced hacker
 ==================
 
 #include 
 #define s "hello, world\n"
 main(){exit(printf(s) == strlen(s) ? 0 : 1);}
 
 ===============
 seasoned hacker
 ===============
 
 % cc -o a.out ~/src/misc/hw/hw.c
 % a.out
 
 ===========
 guru hacker
 ===========
 
 % cat
 hello, world.
 ^d
 
 =====================
 axe system programmer
 =====================>
 
 ll0:
         .seg    "data"
         .seg    "text"
         .proc 04
         .global _main
 _main:
         !#prologue# 0
         sethi   %hi(lf26),%g1
         add     %g1,%lo(lf26),%g1
         save    %sp,%g1,%sp
         !#prologue# 1
         .seg    "data1"
 l30:
         .ascii  "hello, world\012\0"
         .seg    "text"
         .seg    "data1"
 l32:
         .ascii  "hello, world\012\0"
         .seg    "text"
         set     l32,%o0
         call    _strlen,1
         nop
         mov     %o0,%i5
         set     l30,%o0
         call    _printf,1
         nop
         cmp     %o0,%i5
         bne     l2000000
         nop
         mov     0,%o0
         b       l2000001
         nop
 l2000000:
         mov     0x1,%o0
 l2000001:
         call    _exit,1
         nop
 le26:
         ret
         restore
        lf26 = -96
         lp26 = 96
         lst26 = 96
         lt26 = 96
         .seg    "data"
 
 0000000 0103 0107 0000 0060 0000 0020 0000 0000
 0000020 0000 0030 0000 0000 0000 0054 0000 0000
 0000040 033f ffff 8200 63a0 9de3 8001 1100 0000
 0000060 9012 2000 4000 0000 0100 0000 ba10 0008
 0000100 1100 0000 9012 2000 4000 0000 0100 00 ba10 0008
 0000100 1100 0000 9012 2000 4000 0000 0100 0000
 0000120 80a2 001d 1280 0005 0100 0000 9010 2000
 0000140 1080 0003 0100 0000 9010 2001 4000 0000
 0000160 0100 0000 81c7 e008 81e8 0000 0000 0000
 0000200 4865 6c6c 6f2c 2057 6f72 6c64 0a00 4865
 0000220 6c6c 6f2c 2057 6f72 6c64 0a00 0000 0000
 0000240 0000 000c 0000 0608 0000 006e 0000 0010
 0000260 0000 060b 0000 006e 0000 0014 0000 0286
 0000300 ffff ffec 0000 0020 0000 0608 0000 0060
 0000320 0000 0024 0000 060b 0000 0060 0000 0028
 0000340 0000 0186 ffff ffd8 0000 004c 0000 0386
 0000360 ffff ffb4 0000 0004 0500 0000 0000 0000
 0000400 0000 000a 0100 0000 0000 0000 0000 0012
 0000420 0100 0000 0000 0000 0000 001a 0100 0000
 0000440 0000 0000 0000 0020 5f6d 6169 6e00 5f70
 0000460 7269 6e74 6600 5f73 7472 6c65 6e00 5f65
 0000500 7869 7400
 0000504
 
 % axe_generate -f system.uhdl
 application 'exchange' generated
 2324042350000000 source code lines
 no errors detected.
 hardware retrieval...done ok
 certification test...done ok
 packing..............done ok
 delivery.............done ok
 application 'exchange' delivered to customer
 23456000 bytes/sec.
 end processing, 2345 seconds.
 
 ===========================
 ultra high level programmer
 ===========================
 
 system.uhdl :
 
 system
   create screenwin
     size 20000000/unit=one
     destination order.dest[one]
     output character['hello world']
   end
 end
 
 ===========
 new manager
 ===========
 
 10 print "hello world"
 20 end
 
 ==============
 middle manager
 ==============r>
 
 mail -s "hello, world." bob@b12
 
  bob, could you please write me a program that prints
  "hello, world."? i need it by tomorrow.
 
 ^d
 
 ==============
 senior manager
 ==============>
 
 % zmail all
 
   i need a "hello, world." program by this afternoon.r>
 
 ===============
 chief executive
 ===============
 
   % message
   message: command not found
   % pm
   pm: command not found
   % letter
   letter: command not found.
   % mail
   to: ^x ^f ^c
   > help mail
   help: command not found.
   >what
   what: command not found
   >need help
   need: command not found
   > damn!
   !: event unrecognized
   >exit
   exit: unknown
   >quit
   %
   % logout







 the evolution of a programmer
 the evolution of a programmer
 the evolution of a programmer
 the evolution of a programmer
 the evolution of a programmer
 the evolution of a programmer
 the evolution of a programmer
 the evolution of a programmer
 the evolution of a programmer
 the evolution of a programmer