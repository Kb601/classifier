devise model of visualization



model of visualization



the model of visualization is used to design the framework from which
devise is constructed. it is also the best way to understand how
devise functions.


stages of visualization
file
schema
tdata
mapping
gdata
visual filter
view
window
link
cursor


stages of visualization

visualization in devise is divided into stages, each stage supported
by components responsible for the functions of that stage.  the
component design is essential to providing the following
functionalities of devise:


visualizations are constructed by creating component instances,
and interconnections between components.
devise is extensible in that new components may be defined
and incorporated into its framework. for example, a new type of
file, or new way of drawing graphics may be incorporated.
the visual query interface allows the user 
to save a visualization and apply it to different sets of input files.


the stages of creating a visualization are as follows:


import a file into devise as a textual data
(tdata). the schema is
used to describe information about how to import the file.
mappingtdata into graphical data
(gdata).
select a view to display the gdata.
assign a visual filter to select which portion
of gdata are to be viewed.
arrange views in windows.
create linked axes using visual links. or
display relationships between views using cursors.


file

the input file is provided by the user. it is stored on disk in ascii
format. an example of an ascii file containing sin(time) and cos(time)
might look like:


 #	time       sin        cos
0.000000.2 1.000000.2 0.000000.2
0.017453.2 0.999848.2 0.017452.2
0.034906.2 0.999391.2 0.034898.2
0.052358.2 0.998630.2 0.052334.2
...


schema

the schema file describes the layout of an ascii input file.  it is
used to convey: name, type, and range of attributes, characters that
separate the attributes in the file, and characters that should be
ignored while reading the file. the attribute range information is
optional. for our example file, the schema file looks like:


type sensor ascii
comment #
whitespace ' '
attr time double hi 1000 lo 0
attr sin double hi 1 lo -1
attr cos double hi 1 lo -1


the first line names the file type: sensor. all sensor files have
data stored in the same format.  more than one file type can be
imported into devise, each having its own schema file. for example, we
can also create a stock file type to read information about stock
prices, with data stored in a different format.  the second line tells
devise to ignore lines that start with '#'. the third line tells
devise that the attributes in the file are separated by white
spaces. devise can also read files separated by other delimiters,
such as '10,20,20'. the remaining lines describe attribute names,
types, and ranges.

tdata

a textual data (tdata) is the representation used by devise to access
files (or other types of input data). once a file is imported into
devise as a tdata, the user uses the tdata to create visualizations.
different types of input files are input into devise and treated
uniformly as tdata.

after selecting the file type, the user is asked to enter an alias
for the tdata. the default name is the name of the input file,
stripped of its path information. after entering the alias, the file
is imported as tdata into devise.

mapping

a mapping converts tdata attributes into graphical data (gdata)
attributes. the user decides how tdata is visualize by selecting the
tdata attributes that map onto the the x, y, color and shape gdata
attributes. notice that a tdata can be visualized in more than one way
by creating more than one mapping.

for our example, we can create the following example mappings:
sin_vs_time:
x y 	
cos_vs_time:
x y 	
sin_vs_cos
x y once a mapping is created, it can be used on all tdata with the
same file type.

gdata



the graphical data (gdata) is the graphical representation of the
tdata. it consists of attributes: x, y, color, pattern, size,
orientation, shape, and shape specific attributes.

visual filter

a visual filter defines a query over the graphical data attributes of
the gdata. our implementation supports range query over the x and y
gdata attributes.  use visual filter to specify portions of gdata to
be viewed.

view

a view is used to display those gdata that fall within the range of
the visual filter. currently we have two types of views: scatter and
sortedx. the scatter view is used to draw a scattered plot.  the
sortedx view implements optimizations used to reduce the time used to
draw the gdata if the x attribute is sorted.

window

a window provides the screen real estate used by views to draw the
gdata. it it also responsible for arranging views in its
boundaries. currently, devise supports tiled/automatic, vertical, and
horizontal window layouts.

a view can be removed from a window to reduce clutter, or
be moved to another window so that related views are brought
together for comparison.

windows can be duplicated, a very handy feature. 

link

a link is used to link visual filters so that updating one
synchronously updates all linked visual filters. we have implemented
links for linked axes, either linked x and/or y axes. however, a link
in theory can be used on any of the of the graphical attributes: x, y,
color, size, pattern, orientation, and shape.

cursor

a cursor can also be used to display the x/y boundaries of one view
within another view. a cursor contains both a source view and a
destination view.  the source view is where the cursor fetches
information about the current view x/y axes boundaries. the boundaries
of the source view are drawn as line segments in the axes of the
destination view. click in the axes area of the destination view to
move the source view (by changing its visual filter) to the location
clicked.




devise model of visualization
devise model of visualization
devise model of visualization
devise model of visualization
devise model of visualization
devise model of visualization
devise model of visualization
devise model of visualization
devise model of visualization
devise model of visualization