researchers in programming languages and compilers
researchers in programming languages and compilers

here are some home pages of researchers working on programming
language theory, design, implementation, and related areas.

disclaimer: this list is not exhaustive! please let me
know if you would like to be added
to this list, or if you would like an existing entry modified or
deleted.

 back to 
the language research page

related pages

 the sel-hpc list of 
home pages of functional language researchers.
 the sel-hpc list of 
home pages of compiler researchers.
 oscar nierstrasz's list of useful home pages. 
 
who's who on the web in formal methods
 
researchers in logical frameworks
 
semantics-based program analysis and manipulation researchers


home pages

mart&iacute;n abadi - dec src
 security in distributed systems, specification and verification 
methods, principles of programming languages. 

 samson abramsky - university of edinburgh
 semantics of programming languages, concurrency, game semantics, program
analysis.

 gul agha - university of illinois at urbana-champaign
 logic, object-oriented programming, formal semantics, actors.

 
alex aiken - berkeley
 program analysis, type theory, optimization, constraint theories, 
functional programming, instruction scheduling.

 
hassan a&iuml;t-kaci - simon fraser university
 constraint-based programming, object-orientation, logical and
functional programming, and the design of compilation techniques.

 maria alpuente - technical university of valencia (spain)
 logic programming: semantics, extensions and applications
integration of functional and logic programming languages abstract
interpretation, program manipulation.


thorsten altenkirch - chalmers
 type theory, categorical logic and program verification. 

 
saman amarasinghe - stanford
 compilers for parallel machines, 
suif.

 
jennifer anderson - stanford
 compilers for scalable parallel machines, 
suif.

 
peter holst andersen - diku, university of copenhagen
 partial evaluation, c-mix.


andrew appel - princeton
 standard ml of new jersey.  compilation, optimization, and garbage
collection of mostly functional programming languages. 

 zena matilde ariola - 
university of oregon
 principles of programming languages, formal
semantics. 

 arvind - mit
 all aspects of parallel computing and declarative programming
languages.  dynamic dataflow architectures, the implicitly parallel
programming language id, and the compilation of languages such as id
on parallel machines.

 mike ashley - university of kansas
 program analysis, program transformations, language design and implementation.

 mikhail auguston - new mexico state university
 programming languages design and implementation, the design of
the compiler writing language 
rigal,
software engineering, testing and debugging automation, assertion
languages.


lennart augustsson - chalmers
 functional programming and implementation.

 henry baker - independent researcher/consultant
 garbage collection, gc, storage management, programming
languages, lisp, ada, apl, ml, functional programming, compilers,
linear types, reversible computation, parallel languages, quantum
computation.

 carlos baquero - 
minho university
 concurrent object oriented programming, inheritance of concurrency 
control code, c++ extensions, transactions on distributed and mobile computing.


gerald baumgartner - purdue

functional and object-oriented languages, type systems, object types, modules.

 
fran&ccedil;oise bellegarde - oregon graduate institute
 program transformation by rewriting, functional programming,
automatic demonstration, and the use of formal methods for software
development.

 
edoardo biagioni - carnegie mellon
functional languages, parallel computing and architectures,
compilers, networking, operating systems, and i/o. 

 
lars birkedal - carnegie mellon
 type theory, modules, standard ml, compilation of ml, the ml kit, partial
evaluation, sml-mix.

 sandip k. biswas - university of pennsylvania
 compilers, type theory, module systems, separate compilation, 
configuration management, program slicing.

 
michael r. blair - mit
 dynamically adaptive profile-guided specialization,
partial evaluation, program analyisi, compilation, type theory, subtyping.

 guy blelloch - 
carnegie mellon
 parallel languages and compilers.  nesl.

 matthias blume - 
princeton
 implementation of mostly functional languages, in particular sml
and scheme;  efficient data representation, separate compilation,
compilation management, cross-module optimizations;  language design 

 alan borning
- university of washington 
 
constraint-based languages and systems.

 
lee braine - university college london
 functional programming, object-oriented programming, visual
programming, and language implementations.

 preston briggs - rice

 
jean-pierre briot -  university of tokyo
 object-oriented programming, concurrency/parallelism, meta-programming
and reflection, artificial intelligence, artificial life, computer
music.

 kim b. bruce - 
williams college
 semantics and design of programming languages, type theory,
object-oriented languages, models of higher-order lambda calculus
including subtypes and bounded polymorphism.

 barrett r. bryant - the university of alabama at birmingham
 compiler design, formal semantics, object-oriented technology.

 tim budd - 
oregon state
 programming languages, 
leda, 
implementation techniques, 
oop. 

 
peter buhr - university of waterloo
 polymorphism, persistence, concurrency, and concurrent monitoring,
visualization and debugging. 

 margaret m. burnett - 
oregon state university.
 visual programming languages design, theory, and implementation.
(ftp-able papers).

 rod burstall - edinburgh
 computer-aided proof and its relation to type theory; development
of correct programs with respect to a specification; applications of
category theory in computer science.

 
philippe canalda - inria rocquencourt
 pagode: a generator of optimizing code generators, compilation
techniques, cosy : an optimizing compiler platform, software
engineering, automatic term rewriting system generation, term and dag
normalization problem, non-deterministic finite state automata with
non-linear and unification pattern constraints, dynamic programming,
reentrant programming, pattern matching.  

 luca cardelli - dec src
 theory of programming languages: polymorphism, subtyping,
objects, recursion, modularization, typechecking, distribution.
modula-3, obliq, ml2000.

 steve carr -
michigan technological university
 compilers for instruction-level parallel architectures.

 nicholas carriero - yale
 systems issues in the development and deployment of
software tools for parallelism

 
giuseppe castagna - 
liens (laboratoire d'informatique de l'ecole normale  
sup&eacute;rieure)
 type theory, object-oriented programming.

 manuel m.t. chakravarty - 
technical university of berlin
 design and implementation of functional and logic programming
languages with emphasis on the integration of both paradigms and
parallel implementations.

 
craig chambers - university of washington
 design and implementation of advanced object-oriented languages. 
cecil.

 thomas christopher - 
illinois institute of technology
 parallel programming languages, compilers, experimental programming 
models, message-driven computing, and icon.

 mark chu-carroll - university of delaware
 programming languages and environments, general purpose
parallel programming, compiler analysis and high-level optimization.

 wayne citrin - university of colorado
 visual programming languages and environments.

 chris clack - 
university college london
 language design, programming environments and techniques
(especially functional programming), high performance computing

 william d clinger - 
northeastern
 higher order and functional languages: design and
specification, optimizations and their correctness,
generational garbage collection.

 chris colby - carnegie mellon
 program analysis via abstract interpretation of the aliasing,
synchronization, and communication behavior of concurrent languages
such as concurrent ml.

 jean-francois collard - cnrs, laboratory prism
 static analyses, dataflow analyses, automatic parallelization,
scheduling, data-parallel functional programming

 
charles consel -  university of rennes/irisa
 static program analysis, compilation and compiler generation,
programming environment, prototyping and program transformation. 

 
robert constable - cornell
 systems for computer-assisted problem solving in programming and
mathematics, such as nuprl.  
models and program refinement for the polya
programming language.

 gordon v. cormack - 
university of waterloo
 parsing and text processing, attribute grammars, data types, concurrency.

 patrick cousot - ens, paris
 static program analysis, abstract interpretation,
program development and verification, semantics.

 
dirk craeynest - 
k. u. leuven
semantics directed compiler construction, integrated environments,
programming language ada, software engineering.

 roger crew 
- microsoft research
semantics, program analysis, verification and
transformations.

 
ron cytron - washington university in st. louis
 program optimization, program transformation, intermediate
representations.

 
mads dam - swedish institute of computer science
 first and higher order modal and temporal logics, compositional
verification techniques, process specification languages, and
applications to computer based systems for cooperative work.

 
laurent dami - universit&eacute; de gen&egrave;ve
 the hop calculus;
integration of functional and object-oriented languages.

 
olivier danvy - aarhus university
 programming languages, partial evaluation, continuations.

 rowan davies - carnegie mellon
 type systems, ml, refinement types, partial evaluation,
computation staging, program analysis.

 jeffrey dean - 
university of washington
 practical whole program analysis, partial evaluation, interprocedural
optimization for object-oriented languages.  the cecil
project.

 mourad debbabi - laval university, quebec
 programming languages, integration of paradigms, semantics and
formal methods.

 andr&eacute dehon
 - mit
 
quasistatic computing, specialization, feedback, and adaptation

 arie van deursen - 
cwi, amsterdam
 language prototyping, algebraic specifications, language-specific
tools, program understanding, software reengineering.

 stephan diehl - 
universitaet des saarlandes (university saarbruecken)
 semantics of programming languages, semantics directed generation
of compilers and abstract machines, meta-programming, www programming
languages.

 t. b. dinesh - 
cwi 
 object oriented programming; algebraic specifications;
theorem proving; visual languages; partial evaluation; asf+sdf;
static program analysis

 amer diwan - university of massachusetts
 garbage collection, inlining, memory system performance, optimization for
memory hierarchies, partial evaluation, program analysis, compilers for
object-oriented languages.

 simon 
dobson - rutherford appleton laboratory
 programming abstractions for parallel and distributed
systems, compilation, program transformation, semantics.

 
scott draves - carnegie mellon
 partial evaluation, abstraction vs. performance.

 bruce f. duba - 
microsoft research
 design and implementation of programming languages.

 dominic duggan -
university of waterloo
 type systems and type inference (ml3000), object types, dynamic
types, operational semantics, higher-order unification, explicit
substitutions, partial continuations, application frameworks.

 dirk dussart - 
katholieke universiteit leuven, belgium
 program specialization techniques.

 
susan eggers - university of washington
 dynamic compilation, code scheduling, parallel optimizations for locality.

 
michael ernst - rice university
 static analysis, slicing, debugging (including optimized code),
serialization of parallel programs; game theory, intellectual
property.

 david espinosa - mit and columbia
 monads, compiler and operating system architecture.

 
leonidas fegaras - oregon graduate institute
functional programming, database programming languages, query optimization,
program transformation and verification. 

 
matthias felleisen - rice
 principles of programming languages

 mary fernandez - at&amp;t research
 improving software development through the design of very
high-level and special-purpose programming languages and the
development of tools for their efficient implementation, such as the
new jersey
machine-code toolkit.

 
jeanne ferrante - university of california, san diego
 intermediate representations for optimizing and parallelizing compilers;
optimization in parallel and memory hierarchy machines.

 
andrzej filinski - edinburgh
 continuations, cps, category theory.

 sigbjorn finne - glasgow
 lazy functional languages, specifically haskell, and their
use in the implementation of graphical user interfaces.

 
cormac flanagan - rice
 analysis and implementation of high-level parallel programming
languages.

 ian foster - 
argonne national laboratory
 parallel languages, compilers, runtime systems, applications.

 
christopher w. fraser - bell laboratories
 retargetable code generation and optimization, including 
lcc,
a retargetable compiler for ansi c.

 
timothy freeman - carnegie mellon
 refinement types, ml

 dan friedman - 
indiana university
 principles of programming languages

 
svend fr&#248;lund - hp labs 
 object-oriented languages; language support for coordination,
distribution, concurrency, persistence, and fault-tolerance.

 
david gelernter - yale
 
linda, parallel programming, software ensembles, artificial
intelligence, adaptive parallelism, programming environments for parallelism,
realtime data fusion, and expert databases.

 
shai geva - carnegie mellon
 semantics, intensional aspects of computation, domain theory,
concurrency, functional programming, reasoning about programs.

 giorgio ghelli - pisa university
 database programming languages, type theory, object oriented
languages; the object-oriented database programming language
fibonacci.

 anwar m. ghuloum - carnegie mellon
 compilers: optimizing and parallelizing sequential languages, parallel
algorithms, languages, and architectures.

 andy gill - glasgow
 using equational reasoning to perform non-trivial proofs;
deforestation; purely functional finite maps; parsing combinators.

 christopher glaeser - 
nullstone corporation
 methodologies to evaluate compiler optimization and run-time 
performance.

 
joseph a. goguen - oxford
 software engineering; formal methods; object oriented, relational and
functional programming and their combinations; concurrent computer
architecture based on rewriting; algebraic specification; theorem
proving; hardware verification; philosophy of computation.

 
benjamin goldberg - new york university
 functional programming, memory management, program optimization

andrew gordon - 
cambridge
 operational semantics; i/o and concurrency; mechanised verification.

 john k. gough - 
queensland university of technology
 code generation, optimization.  implementation of programming
languages, strongly typed imperative languages.

 t.c. nicholas graham - york university
 functional programming languages, languages for developing user
interfaces and multi-media groupware, visual programming environments.

 
john greiner - carnegie mellon
 language models of complexity, type theory, parallel algorithms.

 
dave grove - university of washington
 design, implementation and optimization of advanced
object-oriented languages, such as cecil.

 carl gunter - university of pennsylvania
 domain theory, semantics of polymorphism, computational aspects of linear
logic, structure and representation of partial information.

 rajiv gupta - university of pittsburgh
 parallelizing and optimizing compilers; parallel architectures;
distributed, real-time, and fault tolerant computing; software testing
and debugging

 
sandeep k. s. gupta - 
colorado state university
 parallelizing compilers, parallel program synthesis and parallel computing.

 
mary hall - stanford
 interprocedural optimization for parallelizing compilers,
 suif.

 
thomas hallgren - chalmers
 type systems with subtypes, graphical user interfaces for
functional languages.

 kevin hammond - glasgow
 design and implementation of pure functional languages, such as haskell.

 john hannan -
penn state 
 operational semantics and type theory; compiler verification;
mathematical logic; program transformation; abstract machines.

 
david r. hanson - princeton
 lcc,
a retargetable compiler for ansi c.
programming languages, compilers, programming environments.

 
michael hanus - rwth aachen 
 type systems for and implementation of logic programming
languages, integration of functional and logic programming languages
(alf system), abstract interpretation of logic, functional logic and
constraint logic programming languages.

 james harland - royal melbourne institute of technology
 foundations of logic programming, linear logic, proof theory,
deductive databases, computational logic. 

 
robert harper - carnegie mellon
 logical frameworks, machine-assisted proofs, ml, ml2000, modules,
lambda calculus, type theory, category theory, semantics and logics of
programs, functional programming, applications of functional languages
to systems programming.

 john hatcliff - diku, university of copenhagen
 operational semantics, correctness of program transformations,
continuations, logics and type theory, logical frameworks, partial
evaluation, computational monads, static analysis of programs.

 chris haynes - 
indiana
 type systems, control abstraction, symbolic computation, scheme.

 fritz henglein - 
diku, university of copenhagen
type inference systems, program analysis, algorithmic and 
 computational complexity, global program optimization

 
jonathan m. d. hill - oxford
 bulk synchronous parallel model; 

data-parallel non-strict functional programming;
implementation
of the hpf library in fortran 90

 
michael hind - suny at new paltz, visiting ibm research
 compiler optimizations and programming languages.

 
c.a.r. hoare - oxford
 programming methods and languages, proof techniques for programs,
distributed computing, category theory in computing science, c-mos
switching circuit design.

 
richard c. holt - university of toronto
 object oriented programming languages and teaching programming.

 
urs h&ouml;lzle - university of california,
santa barbara
 object-oriented programming languages, compilers for object-oriented
languages, run-time compilation.

 
james hook - oregon graduate institute
 application of formal methods to software development, the theory
and practice of specification and programming languages, and type
theory.

 jim horning -
intertrust technologies
 language design and implementation;
specification languages and tools (e.g., larch); c++ and the standard template library.

 susan horwitz - university of wisconsin at madison
 language-based programming environments; program slicing,
differencing, and merging; static analysis of programs; and
interprocedural dataflow analysis.

 antony l. hosking - 
purdue university
 programming language design and implementation: compilation,
interpretation, and optimization; run-time systems (e.g., garbage
collection).  object-oriented database systems; database and
persistent programming languages and systems.  empirical performance
evaluation of prototype systems.

 
brian howard - kansas state
 programming language design and theory, particularly functional
languages, semantics, and type theory.  logic and computation.
natural language processing.

 
paul hudak - yale
 functional programming, haskell, parallel programming in haskell,
modular interpreters, mutable abstract datatypes.

 
graham hutton - university of nottingham
 functional programming; relational programming; polytypic
programming; programming calculi; recursion operators; categorical
methods.

 graham hutton - utrecht university, the netherlands
 functional and relational programming, category theory in
computer science, algebraic approaches to programming.

 
s. purushothaman iyer - 
north carolina state university
 abstract interpretation, concurrency, formal methods.

 
daniel jackson - carnegie mellon
 tractable representations and analyses of designs and
code. specifications, design methods, static analysis, model checking.

 
quinn tyler jackson - lambda systems ltd.
 pattern matching, language-to-language translation, 
oo-to-non-oo modeling

 
suresh jagannathan - nec research institute 
 advanced language and compiler technology for the scheme
programming language; the incorporation of formal methods such as
continuation models, type inference, abstract interpretation, etc. as
a foundation for such a technology; parallel and distributed computing
for symbolic and irregular applications.

 
sverker janson - sics (swedish institute of computer science)
 foundations, design, and implementation technology for
multiparadigm languages that offer a combination of concurrency
(distribution), constraints, and mutable state.

 johan jeuring - 
chalmers
 program calculation, programming methodology, type systems
and programming languages for polytypic programming, functional
programming.

 trevor jim - university of pennsylvania
 semantics, compilers, type inference.

 
cliff b. jones - manchester university
 compositional formal methods for parallel environments,
support systems for formal methods,
lpf.

 
mark p. jones - university of nottingham
 programming language design and implementation, type theory, module
systems, program transformation and analysis, functional programming.

 simon peyton jones - glasgow
 design, implementation, and application of lazy functional
languages. in practical terms, that means i spend most of my time on
our implementation of haskell, the glasgow haskell compiler, and its
ramifications.

 
jesper j&oslash;rgensen - diku, university of copenhagen
 semantic based program manipulation and program analyses. program
specialization (e.g. partial evaluation, deforestation and
supercompilation), flow and binding-time analysis and representation
analysis.

 martin jourdan - 
inria, rocquencourt, france
 attribute grammars (esp. the 
fnc-2 system), program
analysis, compiler construction and generation.



bill kalsow - dec src


modula-3, programming languages and environments, compilers
and runtime systems

 jasper kamperman - 
cwi
 compilation of term rewriting systems, algebraic, equational and
functional languages, lazy rewriting, algebraic specifications.

 uwe kastens - 
university of paderborn, germany
 methods and tools for language implementation,
compilation for parallel machines.

 
dinesh katiyar - sun microsystems
 programming languages, object-oriented languages, multi-language systems,
interface definition languages, type theory 

 
richard kelsey - nec research institute 
 compiling scheme, scheme 48,
continuation-passing style.

 andrew kennedy - 
university of cambridge
 type systems, type inference, dimension types and the extension of 
programming languages to support physical dimension, functional programming.

 
david keppel - university of washington
 abstractions, architectures, binding times, caches,
compilers, dynamic compilation, emulation, operating systems,
performance analysis, runtime code generation, runtime systems,
self-modifying code, instruction-set simulation, threads, tracing,
value-specific optimization.

 maurice van keulen - 
university of twente
 type systems, polymorphy, functional programming, database
specification, object-orientation, semantics of such languages.

gregor kiczales
- xerox parc
 object-oriented programming, reflection, metaobject protocols, open
compilers, efficient compilation of high-level programs.

 david king - glasgow
 expressing graph algorithms in haskell, algorithm design and
correctness, imperative functional programming.

 edgar knapp - 
purdue
 formal methods for concurrent program development, tool support for
program design, retargetable implementation of concurrent programs.

 
todd knoblock - microsoft research
 4d graphics and interactivity, program specializaton, run time
code generation, partial evaluation, high level programming languages,
program analysis and optimization, and type theory.

 dattatraya kulkarni - 
university of toronto
 compiler optimizations, program transformations

 kwangkeun yi - 
korea advanced institute of science and technology
 compile-time program analysis, programming environments,
program analysis tools, safe programming.

 
monica lam - stanford
 compiler optimizations, computer architectures, parallel computing,
 suif.

 leslie lamport - dec src
 tla (the temporal logic of actions),
writing proofs.

 james larus - 
university of wisconsin at madison
 programming languages and compilers, in particular languages and
compilers for parallel machines; design and programming of
shared-memory parallel computers; compiling symbolic languages;
program profiling and tracing; and program executable editing.


 
konstantin l&auml;ufer - loyola university of chicago 
 programming languages and compilers, functional and object-oriented
programming, type systems, type inference, software engineering.

 
john launchbury - oregon graduate institute 
functional programming, functional algorithms, the semantics of lazy
evaluation, incorporating destructive updates in haskell,
partial evaulation, program analysis.

 programming and specification language design and semantics,
formal methods (program specification and verification),
programming methodology, object-oriented programming,
functional programming, distributed computer systems.

 
peter lee - carnegie mellon
semantics-based compiler generation, program analysis and
optimization, ml, compiler support for advanced systems software.


 k. rustan m. leino -
dec src
programming and program design technologies, programming
languages and systems, specification and verification,
program semantics, object-orientation and modularity.

 
mark leone - indiana university
run-time code generation, partial evaluation, compiling functional
programs, program analysis and optimization, type theory.

 xavier leroy -
inria rocquencourt
 type systems, module systems, operational semantics,
implementation of ml, the caml light compiler.

 
michael leuschel - katholieke universiteit leuven
 partial evaluation and partial deduction,
meta-programming and the ground representation,
specialised integrity checking.


raph levien - uc berkeley
 compilers for higher-order languages; analysis of memory access
patterns, closure representations, avoiding the need for garbage
collection.

 sean levy, allen dutoit, eric gardner, eswaran subrahmanian - carnegie mellon
n-dim group, engineering design research center, cmu
object-oriented languages/environments, embeddable languages/toolkits,
support for evolutionary prototyping, user interfaces, collaboration

 
sheng liang - yale
 design and implementation of modern programming  
languages, modular semantics, compiler generation, portable common  
back-ends.



leonid libkin - university of pennsylvania
 functional database query languages, semantics of programming
languages, partial information

 karl lieberherr - 
northeastern university
 adaptive software, adaptive architecture description languages.

 
jim lipton - wesleyan university
 logic programming, type theory, intuitionistic semantics, programming
with relations, categorical logic.

 
bj&ouml;rn lisper - kth, dept. of teleinformatics
 theory for efficient implementation of declarative languages;
data parallel and functional programming; program transformations.

 y. annie liu
- indiana university
 program analyses and transformations for efficiency improvement,
optimizing compilers, language-based interactive systems, algorithm
design, program development methods.

 luc maranget -
inria rocquencourt
 lazy ml: compilation of pattern matching and parallel implementation;
strategies in term rewriting systems. 

 dave mason - waterloo
 compilation of functional programming languages, particularly of
standard ml for systems programming purposes, literate programming and
other aspects of text formatting.

 
florian matthes - hamburg university, germany
 persistent programming environments: extensible syntax, higher-order 
type checking, static and dynamic code optimization, object store interfaces

 bernd mathiske - hamburg university
 language implementation, portable multi-threaded
runtime systems, code generation; distributed persistent languages, code
mobility, thread mobility, autonomous network agents; bidirectional
language interfacing, cross-language exception handling.

 
david mcallester - mit ai laboratory
 automated reasoning and type inference

 erik meijer - utrecht university
 functional programming, semantics directed compiler generation,
constructive algorithmics.

 marjan mernik - 
university of maribor, slovenia
 design and implementation of programming languages, formal language
definition, compiler generators, attribute grammars

 
dale miller - university of pennsylvania
 computational logic, proof theory, design and theory of logic and
functional programming languages, unification of typed lambda-calculi,

lambda prolog.

 robin milner - cambridge
 mathematical models of computation - models and calculi for
concurrent computation; how to present logics to machines; semantics
of high-level programming constructs.

 
john mitchell - stanford
programming language analysis and design, including module
systems, object-oriented programming, type systems, and reasoning
about programs; applications of mathematical logic to programming
languages and automated reasoning; algorithms for static analysis of
programs.

 greg morrisett - cornell
 systems hacking in high-level languages, compilers,
analysis via types, modeling garbage collection, concurrency, threads.

 
christian mossin - diku, university of copenhagen
 type inference for analysis of functional programs.  program
analysis, type systems, logic, lambda calculus and (to some extent)
category theory.

 frank mueller - humboldt-university berlin
 compiler optimizations, concurrent programming, prediction of execution time

 robert muller - 
boston college
 compilers for higher-order languages, program representation, program 
analysis and optimization, extensible parsers.

 uwe nestmann - university of erlangen
 formal semantics, concurrency theory, translation correctness,
pi-calculus.

 
kristian nielsen - diku, university of copenhagen
 deforestation, partial evaluation, supercompilation, program
analysis, implementation of functional programming languages, lazy evaluation.

 oscar nierstrasz - 
university of berne
 semantics of object-based concurrency; software composition languages.

 rishiyur nikhil - dec crl
 parallel computing -- languages and implementations, runtime systems,
architectures.  functional languages and implementations, especially
parallel implementations.

 tobias nipkow - technische universit&auml;t m&uuml;nchen
 automatic and interactive theorem proving, system verification,
rewriting, unification, lambda-calculus, type systems.

 
steve novack - university of california, irvine
 compiling for fine-grain parallelism.

 lars nyland - university of north carolina at chapel hill
 high-level languages for prototyping parallel algorithms.
development of complex parallel algorithms.  transformation of
high-level code to parallel implementations.

 john o'donnell - glasgow
 using functional programming to specify and reason about parallel
systems such as digital circuits and data parallel architectures;
nondeterminism; debugging; functional programming environments.

 peter o'hearn - 
syracuse university
 semantic and logical foundations of imperative computation.

 
bryan o'sullivan - glasgow
 parallel computing, operating systems, compilers, partial
evaluation, functional programming languages, and all sorts of odd
permutations of these topics.

 
james o'toole - mit
 storage systems design for information retrieval and persistent
object applications.


atsushi ohori - kyoto university
 type inference, polymorphic record calculus, compilation, parallelism.

 martin odersky - 
university of karlsruhe
 formal methods for the definition of programming languages and the
design and manipulation of programs. special areas of interests are
program calculi, type systems, semantics of programming languages, and
programming language implementation.

 john ophel - la trobe university, melbourne australia
 polymorphic programming languages, first-class modules.

 mehmet a. orgun - 
macquarie university, sydney
 logic programming, applied temporal logic, dataflow
computation, temporal databases.

 
jens palsberg - mit
 theory and implementation of programming languages.

 didier parigot -
inria rocquencourt
 attribute grammars, the  fnc-2  system.

 algirdas pakstas - 
agder college
 distributed programming, system architect's language aladdin,
integrated compiler development environment gdt/pc ("grammar debugging
tool and parser constuctor").

 krishna palem - new york university
 optimizing compilers, instruction-level parallelism, instruction
scheduling and register allocation, compiling for embedded systems.

 george a. papadopoulos - university of cyprus
 term graph rewriting systems, coordination models,
logic, functional and object-oriented programming.

 larry paulson -
cambridge
 the 
isabelle
theorem prover. formalizing axiomatic set theory.  formalizing induction and
coinduction principles in set theory and higher-order logic.  standard ml.

 
frank pfenning - carnegie mellon
 type theory and its application to language design, in particular
logic- and functional-programming languages.  logic,
automated theorem proving, formal program development, and programming
environments.

 michael philippsen - 
icsi, berkeley
 languages and compilers for parallel and distributed machines.

 
benjamin c. pierce - indiana university
 static type systems, subtyping, bounded quantification, type
inference, lambda-calculus, intersection types, concurrency.

 john plevyak 
- university of illinois, urbana-champaign 
 concurrent object-oriented programming language design and
compilation.  type inference.  structure analysis.  concurrent c++.
the illinois concert
project.

 gordon plotkin - edinburgh
 applications of logic, especially denotational and operational
semantics of programming languages; semantics of type systems, monadic
theories of computation, general proof theory and the semantics of
natural language, particularly type-free intensional logics for
situation theory.

 lori l. pollock - university of delaware
 optimizing compilers for high performance architectures, compiler
phase integration, language and compiler support for cluster
computing, optimizing explicitly parallel programs, parallel
compilers.

 salil pradhan - northeastern university
 adaptive architecture description languages.

 
vaughan pratt - stanford
 semantics of parallel and distributed computing.

 jan f. prins - 
university of north carolina at chapel hill
 high-level programming languages; formal techniques in program
development; parallel algorithms and parallel computation; compilation
of programs for parallel execution.

 
william pugh - university of maryland
algorithms and data structure design and analysis, skip lists,
compilers for massively parallel architectures, integer programming
for array data dependence analysis.

 j. ramanujam  - 
louisiana state university
 parallelizing compilers, high-performance computing, programming
languages, computer architecture, programming environments.

 norman ramsey - university
of virginia
 machine-code tools, retargetability, literate programming, and debugging. 

 
chris reade - brunel university
 functional programming, functional i/o, theory of programming
languages, type theory, and formal methods.

 
jonathan rees - mit
 scheme, user-defined data types, lexically scoped macros,
modules, categories, monads, scheme-based operating systems.

 
jakob rehof - diku, university of copenhagen
 type systems; type inference;
logical and computational aspects of type systems;
type systems in program analysis.

 alastair reid - 
glasgow
 use and implementation of functional languages (graphics, garbage
collection, user interfaces, debugging). formal program development
(transformation and implementation of algebraic specifications of
abstract data types).

 john reif - 
duke
 parallel algorithms, compilers for parallel machines, 
formal methods for synthesis of parallel algorithms.

 
mark reinhold - nec research institute
 garbage collection, compilation techniques, type systems,
semantics, and the visualization and analysis of program performance.

 didier remy - 
inria rocquencourt
 type systems; object oriented programming.

 
thomas reps - university of wisconsin at madison
 language-based programming environments; program slicing,
differencing, and merging; interprocedural dataflow analysis; and
incremental algorithms.

 
jon g. riecke - bell laboratories
 theory of programming languages: operational and denotational
semantics, logics of programs, formal methods, type systems and
inference, abstraction.  higher-order languages with state,
control, polymorphism.

 kristoffer rose - 
diku, university of copenhagen 
 semantics, lambda calculus, rewrite systems, explicit
substitution, abstract machines, sharing, graph reduction.

 
guido van rossum - cwi (centre for mathemathics and computer science), amsterdam
 object-oriented languages, scripting languages, prototyping
languages; designed and implemented python, co-implemented abc

 
francois rouaix - inria rocquencourt
 extensions of the ml type system, overloading, object-oriented
programming, abstract types, type operators, modularity.

 
erik ruf - microsoft research
design, implementation, and optimization of programming languages, and
the use of program analysis to support program understanding and
transformation.

 barbara ryder - rutgers
 compile-time program analyses and software tools for
parallel/sequential programming environments.  chair of acm sigplan.


amr sabry - university of oregon
 compilers, data flow analysis, abstract interpretation,
programming language calculi, and semantic foundations. 


david sands - diku, university of copenhagen
 programming language semantics, and their applications to
abstract interpretation and related semantics based analysis
techniques.

don sannella - edinburgh lfcs
 formal development of modular software from specifications.
modularization mechanisms.  machine-assisted proof.  semantics.

patrick sansom - glasgow
 implementation and runtime support of pure functional languages,
including compiler analysis and optimisation, garbage collection, and
profiling.

 joao a. saraiva - 
universidade do minho
 compilers, attribute grammars, parallel compilation.

 
andre scedrov - university of pennsylvania
 mathematical logic, mathematical aspects of programming
structures.

 bill scherlis - carnegie mellon
 semantics-based program analysis and manipulation, information structures.

 
david schmidt - kansas state
 denotational semantics and intuitionistic type theory.

 michael i. schwartzbach - 
brics, university of aarhus
 programming languages: type systems, type inference, 
static program analysis, data types, language design, implementation.

 cotton seed - mit and the motorola cambridge research center
 computer architecture, compilers for mpps, dataflow and implicitly
parallel languages, program analysis, auto-parallelization.


 
peter sestoft - royal veterinary and agricultural university, denmark
 functional programming languages and their implementation, program
analysis and transformation, and partial evaluation.

 
zhong shao  - yale
efficient compilation of high-level languages, interaction of
languages and compilers with modern architectures, programming
environments, and formal methods.

 
tim sheard - oregon graduate institute
 compile-time reflection, type parametric programming, 
program transformation, and algebraic programming. 

 
olin shivers - mit
 advanced programming languages 
(such as 
scheme
and ml), systems, and personal user interfaces.

 
duncan sinclair - university of strathclyde
 functional programming and in particular, how hci research could
be used to make creation of graphical user interfaces for functional
programs easier.

 satnam singh - glasgow
 using functional languages for hardware specification, synthesis
and analysis.

 anthony sloane - 
james cook university
 generation of programming language implementations, tools and environments
from high-level specifications.

 scott f. smith - 
johns hopkins
 operational semantics of imperative, object-oriented, and concurrent
programming languages.  operational equivalence of programs, logics of
programs.

 
ellen spertus - mit
 value dependence graph ir, code generation and register allocation for
superscalar/superpipelined architectures.

 
vugranam c. sreedhar - mcgill university
 data flow analysis, compiler optimization, instruction level
parallelism, multithreaded architecture, optimizing explicit parallel
programs, memory consistency models.

 
bjarne steensgaard - microsoft research
static program analysis, program transformation, value dependence
graph ir, data flow analyses, store splitting, partial evaluation.

 
patrick steyaert - brussels free university
 reflection and object-oriented programming languages and
systems; user interfaces, user interface building, application building.

 
allen stoughton - kansas state
 programming language semantics, full abstraction, models of the applied
typed lambda calculus pcf, logical relations and lambda definability.

 
david stoutamire - international computer science institute
 compiling for distribution, compiling for locality,
garbage collection, sather.

 dave wj stringer-calvert -
university of york, uk
 compiler verification and the 
pvs verification system.

 walid taha - 
oregon graduate institute
 transformational programming systems, functional
programming, object-oriented programming, software engineering and compilers.

 
carolyn talcott - stanford
 formal reasoning, semantics of programming languages, open distributed
systems, reflection. 

 domenico talia - 
isi-cnr, rende, italy
 parallel computing architectures, concurrent programming languages,
distributed systems.

 bob tennent - edinburgh
 semantics and design of programming languages and logics.

 george k. thiruvathukal - 
lake shore labs; 
metromail corp; illinois institute of technology 
  object oriented languages, enhanced actors programming model, virtual 
machines, parallel and distributed programming languages, class 
libraries and typing systems.

 
stephen thomas - university of nottingham
 use and implementation of functional languages;  the design of
abstract architectures for functional languages, particularly the tim.

 
frank tip - ibm t.j. watson
 program analysis, program transformation/restructuring, program slicing,
optimizations of object-oriented programs. 

 
mario tokoro - keio university
 object-oriented computing, concurrent programming,
distributed and open systems, and cooperative problem solving.

 andrew tolmach - portland state university
functional language implementation and tools.

 
david toman - kansas state
 implementation of prolog and lp languages, semantics of lp languages,
semantics and expressivity of database query languages.

 david n. turner - 
glasgow
 type systems, type-based program analysis, functional programming,
pi-calculus, implementation of concurrent calculi.

 
chau-wen tseng - stanford
 compiler support for scalable parallel architectures,
 suif.

 
franklyn turbak - wellesley college
  programming language semantics and implementation,
deforestation, type-based compilation, visual languages, robot languages.

 mark vandevoorde - mit
 optimizing programs with specifications

 eelco visser - 
university of amsterdam
 formalisms and tools for language design and prototyping: 
syntax definition, type systems, documentation tools;
grammar formalisms, parsing, algebraic specification, asf+sdf.

 german vidal - 
technical university of valencia, spain
 integration of functional and logic programming languages, 
   abstract interpretation, 
   sematics-based program transformation.

 
philip wadler - glasgow
 linear logic, monads, call by need, type classes, parametricity,
deforestation, strictness analysis, data abstraction, and garbage
collection.

 william m. waite - 
university of colorado at boulder
 automation of compiler construction

 
mitchell wand - northeastern
 semantics, compiler correctness, type inference.

 david watt - 
university of glasgow
 action semantics, language design, semantics-directed compiler
generation, rapid prototyping.

 
martin weichert - chalmers
 concurrency

 
william e. weihl - mit
 parallel and distributed systems, programming languages,
compilers, operating systems, and computer architecture.

 pierre weis - inria
 design and implementation of functional
programming languages, in particular their compilation and type
systems, and in particular the caml language.

 
daniel weise - microsoft research
 using advanced representations and analysis to build better compilers
and programming tools.  still seeking the holy grail of abstraction
without cost even though i don't explicitly hack partial evaluation
anymore.

 
morten welinder - diku, university of copenhagen
 partial evaluation of standard ml, binding-time analysis,
hand-writing program generator generators.

 david b. whalley - 
florida state university
 compiler optimizations, support tools for performance evaluation and
diagnosing compiler errors, predicting execution time.

 
paul r. wilson - university of texas at austin
 memory management (garbage collection, allocators), persistence (texas
p-store), extensible languages and compilers (rscheme), memory hierarchies,
free software.

 
russel winder - university college london
 languages and environments for developing parallel object-oriented
systems; development of information systems, including processes,
techniques, tools, environments, and philosophical aspects.

 
jeannette wing - carnegie mellon
 formal specifications, concurrent and distributed systems,
programming languages, programming methodology, and search and
retrieval in the information superhighway.

 michael winikoff - 
melbourne university
 logic programming, linear logic, 
lygon,
functional programming.

 michael wolfe -
the portland group
 compiler optimizations, compiling for parallel machines

 david wolfram - 
the australian national university
 semantics of declarative languages; higher-order languages and
meta-theories; semantics of concurrency in object-based languages; 
effectiveness of implementations.

 
andrew wright - nec research institute
 soft typing, type systems, compilation techniques, scheme, ml.

 limsoon wong
 - university of pennsylvania. institute of systems science, singapore.
 interoperable systems, multimedia systems, programming
methodologies, query languages, and programming language semantics.

 
gao xiaocheng - beijing university of aero and astro (buaa)
 constraint hierarchy, object oriented languages, linux.

 
takashi yamanoue - kyushu institute of technology
 visual programming, parallel programming, compiler-compilers,
attributed grammars.

 katherine yelick - 
u.c. berkeley
 programming languages and runtime support for parallel machines;
optimizing explicitly parallel programs.

 
akinori yonezawa - university of tokyo
 parallel computation models, programming
languages, object-oriented programming, and natural language processing.

 guo-qiang zhang - 
university of georgia at athens
 domain theory, semantics of programming languages, 
applied logic, nonmonotonic reasoning.

 
benjamin zorn - university of colorado at boulder
 programming language design and implementation with specific
emphasis on language runtime systems and the ways in which they can
support efficient program execution and ease of programming.


 back to 
the language research page

additions and corrections are welcome!
mark leone (
mleone@cs.cmu.edu)

researchers in programming languages and compilers
researchers in programming languages and compilers
researchers in programming languages and compilers
researchers in programming languages and compilers
researchers in programming languages and compilers
researchers in programming languages and compilers
researchers in programming languages and compilers
researchers in programming languages and compilers
researchers in programming languages and compilers
researchers in programming languages and compilers