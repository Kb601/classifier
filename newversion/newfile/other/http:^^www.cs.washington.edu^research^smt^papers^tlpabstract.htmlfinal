"converting thread-level parallelism to instruction-level parallelism via simultaneous multithreading"




converting thread-level parallelism to instruction-level parallelism via simultaneous multithreading



jack l. lo,
susan j. eggers, 
joel s. emer, 
henry m. levy,
rebecca l. stamm, and
dean m. tullsen


to achieve high performance, contemporary computer systems rely on 
two forms of parallelism: instruction-level parallelism (ilp) and
thread-level parallelism (tlp).  wide-issue superscalar processors 
exploit ilp by executing multiple instruction from a signel program
in a single cycle.  multiprocessors (mp) exploit tlp by executing different
threads in parallel on different processors.  unfortunately, both parallel-
processing styles statically partition processor resources, thus preventing
them from adapting to dynamically-changing levels of tlp and ilp in a 
program.  with insufficient tlp, processors in an mp will be idle; with 
insufficient ilp, multiple-issue hardware on a superscalar is wasted.

this paper explores parallel processing on an alternative architecture, 
simultaneous multithreading (smt), which allows multiple threads
to compete for and share all of the processor's resources every cycle.
the most compelling reason for running parallel applications on an smt
processor is its ability to use thread-level parallelism and instruction-
level parallelism interchangeably.  by permitting multiple threads to share
the processor's functional units simultaneously, the processor can use both
ilp and tlp to tolerate variations in parallelism.  when a program has only
a single thread, all of the smt processor's resources can be dedicated to 
that thread; when more tlp exists, this parallelism can compensate for a
lack of per-thread ilp.

in this work, we examine two alternative on-chip parallel architectures enabled
by the greatly-increased chip densities expected in the near future.  we
compare smt and small-scale, on-chip multiprocessors (mp) in their ability
to exploit both ilp and tlp.  first, we identify the hardware bottlenecks
that prevent multiprocessors from efficiently exploiting ilp. then, we 
show that because of its dynamic resource sharing, smt avoids these
inefficiencies and benefits from being able to run more threads on a single
processor.  the use of tlp is especially advantageous when per-thread ilp
is limited.  the ease of adding additional thread contexts on an smt (relative
to addition additional processors on an mp) allows simultaneous multithreading
to expose more parallelism, further increasing processor utilization and
attaining a 52% average speedup (versus a four-processor, single-chip 
multiprocessor with comparable execution resources).

we also assess how the memory hierarchy is affected by the use of additional
thread-level parallelism. we show that inter-thread interference and the
increased memory requirements have small impacts on total program performance
and do not inhibit significant program speedups.




submitted for publication, july 1996.

to get the postscript file, click
here.



jlo@cs.washington.edu  




 `` converting thread-level parallelism to instruction-level parallelism via person person ''
 `` converting thread-level parallelism to instruction-level parallelism via person person ''
 `` converting thread-level parallelism to instruction-level parallelism via person person ''
 `` converting thread-level parallelism to instruction-level parallelism via person person ''
 `` converting thread-level parallelism to instruction-level parallelism via person person ''
 `` converting thread-level parallelism to instruction-level parallelism via person person ''
 `` converting thread-level parallelism to instruction-level parallelism via person person ''
 `` converting thread-level parallelism to instruction-level parallelism via person person ''
 `` converting thread-level parallelism to instruction-level parallelism via person person ''
 `` converting thread-level parallelism to instruction-level parallelism via person person ''