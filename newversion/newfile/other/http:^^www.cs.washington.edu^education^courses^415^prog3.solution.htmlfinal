cse 415  prog. assignment 3 sample solution




;first is the output from the listener(this was done on a mac).

;welcome to macintosh common lisp version 3.0!
;? 
;;loading #p"macintosh hd:desktop folder:trig_code.lisp"...
;? (demonstration idtree features_20)
;familiarization heuristic
;score  5  identity# 5 
;simplification heuristic
;score  0  identity# 4 
;score  0  identity# 1 
;score  0  identity# 2 
;score  0  identity# 10 
;score  0  identity# 6 
;score  -2  identity# (5) 
;score  0  identity# 3 
;score  2  identity# (14) 
;score  0  identity# 11 
;score  -3  identity# (8) 
;score  0  identity# 9 
;score  0  identity# 15 
;score  0  identity# 12 
;score  0  identity# 13 
;score  0  identity# 7 
;best score
;score  2  identity# (14) 
;effectiveness heuristic
;score  0  identity# 4 
;score  0  identity# 1 
;score  0  identity# 2 
;score  0  identity# 10 
;score  0  identity# 6 
;score  8  identity# 5 
;score  0  identity# 3 
;score  20  identity# 14 
;score  0  identity# 11 
;score  8  identity# 8 
;score  0  identity# 9 
;score  0  identity# 15 
;score  0  identity# 12 
;score  0  identity# 13 
;score  0  identity# 7 
;best score
;score  20  identity# 14 
;nil
;? (demonstration idtree features_28)
;familiarization heuristic
;score  5  identity# 5 
;simplification heuristic
;score  0  identity# 4 
;score  0  identity# 1 
;score  0  identity# 2 
;score  0  identity# 10 
;score  0  identity# 6 
;score  4  identity# (5) 
;score  0  identity# 3 
;score  0  identity# 14 
;score  0  identity# 11 
;score  -3  identity# (8) 
;score  -3  identity# (9) 
;score  0  identity# 15 
;score  0  identity# 12 
;score  0  identity# 13 
;score  0  identity# 7 
;best score
;score  4  identity# (5) 
;effectiveness heuristic
;score  0  identity# 4 
;score  0  identity# 1 
;score  0  identity# 2 
;score  0  identity# 10 
;score  0  identity# 6 
;score  32  identity# 5 
;score  0  identity# 3 
;score  8  identity# 14 
;score  0  identity# 11 
;score  8  identity# 8 
;score  4  identity# 9 
;score  0  identity# 15 
;score  0  identity# 12 
;score  0  identity# 13 
;score  0  identity# 7 
;best score
;score  32  identity# 5 
;nil
;? (demonstration idtree features_38)
;familiarization heuristic
;score  35  identity# 4 
;simplification heuristic
;score  1  identity# (4) 
;score  0  identity# 1 
;score  0  identity# 2 
;score  0  identity# 10 
;score  0  identity# 6 
;score  0  identity# 5 
;score  0  identity# 3 
;score  0  identity# 14 
;score  0  identity# 11 
;score  0  identity# 8 
;score  0  identity# 9 
;score  0  identity# 15 
;score  0  identity# 12 
;score  0  identity# 13 
;score  0  identity# 7 
;best score
;score  1  identity# (4) 
;effectiveness heuristic
;score  8  identity# 4 
;score  0  identity# 1 
;score  0  identity# 2 
;score  0  identity# 10 
;score  0  identity# 6 
;score  0  identity# 5 
;score  0  identity# 3 
;score  0  identity# 14 
;score  0  identity# 11 
;score  0  identity# 8 
;score  0  identity# 9 
;score  0  identity# 15 
;score  0  identity# 12 
;score  0  identity# 13 
;score  0  identity# 7 
;best score
;score  8  identity# 4 
;nil
;? 

;next is my code:
;
;  program #3
;  cse 415 - holden
;
; to test your own id - see the //// box below the data structure.


;  this program makes a heuristically guided choice of what identity to use 
;  in proving a new trig identity.  the first piece of code sets up the data 
;  structure consisting of all the id's which are already known to be true.  
;  each id is a sublist off the main list consisting of four items:
; 1) features of left side
; 2) features of right side
; 3) identity number
; 4) familiarity score (taken from copy packet 1)
;
; each feature list consists of an atom followed by it's simplification score
; for that identity.  after the first item's f-score, the next atom, and so on.

(setq idtree `(((bf 1) (1 -1) 4 35)
               ((a -1) (bc 1) 1 17)
               ((ad 1) (b -1) 2 17)
               ((ac+b 3 ac -1 b -3) (f -3) 10 8)
               ((cd 1) (1 -1) 6 6)
               ((aa+bb 4 aa -2 bb -2) (1 -4) 5 5)
               ((ae 1) (1 -1) 3 5)
               ((cc+1 2 cc -2 1 -4) (ff -2) 14 4)
               ((a+bd 3 a -3 bd -1) (e -3) 11 2)
               ((aa+abd 5 aa -3 abd -1) (1 -5) 8 1)
               ((abc+bb 5 abc -1 bb -3) (1 -5) 9 1)
               ((dd+1 2 dd -2 1 -4) (ee -2) 15 -2)
               ((bc+bd 4 bc -2 bd -2) (e -4) 12 -3)
               ((ac+ad 4 ac -2 ad -2) (f -4) 13 -3)
               ((abc+abd 6 abc -2 abd -2) (1 -6) 7 -5)
              )
 
     )

; next is the data structure for each identity to be tested.  for each identity,
; all features are in a single list in the following structure:
; first is the feature, followed by an integer which = the number of symbols in
; the atom.  the third element is an integer which indicates where the given 
; feature is located in the equation:
; 1 = feature is on the left side only
; 2 = feature is on both sides 
; 3 = feature is on the right side only
; the sequence repeats itself for each feature.  the features are listed in 
; sequential order by where they are located.  in other words, features which 
; are on the left side only are first, then those on both sides, and then those
; on the right side only.


(setq features_20 '(aa+aacc 7 1 cc+1 4 1 aacc 4 1 aa 2  1 cc 2 2))
(setq features_28 '(aa+bb 5 1 aa 2 1 bb 2 2 bbff 4 3 ff 2 3))
(setq features_38 '(af+bf 5 1 a+b 3 1 af 2 1 bf 2 1 c+1 3 3))

;/////////////////////////////////////////////////////////////////////////////
; to test your own id, first put it in standard form. next, make a list of the 
; features which are in the id on either side.  next, order them according to 
; descending weight by the number of symbols.  then, each feature should be 
; followed by 2 numbers according to the description above.  finally, do any 
; reordering necessary to ensure that the features are in order according to 
; their third element.  ie - the features on the left side only(1) followed
; by those on both sides(2) followed by those only on the right side(3).  to
; test the id, type (demonstration idtree your_id's_feature_list).  the program
; will then demonstrate all 3 heuristics.  you can use the 3 listed above this
; box as examples on how to do the conversion.
;/////////////////////////////////////////////////////////////////////////////


;==============================================================================
;
;  output functions
;==============================================================================

;"print_cons_cell" takes, as an argument, a list which has already been tested 
; for nil and end_of_list.  it prints out the first set of values, tests for the
; end of the list, and then recursively calls itself if not at the end.  the 
; format t statement is used to make pretty output on the terminal.  each 
; heuristic will put its output in the form of a list of cons cells with 
; end_of_list as the last element in order to use this function.

(defun print_cons_list (list)
  (format t "score  ~s  identity# ~s ~%" (car (car list)) (cdr (car list)))
  (cond ((equal (second list) 'end_of_list) nil)
        ((equal 1 1) (print_cons_list (cdr list))))
)

;"print_output" takes a given heuristics output(a cons cell list), checks for an
; empty list, and then calls print_cons_list to do its output.

(defun print_output (list)
  (cond ((equal list nil) nil)
        ((equal list 'end_of_list) 'no_solution)
        ((equal 1 1) (print_cons_list list)))
)

;"best_score" scans through a list of cons cells comparing each cons cell's 
; left child.  by using > max_score (car (first list))) 
             (equal max_score (car (first list))))
         (best_score (cdr list) max_score))
        ((

 cse 415 prog . assignment 3 person person
 cse 415 prog . assignment 3 person person
 cse 415 prog . assignment 3 person person
 cse 415 prog . assignment 3 person person
 cse 415 prog . assignment 3 person person
 cse 415 prog . assignment 3 person person
 cse 415 prog . assignment 3 person person
 cse 415 prog . assignment 3 person person
 cse 415 prog . assignment 3 person person
 cse 415 prog . assignment 3 person person