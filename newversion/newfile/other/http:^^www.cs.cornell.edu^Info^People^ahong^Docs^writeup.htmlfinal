regular language to sql query translation










translation of regular questions into sql constructs



com s 674 final project report - spring 1996 
alfred hong
may 1, 1996





table of contents 

problem description 
general approach 
results and evaluation 
discussion, conclusion, and future/a>
references






problem description

	web sites today that provide a query front-end to a backend database 
	are done mostly via keyword or categorical search forms.  these 
	search parameters are preselected and usually "inhuman."  since the
	query parameters are preselected, the answers are fixed and static 
	to the user.  replacing these fixed query forms with a natural 
	language query front-end could make things more human, more natural, 
	and more flexible.  a "middleware" mechanism that converts a natural 
	language question into the backend database language to perform the 
	user's query request might do the job.  since relational databases 
	are very popular, sql will be the target database language for 
	conversion. 

-->table of contents 





general approach

	the approach in general involves: 

	
	identifying a target domain  for testing of 
		concepts, 
	researching possible techniques for dealing 
		with the problem,
	implementation using questions the author came up with,
	testing out implementations, and
	refinement and retesting.
	 

	

	identifying target domain 

	natural language processing is a difficult subject.  to tackle the 
	focus of this project, a specific domain is chosen for ideas and 
	code-testing.  the domain of querying for flight schedules is thus 
	chosen.  

	using sample schedule information from usair's flight schedule 
	database, the following relational database table definition and 
	record shows the type of information that is dealt with.  

	
	flts( tocity, fromcity, begindate, enddate, leavetime, arrivetime, 
	flightnum, frequency, stops, stopcities, meals, fare ) 

	( "san francisco, ca", ithaca, ny", "052396", "062296", "635a", 
	"1159a", "e5361/63", "x7", 1, "phl", "b", 524 )
	 

	
	with the domain specified, certain assumptions are made to simplify 
	the task of natural language question to sql construct translation: 
	

	
	focus on simple queries:  user's usually do not ask 
		complex sql queries that involve not exists or groupings 
		for instance
	time and dates: these need special treatment because of the 
		variety and complexity of formats used
	query against one database table only: dealing with 
		multiple tables is a complex task because of ambiguity 
		resolution difficulties with table joins
	punctuations: not dealt with
	one sentence questions only
	

	

	techniques researched 

	several possible concepts/techniques to tackle the problem were 
	looked at: 

	
	wh-, gap, and semantic features;
	bottom-up chart-parsing with semantic features;
	procedural semantics and question answering, conversational agents;
	information retrieval concepts; and
	template matching.
	

	

	of these techniques, although some tests were initially done with 
	using wh- and gap features (not with flight schedules), the extra 
	wh- and gap features are really not necessary for the problem.  simple
	bottom-up chart-parsing with semantic features suffice.  

	the idea of using some combination of question answering, 
	conversational agents, information retrieval concepts, and template 
	matching came about from the realization that the number of synonyms 
	and phrasings possible for asking for a flight schedule is actually 
	quite diverse, requiring a rather large lexicon for a small domain. 

	

-->table of contents 





results and evaluation

bottom-up chart-parsing with semantic features

because of the nice structured format of sql queries, flight schedule 
questions can be directly mapped to that of parts of sql queries.  as shown in 
table 1, for san francisco can be mapped to the where 
destcity = "san francisco" construct, and for may 28 can be mapped 
to the where departdate = "0528" construct.  


  table 1. translation mapping for the sentence what flights 
	are available for san francisco from ithaca for may 28?
  sentencesql
  what flights are availableselect flights
  from schedules
  for san franciscowhere destcity = "san francisco" and
  from ithacadepartcity = "ithaca" and
  for may 28departdate = "0528"
 

the following is the result from parsing the sentence "what are the departure
times for houston tomorrow":  


s176:&lt;s(((select(((time ?v18) ?v25 depart) 
	((tomorrow ?v18) ?v25 iah)))) (1 wh-pro116) 
	(2 vp175))&gt; from 0 to 8 
 

        sample questions for testing were solicited from users given that they 
        need to purchase a ticket to san francisco tomorrow from ithaca.  the 
        following are example questions.  

        
         1. what are the available arrival times for miami for tomorrow? 
         2. what are the departure times for houston for tomorrow? 
         3. how many stops are there to san francisco for flight 400? 
         4. when does flight e5361 arrive in orlando today? 
         5. what is the cheapest flight available to san francisco tomorrow? 
                
         6. can you book me the cheapest flight i can take to san francisco
                tomorrow? 
         7. do i need to stay a saturday night to get the lowest fares? 
         8. how many flights do you have available going to san francisco 
                tomorrow? 
         9. can you check tomorrow's flight schedule to san francisco for me? 
                
        10. i need to fly to san francisco tomorrow.  is there any flights 
                available? 
         

        question types 1-5 can be parsed, but not the others for reasons 
	mainly of not anticipating certain words and different sentential 
	structures. for results, see the results 
	documentation and grammar+lexicon code.  

	as a note, questions 5 and 6 involve the realization that the "cheap" 
	concept means a select min(fare) operation is needed.  question 7 is 
	a yes/no type question.  question 8 involves a count operation, and 
	question 10 has 2 sentences that violates the 
	defined assumptions.  

question answering + conversational agents + information retrieval + 
template matching

the results of the bottom-up chart-parsing method could be improved with 
further refinement as non-anticipated sentential constructs are discovered. 
this is not ideal, however, which motivates the search for other means of 
tackling the problem. 

questions are often asked in bits and pieces; this is quite true for querying 
flight schedules.  this requires the flight schedule answering system to be 
aware of what has been asked in a session, then results can be further refined 
by the user with several questions.  viewed in this way, multiple sentences 
would not be a major problem since it is allowed.  

even though the number of synonyms required are quite large, a lexicon need to 
exhaustively cover all possibilities that the user may present to the system. 
for example, "flight", "flight schedule", "schedule", "reservation" refer to 
the same thing; other inferences are possible through other combinations of 
words with helper words and different word arrangements.  for instance, "to go 
to miami" in the context of flight schedules implies flying to miami.  to 
parse all possible combinations of questions also require a large number of 
rules.  

the sentences i need to fly to san francisco tomorrow.  is there any flight 
available? and the sentence is there any flight available to san 
francisco tomorrow? are the same queries.  notice, however, that key 
phrases are the same: to san francisco, tomorrow, and any 
flight.  the idea is that if these can be identified, then maybe sentence 
boundaries and syntactic structure are not as important, and the lexicon  
need to concentrate only on key words/phrases.  


fig. 1. interface of flight schedule query application


to test the idea out, a tcl/tk application has been written (fig. 1).  

as shown, there are several parts to the interface.  the user inputs 
queries, clicks on the analyze button, and key words/phrases are 
extracted from the input and stored.  extraction of key concepts is done by 
regular expression matching with a built-in lexicon that ignores irrelevant 
words (akin to stop-lists in information extraction) in the context of 
flight schedule query.  in the figure, the history text box shows that the 
concepts flights, atlanta, and tomorrow are extracted 
from the q1 sentence which is shown directly under the q1 line.  (actually, 
the extraction of to atlanta instead of just atlanta would be 
better for indicating atlanta as a destination city.)  q2 is a 
followup question that requests for flights to houston instead.  
the extracted information then is used to do template matching to sql 
syntax (this has not been implemented yet). 

the user can input successively to refine or change their queries until the 
reset button is chosen to restart a new session.  using tcl/tk also 
makes it easy to interface to a web page with a backend relational database 
engine[2].  

evaluation of this application can not be done since it has not been 
completely developed yet.  however, the pattern matching and key concept 
extraction component certainly show promise at this point.  

thus with a combination of question answering, conversational agents, 
information retrieval, and template matching techniques, maybe the flight 
schedule query problem can be dealt with feasibly.  

-->table of contents 





discussion, conclusion, and future 

there are other problems that were overlooked.  what if the user mistype 
their questions?  what if the user does not follow correct english grammar 
rules?  in this case, current forms-based methods of flight-schedule query 
on the web are definitely at an advantage.  then again, these web sites are 
limited and return relatively large sets of data that require further 
interpretation on the part of the user.  

in general, natural language processing is a difficult subject.  even with 
a specific domain chosen, problems are abound.  in terms of the bottom-up 
chart-parser method, if


a lexicon that deals with all possible flight schedule scenarios is used; 
dates, times, and flight numbers are given special identification 
	parameters; 
city names with multiple words are given special treatment; and
grammar rules are refined by repeated testing; 
 

then a full-proof flight-schedule query system could be possible.  

however, even if the sentences could be parsed, the parsed result can not 
be used readily; integrating such a system with a web front-end is not 
straightforward because of the resident lisp back-end used for the 
chart-parsing.  even if it is done, it is rather resource intensive.  this 
led to researching other possible ways to make it more feasible.  hopefully 
the alternative method embodied by the tcl/tk application as discussed in 
the previous section will prove to be promising.  

future work


interface lisp and the grammar+lexicon to a web page,
continue work on tcl/tk application over the summer.




-->table of contents 





references 


[1]
	allen, james.  natural language understanding.  2nd ed.  
	benjamin/cummings, redwood city, ca.  1995.

[2]
	almasi, g., et al.  "web* -- a technology to make information 
	available on the web."  in proceedings of the fourth workshop on 
	enabling technologies: infrastructure for collaborative enterprises 
	(wet ice '95) (apr. 20-22, 1995, berkeley springs, west virginia). 
	ieee computer society press, los alamitos, ca, pp. 147-153.


-->table of contents 







regular language to sql query translation
regular language to sql query translation
regular language to sql query translation
regular language to sql query translation
regular language to sql query translation
regular language to sql query translation
regular language to sql query translation
regular language to sql query translation
regular language to sql query translation
regular language to sql query translation