cs617 home page



frontiers of parallel systems 
thorsten von eicken
fall, 1994


location: 111 upson, mwf 11:05am-12:00pm

office hours: mon 12:15pm-1:15pm, thu 2pm-3pm




course description

parallel machines are here to stay. this is underscored by the fact that 
all system manufacturers offer multiprocessors at the top of their product 
line. however, the debate on how the parallel machines of the future will 
look like has heated-up considerably in the past few months: the federal 
spending cuts are on their way to eradicate the performance-at-any-price 
massively parallel processor (mpp) manufacturers. competitors having bet 
on glorified workstation farms are smiling: while their machines cannot 
offer the same level of performance or ease of use, their business has not 
suffered as much because these machines are more price competitive and can 
leverage the latest microprocessor developments more quickly. at the core 
of the technological debate lie a large number of systems issues: how to 
integrate a large number of off-the-shelf processors into a cost-effective 
system which can be easily programmed in high-level parallel programming 
languages and which can host a varied application workload.

this course is not about how to program parallel machines (although some 
of that will be the topic of the first few weeks). parallel algorithms, 
languages and architectures have matured considerably over the last few 
years to the point where parallel machines are almost usable, if only the 
system support were adequate to allow general-purpose use. this course 
will focus on the architecture and operating system aspects required to 
support features taken for granted in sequential computing such as 
portable parallel programs, powerful debuggers, multi-user machine access, 
virtual memory, and fast i/o.

the first part of the course will examine two complete parallel systems: 
the cm-5 with split-c and an atm network of workstations with cc++. using 
a ``vertical'' approach we will study the interactions between algorithmic 
models, languages, associated execution models, operating systems, 
architectures and hardware implementations, focussing on the support 
required for each of these layers. the second part of the course will 
focus on specific topics and slice ``horizontally'' across systems, 
selecting a few key issues for an analysis of the design alternatives. an 
in-depth study of the ksr and the dash will provide some shared-memory 
contrast to the course.


course materials

course format

lecture notes
       

problem sets
       

term projects



        


cs617 home page
cs617 home page
cs617 home page
cs617 home page
cs617 home page
cs617 home page
cs617 home page
cs617 home page
cs617 home page
cs617 home page