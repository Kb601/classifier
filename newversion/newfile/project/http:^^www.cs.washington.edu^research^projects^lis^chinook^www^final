the chinook project 
   
 




the chinook project 







/shinook/, n. 


&quot;chinook salmon&quot; a large salmon, oncorhynchus tshawytscha,
of the n. pacific. 

amer. ind. name of a tribe 

a warm dry wind which blows east of the rocky mountains. 

a warm wet southerly wind west of the rocky mountains. 

a rare american sled dog


a hardware-software co-synthesis cad tool
for real-time embedded systems. 



chinook is a hardware-software co-synthesis cad
tool for embedded systems. it is designed for control dominated, reactive
systems under timing constraints. chinook maps a behavioral description
to the user's target architecture, by filling in all the details needed
to build the complete system. this enables designers to make informed design
decisions at the high level early in the design cycle, rather than reiterate
after having worked out all the low level details. retargetability will
not only make the designs more maintainable but also enables the designer
to take advantage of new technologies, instead of being tied down by legacy
code.

chinook is currently under active development in a new generation. currently
we are actively working on software architecture synthesis, interprocessor
communication synthesis, and efficient and accurate co-simulation. more
details will become available shortly.

chinook is characterized as follows. it meets timing constraints, rather
than trying to maximize average performance or utilization. it assumes
manual partitioning, because we believe the issues are too intricate
and sometimes not even technical. we want the designers to evaluate different
architectures, rather than forcing a single fixed processor-bus-asic
architecture. we synthesize software architectures rather than rely on
off the shelf real-time kernels because they discourage retargeting. 

the first version of the chinook co-synthesis tool was operational in
november 1993. ``version roe'' was shown
at dac (design automation conference) in san diego in june 1994. its main
features include automatic connection between the processor and peripheral
devices, generation of sequential code from a concurrent description, and
synthesizing device drivers. its inputs verilog and outputs a hardware
netlist needed to connect the hardware components together and the software
program to run on the processor. the main topics include the interfacing
problem between hardware and software components, scheduling under timing
constraints, and partitioning of functionality.

an improved version was demonstrated at the nato summer school on hw/sw
codedesign, in tremezzo, italy june 19-30, 1995. it incorporated several
more interface synthesis techniques, including memory-mapped i/o, more
efficient code generation, and a new simulator. 

chinookers

faculty


gaetano borriello



graduate students 


pai chou 

ross ortega


ken hines


ian macduff 


recent ph.d.'s


elizabeth a. walkup


scott hauck,


henrik hulgaard



staff


larry mcmurchie



list of papers

chinook sponsors


arpa under contract n00014-j-91-4041 

national science foundation under grant mip-8858782 

national science graduate fellowship (walkup) 

patricia roberts harris fellowship (ortega) 

gte graduate fellowship (chou) 


embedded links

 department of computer science and engineering university
of washington 
last updated tue nov 12 06:34:47 pdt 1996 





the chinook project 
the chinook project 
the chinook project 
the chinook project 
the chinook project 
the chinook project 
the chinook project 
the chinook project 
the chinook project 
the chinook project