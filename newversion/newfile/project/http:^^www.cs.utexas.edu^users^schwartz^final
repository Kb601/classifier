ssgrg title page




welcome to the home page of the software systems generator 
research group! 
software system generators are tools for assembling complex software from 
interchangeable, reusable components. we have developed genvoca, a 
domain-independent model of software construction that defines systems as algebraic 
equations, where terms are components. genvoca has been successfully applied to 
many domains including database management systems, avionics, and data structures. 
our results have demonstrated genvoca generators can substantially improve 
productivity and application run-time performance. 
if this is your first visit and you have questions on what is the best place to start, take a look at getting started. 



research group members 
getting started 
project index 
publications 
software distributions 



related web pages:  utcs general 


 members 
don batory professor
angela dappert ph.d. student
guillermo jimenez-perezph.d. student
jeff thomasph.d. student
lance tokuda ph.d. student
yannis smaragdakis ph.d. student
k.t shepherdresearch associate

former members 
and graduation datesdinesh dasph.d. may 1995
millie villarrealph.d. december 1994
bart geracipostdoc sep 1993 - sep 1994
marty sirkinph.d. march 1994
sankar dasarim.sc. may 1994


overview (getting started)
software components that are used by generators to build software systems are not typical software modules. components 
encapsulate a feature of a domain that many systems of that domain may share. for this to be possible, components must encapsulate 
refinements of many different parts (e.g., classes) of a software system. some of these refinements require the manipulation of 
metadata and reflective computations. thus, it is likely that our basic approach goes beyond simple object-orientation to that of 
large-scale program transformations. 

to get a feel for the basic issues involved and the breadth of 
genvoca's applicability, i'd recommend the following papers for 
starters (and read them in this order): 
scalable software libraries 
creating reference architectures... 
the design and implementation... 
composition validation and subjectivity... 



if you are looking for specific results (improvement in productivity, 
performance) that can be delivered by generators, or the 
relationship of our work to design patterns, check out (in order): 
reengineering a complex application... 
p2: a lightweight dbms generator 
memory simulators and software generators
automated software evolution via design patterns... 



for further information, please contact don batory (batory@cs.utexas.edu). periodically, i release lecture notes for my tutorial on 
&quot;software system generators, architectures, and reuse&quot;. when available, lecture notes are distributed as a tar file containing 
compressed postscript files. 

last modified: december 24, 1996

don batory (batory@cs.utexas.edu) 




 ssgrg person person
 ssgrg person person
 ssgrg person person
 ssgrg person person
 ssgrg person person
 ssgrg person person
 ssgrg person person
 ssgrg person person
 ssgrg person person
 ssgrg person person