cucs ibm sp-2


computer science ibm sp-2





using the cucs sp-2

the machine is called granita. the eight nodes are granita1
through granita8.
if you have a cucs login, you can use the sp-2.
log into granita1 or granita2 which we've designated as
interactive nodes. shells installed: 
sh, bsh, csh, ksh, tcsh, bash, tsh. if you experience problems
during your first login, try to remove operating-system specific stuff
from your shell configuration file (for example, aix does not have
the arch command; you can use uname instead). 
the file /usr/lpp/bos/readme contains 
information
about the release of aix used on our sp-2. in addition to man
you can use infoexplorer to get more information about commands
and usage of the machine. to use this program, set up your remote display 
properly 
and type info.
use poe to run parallel jobs that use neither active
massages nor split-c (and info -l pe
or man poe to read more about poe).
read below about how to run parallel programs that use active messages
or split-c.

more information about:

ibm sp-2
hardware.
cornell theory center sp-2.



homegrown software

in general, local software is installed in /usr/u/sww. be
sure that /usr/u/sww/sp2/bin and 
/usr/u/sww/sp2/gnu/bin are in your path.


split-c

split-c is a simple extension to c for
parallel computing. it provides a global address space though global
pointers which can be dereferenced just like regular pointers.
split-phase assignment statements allow programmers to hide the latency
of remote accesses by overlapping computation and communication.
examples and makefiles can be found in 
~sww/sp2/split-c-bench/cu-bench.

before working with split-c, source 
~sww/sp2/etc/sp2-setenv. users of non-csh shells
should execute commands in ~sww/sp2/etc/sp2-setenv-non-csh.
to compile split-c programs, create a makefile
(look at samples in various directories in 
~sww/sp2/split-c-bench/cu-bench) and type gmake.
you must include make.split-c in your makefile!
split-c programs are run in the same way as
active messages programs, i.e. using amr scripts
located in /usr/u/sww/sp-2/bin. for example, to run a program
foo on 3 processors type amr3 ./foo

debugging split-c
to debug a split-c program, the following steps need to be done:

 include split-c/debug.h
 insert splitc_debug() as the first statement to be executed after
splitc_main()
 compile and run your program as described in the previous section
 you will see the following message in node 0 (most commonly run on
granita1): debugging split-c -- hit enter to continue:"
 before hitting return, log onto the node you want to debug (if you
want to debug the master node, open a new shell)
 go to the directory where your program source is located
 run gdb
 inside gdb, do: file am_run, and then
attach pid, where pid the
the proc id of the am_run process on the node being debugged
 hit return on node 0 to let computation proceed
 once you've attached gdb to am_run, am_run is stopped by gdb, and
you can set breakpoints, look at stack frames, etc.


active messages

active messages is a low-overhead communication layer
that offers high-performance communication on many parallel machines.
a native active messages layer (sp2am) is now available for the sp-2.
the main performance characteristics of sp2 am are a one-word round-trip
latency of 51 us and an asymptotic network bandwidth of 34.3 mb/s.

the sp2am library is found in /usr/u/sww/sp-2/lib/libsp2gam.a
and the header file is in /usr/u/sww/sp-2/include. before
running programs that use active messages, 
source ~sww/sp2/etc/sp2-setenv and read
/usr/u/sww/sp-2/gam-1.0/doc/runningprgms. 
the amr scripts are located also in 
/usr/u/sww/sp-2/bin.

mpi

mpi is a popular
message passing interface for portable parallel programs.  we have an
implementation of mpi (based on the mpich library) running over
active messages on the sp-2.
the header files are located in /usr/u/sww/sp-2/include.
the library file is located in /usr/u/sww/sp-2/lib.
the easiest way to compile and link is with the script file "ampicc" (which
is built on top of xlc):

ampicc -o3 foo.c -o foo

you can also compile mpi programs with xlc, gcc, and split-cc (please look
at the examples
in the directory ~sww/sp2/ampi/examples for information about this).
mpi programs are run exactly like
ordinary active messages programs (i.e. "amr4 foo").
be sure to source ~sww/sp2/etc/sp2-setenv.








other software
software available on granita1 and granita2 also includes 
tcsh, bash, c set ++ (xlc), fortran (xlf), xpdbx, x11, matlab. 
gnu software installed in
~sww/sp2/gnu includes 
emacs, gmake, gcc, g++, gdb, bison. some of it is 
replicated locally in /usr/local/gnu/bin.


problems

if you experience difficulties with the sp-2, please contact the sp-2
czar 
grzegorz czajkowski.



cucs ibm sp-2
cucs ibm sp-2
cucs ibm sp-2
cucs ibm sp-2
cucs ibm sp-2
cucs ibm sp-2
cucs ibm sp-2
cucs ibm sp-2
cucs ibm sp-2
cucs ibm sp-2