cornell active messages


cornell active messages 


cornell active messages implementations

active messages for u-net
a source-code release of u-net active messages is part of the
general u-net release. it conforms to the gam-1.1 spec below. for more
information, see the u-net project pages.

active messages for the ibm sp-2 an object-code
release of sp2 am for aix 3.2 is available in gam-1.0.aix3.tar.z. it conforms to the
gam-1.1 spec below.  please read readme and install files in the distribution for instructions
on using sp2 am.  for more information contact: chi-chao chang, grzegorz czajkowski, thorsten von eicken.

please read the releasenotes.aix3 file
to find out about the changes from the previous version. the current
version of sp2 am is 1.0f. 

also, there is a release for aix 4.1.: gam-1.0.aix4.tar.z. the major difference
between the aix 4.1 release to the 3.2 is a modified
/usr/lpp/ppe.poe/lib/us/libmpci.a, which is included in the
distribution.  please read the documentation in the package for
details.

we are interested in knowing who is currently using sp2 am.  please
click here to send a brief
note letting us know something about you, your organization, and the
uses you intend for sp2 am.


selected publications on active messages


low-latency communication on the ibm
risc system/6000 sp chi-chao chang, grzegorz czajkowski,
chris hawblitzel, and thorsten von eicken, to appear in acm/ieee
supercomputing '96, pittsburgh, pa, november 1996.



abstract:

the ibm sp is one of the most powerful commercial mpps, yet, in spite
of its fast processors and high network bandwidth, the sp's
communication latency is inferior to older machines such as the tmc
cm-5 or meiko cs-2. this paper investigates the use of active messages
(am) communication primitives as an alternative to the standard
message passing in order to reduce communication overheads and to
offer a good building block for higher layers of software. 
the first part of this paper describes an implementation of active
messages (sp am) which is layered directly on top of the sp's network
adapter (tb2).  with comparable bandwidth, sp am's low overhead yields
a round-trip latency that is 40% lower than ibm mpl's.  the second
part of the paper demonstrates the power of am as a communication
substrate by layering split-c as well as mpi over it. split-c
benchmarks are used to compare the sp to other mpps and show that low
message overhead and high throughput compensate for sp's high network
latency.  the mpi implementation is based on the freely available
mpich version and achieves performance equivalent to ibm's mpi-f on
the nas benchmarks.

design and performance of active messages on the 
sp-2
chi-chao chang, grzegorz czajkowski, and thorsten von eicken,
cornell cs technical report 96-1572, february 1996.

abstract:

this technical report describes the design, implementation, and
evaluation of active messages on the ibm sp-2.  the implementation
benchmarked here uses the standard tb2 network adapter firmware but
does not use any ibm software on the power2 processor.  we assume
familiarity with the concepts underlying active messages.  the main
performance characteristics are a one-word message round-trip time
of 51.0 us and an asymptotic network bandwidth of 34.3 mb/s.
after presenting selected implementation details, the paper focuses
on detailed performance analysis, including a comparison with ibm's
message passing layer (mpl) and split-c benchmarks.


generic active message specification, version 1.1.


the generic active message specification, version 1.1 defines an active
messages interface which is portable across a variety of parallel machines.
implementations are available for the
u-net atm cluster,
the
meiko cs-2,
the
hpam fddi ring,
the
paragon,
and the

sp-2.


low-latency communication over atm networks
using active messages.
thorsten von eicken, veena avula, anyndia basu, vineet buch,
presented at hot interconnects ii,
aug 1994, palo alto, ca.
an abridged version of this paper appears in ieee micro magazine, feb. 1995.


slides from hot interconnect talk.

abstract:

recent developments in communication architectures for
parallel machines have made significant progress and reduced the
communication overheads and latencies by over an order of magnitude as
compared to earlier proposals. this paper examines whether these
techniques can carry over to clusters of workstations connected by an
atm network even though clusters use standard operating system
software, are equipped with network interfaces optimized for stream
communication, do not allow direct protected user-level access to the
network, and use networks without reliable transmission or flow
control.

in a first part, this paper describes the differences in
communication characteristics between clusters of workstations built
from standard hardware and software components and state-of-the-art
multiprocessors. the lack of flow control and of operating system
coordination affects the communication layer design significantly and
requires larger buffers at each end than on multiprocessors. a second
part evaluates a prototype implementation of the low-latency active
messages communication model on a sun workstation cluster
interconnected by an atm network. measurements show
application-to-application latencies of about 20 microseconds for small
messages which is roughly comparable to the active messages
implementation on the thinking machines cm-5 multiprocessor.


active messages: a mechanism for integrated communication and
computation.
von eicken, t., d. e. culler, s. c. goldstein, and k. e. schauser,
proceedings of the 19th int'l symp. on computer architecture,
may 1992, gold coast, australia.


abstract

the design challenge for large-scale multiprocessors is (1) to
minimize communication overhead, (2) allow communication to overlap
computation, and (3) coordinate the two without sacrificing
processor cost/performance.  we show that existing message passing
multiprocessors have unnecessarily high communication costs.  research
prototypes of message driven machines demonstrate low communication
overhead, but poor processor cost/performance.  we introduce a simple
communication mechanism, active messages, show that it is
intrinsic to both architectures, allows cost effective use of the
hardware, and offers tremendous flexibility.  implementations on ncube/2
and cm-5 are described and evaluated using a split-phase shared-memory
extension to c, split-c.  we further show that active messages
are sufficient to implement the dynamically scheduled languages for
which message driven machines were designed.  with this mechanism,
latency tolerance becomes a programming/compiling concern.  hardware
support for active messages is desirable and we outline a range of
enhancements to mainstream processors.


active messages: an efficient
communication architecture for multiprocessors. von eicken, t.,
ph.d. thesis, november 1993, university of california at berkeley.




projects at other sites

active messages
in the berkeley now project



for further information contact
thorsten von eicken



 person person person
 person person person
 person person person
 person person person
 person person person
 person person person
 person person person
 person person person
 person person person
 person person person