uw dynamic compilation project
















the uw dynamic compilation project










more information

 our dynamic  compiler

 project members

 papers

 related projects



uw-only sections

 student projects 

 group web








dynamic compilation enables optimizations based on the values of
invariant data computed at run-time. using the values of these
run-time constants, a dynamic compiler can eliminate their memory
loads, perform constant propagation and folding, remove branches they
determine, and fully unroll loops they bound. however, the performance
benefits of the more efficient, dynamically-compiled code are offset
by the run-time cost of the dynamic compile. our approach to dynamic
compilation strives for both fast dynamic compilation and high-quality
dynamically-compiled code: the programmer annotates regions of the
programs that should be compiled dynamically; a static, optimizing
compiler automatically produces pre-optimized machine-code templates,
using a pair of dataflow analyses that identify which variables will
be constant at run-time; and a simple, dynamic compiler copies the
templates, patching in the computed values of the run-time constants,
to produce optimized, executable code. our work targets general-
purpose, imperative programming languages, initially c. initial
experiments applying dynamic compilation to c programs have produced
speedups ranging from 1.2 to 1.8.

we are part of the spin
project.  eventually, our system will be used to dynamically
compile code in the spin kernel, for example the spin
event dispatcher.  however, we are also actively exploring other
possible applications of dynamic compilation, such as in
virtual-machine interpreters.

our prototype dynamic-compilation system
is described in our pldi paper.  we are
now starting to design and build our second-generation system.  we
will release more details on it soon.



last updated august 6, 1996.
grant@cs.washington.edu