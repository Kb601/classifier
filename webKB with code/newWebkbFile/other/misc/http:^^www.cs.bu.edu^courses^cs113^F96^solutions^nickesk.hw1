#include "genlib.h"
#include "simpio.h"

int main()
{
  int degcelsius, degfrnht;  /*  assume input/output is integer  */

  printf("\nthis program converts fahrenheit to celsius.\n");
  printf("enter a temperature in degrees fahrenheit: ");
  degfrnht=getinteger();
  degcelsius=(degfrnht-32)*5/9;  /*  compiler automatically changes decimal
                                  *  to integer  */
  printf("%d degrees f = %d degrees c\n\n", degfrnht, degcelsius);
  return(0);
}


/* ---------------------- end of file: hw1-temp.c ------------------- */


/*
 *          file:  hw1-weight.c
 *          =====  ============
 *        author:  nick eskelinen
 *         class:  cas cs113
 *    assignment:  assignment 1, problem 2 (roberts ch2, p57 #9)  
 *      due date:  13 september 1996
 * last modified:  12 september 1996
 * -----------------------------------------------------
 *
 * usage:  hw1-weight (no command-line arguments)
 * ======
 *
 * overview:
 * =========
 * this program takes a weight in kilograms and converts it into its
 * equivalent in pounds and ounces.
 *
 * algorithm notes:  
 * ================
 * the precise decimal value in pounds is first computed.  the non-
 * decimal portion is used as the "lb" value, while the decimal portion
 * is multiplied by 16 to obtain the "oz" value.
 *
 * known bugs:  none
 * ===========
 *
 * enhancements:  none
 * =============
 *
 * error handling: 
 * ===============
 * 1.  user enters a non-numerical value.
 *     error message:  text displayed indicating why input is unacceptable.
 *      error action:  user is given another chance to enter input.
 * 
 * other comments:
 * ===============
 * the precision of the "oz" output is set to one decimal place, but can be
 * changed to be more or less precise.
 */

#include 
#include "simpio.h"
#include "genlib.h"

int main()
{
  double kilos, totalpounds, ounces;  /* input, output, & computation */
  int lbs;                            /* variables.                   */

  printf("\nthis program converts kilograms to pounds & ounces.\n");
  printf("enter a weight in kilograms:  ");
  kilos=getreal();

  totalpounds=kilos*2.2;         /* precise value in pounds */
  lbs=(int) totalpounds;         /* value output for "lb"   */
  ounces=(totalpounds-lbs)*16.0; /* value output for "oz"   */

  printf("\n%g kg = %d lbs %.1f oz\n\n", kilos, lbs, ounces);
  return(0);
} /* end main */

/* -------------> end of file: hw1-weight.c 
#include "genlib.h"
#include "simpio.h"

int main()
{
  int posint, maxnum, sum;

  printf("\nthis program prints the sum of all positive integers less than");
  printf("\nor equal to a given integer.\n");
  printf("enter an integer:  ");
  maxnum=getinteger();

  sum=0;
  for (posint = 1; posint  end of file: hw1-sum.c 
#include "genlib.h"
#include "simpio.h"

int main()
{
  int numitems, item, sum, bigitem;
  double average;

  printf("\nthis program takes a list and finds its average & greatest #.");
  printf("\nenter -1 to signal the end of the list:\n");

  numitems=0;      /* variable initialization */
  sum=0;
  bigitem=0;

  while (true) {
    printf("?: ");
    item=getinteger();
    if (itembigitem) bigitem=item;    /* try to find largest number */
  } /* end while */
  if (numitems==0) {                   /* avoid division by zero     */
    printf("\nexiting program...\n");
    return(1);
  } /* end if */
  average=(double) sum/numitems;

  printf(" number of items: %d", numitems);
  printf("\naverage of items: %g", average);
  printf("\n  largest number: %d\n\n", bigitem);
  return(0);
} /* end main */

/* ---------------> end of file: hw1-stats.c  /home/course/cs113/gradesf96/hw1/stats.in1  /home/course/cs113/gradesf96/hw1/stats.in2  /home/course/cs113/gradesf96/hw1/sum.in1  /home/course/cs113/gradesf96/hw1/sum.in2  /home/course/cs113/gradesf96/hw1/temp.in1  /home/course/cs113/gradesf96/hw1/temp.in2  /home/course/cs113/gradesf96/hw1/weight.in1  /home/course/cs113/gradesf96/hw1/weight.in2 <==
167.25

============================================================